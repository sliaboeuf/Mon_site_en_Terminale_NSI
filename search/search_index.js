var __index = {"config":{"lang":["fr"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Cours de Terminale NSI","text":"<p> Les ressources de ce travail sont disponibles sous licence Creative Commons BY-NC-SA. Respect de la Paternit\u00e9 \u2013 Pas d\u2019utilisation commerciale \u2013 Partage des conditions initiales \u00e0 l\u2019identique. <p> </p>"},{"location":"cours/Arbres/index.html","title":"Les arbres","text":"<p> Les ressources de ce travail sont disponibles sous licence Creative Commons BY-NC-SA. Respect de la Paternit\u00e9 \u2013 Pas d\u2019utilisation commerciale \u2013 Partage des conditions initiales \u00e0 l\u2019identique. </p> <p> </p>"},{"location":"cours/Arbres/Activite%20introductive.html","title":"Activit\u00e9s de d\u00e9couverte sur la compression","text":""},{"location":"cours/Arbres/Activite%20introductive.html#activite-1-les-marmottes-ont-le-sommeil-leger","title":"Activit\u00e9 1 : les marmottes ont le sommeil l\u00e9ger","text":"<p>Exercice 1</p> <ol> <li>Regarder la vid\u00e9o suivante :  </li> <li>Construire alors l\u2019arbre pour lequel le nombre de d\u00e9placements sera le plus petit possible (avec 4 chemins et 5 marmottes <code>[2, 3, 5, 7, 8]</code>).</li> </ol> <p> Rappel des r\u00e8gles <p></p> <p>R\u00e8gle 1</p> <p>\u00c0 partir de l\u2019entr\u00e9e on peut construire deux couloirs, et au bout de chaque couloir on peut faire un embranchement vers deux autres, mais pas plus (au risque de faire s\u2019\u00e9crouler l\u2019\u00e9difice).</p> <p>R\u00e8gle 2</p> <p>Les marmottes vont chacune occuper une salle diff\u00e9rente (pour ne pas se r\u00e9veiller les unes les autres) et forc\u00e9ment une salle qui est tout au bout d\u2019un couloir. Pour des marmottes au sommeil l\u00e9ger il est inenvisageable de dormir dans une salle \u00e0 un embranchement, car les marmottes qui seraient au-del\u00e0 de cet embranchement leur marcheraient dessus en entrant/sortant, et cela ruinerait leur hibernation.</p> <p>R\u00e8gle 3</p> <p>Chaque marmotte se r\u00e9veille un nombre pr\u00e9cis de fois dans l\u2019hiver, et s\u2019il n\u2019est pas grave de mettre assez loin de l\u2019entr\u00e9e une marmotte qui ne se r\u00e9veille (et donc ne sort du terrier) qu\u2019une fois dans l\u2019hiver, c\u2019est bien plus emb\u00eatant de mettre loin une marmotte qui va se r\u00e9veiller 10 fois par exemple. Comme les pas de marmottes \u00e9mettent de l\u00e9g\u00e8res vibrations et que nos marmottes ont vraiment le sommeil l\u00e9ger, on va vouloir minimiser les d\u00e9placements de l\u2019ensemble du groupe.</p> Solution optimale <p>Remarque importante</p> <p>Cette vid\u00e9o ne doit \u00eatre visionn\u00e9e que lorsque vous pensez avoir trouv\u00e9 la solution otimale !</p> <p> </p> <p>Exercice 2</p> <p>Appliquer l'algorithme pr\u00e9c\u00e9dent avec 7 chemins et 8 marmottes <code>[2, 2, 2, 4, 4, 5, 5, 6]</code>.</p> Solution <p> </p>"},{"location":"cours/Arbres/Activite%20introductive.html#activite-2-construction-de-larbre-dhuffman-sur-un-mot","title":"Activit\u00e9 2 : Construction de l\u2019arbre d\u2019Huffman sur un mot","text":"<p>Exercice 3</p> <ol> <li>Regarder la vid\u00e9o suivante :  </li> <li>A l'aide du programme Python ci-dessous, tirer au sort deux mots \u00e0 coder parmi une liste de mots (mots longs avec des r\u00e9p\u00e9titions de caract\u00e8res) :     \ud83d\udc0d Script Python<pre><code>import random\n\nmaListe = ['TROTTINETTE', 'TUMULTUEUX', 'EVENEMENTIELLE', 'DEREGLEMENTER', 'INDIVISIBILITE', 'TURLUTUTU', 'EXTRATERRESTRE', 'REFRIGERATEUR', 'MILLEFEUILLE', 'LIBELLULE']\nrandom.shuffle(maListe)\n\nprint(f\"Vous allez coder les mots {maListe[0]} et {maListe[1]}\")\n</code></pre> </li> <li>Construire alors l\u2019arbre de Huffman et la table de codage de chacun des deux mots obtenus.</li> <li>Coder les deux mots avec leur table respective.</li> <li>Noter sur une feuille les deux mots cod\u00e9s et les tables de codage correspondantes puis \u00e9changer ensuite cette feuille avec celle d'un autre groupe.</li> <li>D\u00e9coder alors les mots de l'autre groupe connaissant uniquement la table de codage.</li> </ol> Aide (si n\u00e9cessaire) <p>Exemple de codage d'un mot avec l'arbre d'Huffman. Soit le mot ABRACADABRA.  </p> <p>Etape 1</p> <p>On compte pour chaque lettre de l\u2019alphabet pr\u00e9sent dans le mot le nombre de fois qu\u2019elle appara\u00eet dans le mot.  Lettre A B C D R Occurrence 5 2 1 1 2 <p>Etape 2</p> <p>On construit l'arbre : </p> <p>Etape 3</p> <p>On note :  <ul> <li>0 les branches de gauche ;</li> <li>1 les branches de droite.</li> </ul> <p> </p> <p>Etape 4</p> <p>On construit la table de codage :  Lettre A B C D R Code \\(~~\\)\\(~~\\)1\\(~~\\)\\(~~\\) \\(~~\\)011\\(~~\\) 0100 0101 \\(~~~\\)00\\(~~~\\) </p> <p>Etape 5</p> <p>On peut alors coder le mot :  10110010100101011011001</p>"},{"location":"cours/Arbres/Banc_d_essai.html","title":"Banc d'essai de diff\u00e9rents formats de fichiers","text":""},{"location":"cours/Arbres/Banc_d_essai.html#preparation-du-programme","title":"Pr\u00e9paration du programme","text":"<p>On va passer au banc d\u2019essai notre programme pour voir ses performances sur diff\u00e9rents types de fichiers.  </p> <p>On pr\u00e9sentera les r\u00e9sultats sous la forme d\u2019un histogramme comparant l\u2019algorithme d\u2019Huffman programm\u00e9 et un logiciel de compression pr\u00e9sent sur votre ordinateur. </p> <p>Avant de commencer, \u00e9tant donn\u00e9 que l\u2019on va faire des tests sur des fichiers plus volumineux qu\u2019auparavant, on va \u00e9viter d\u2019afficher le texte compress\u00e9 et l\u2019arbre d\u2019huffman dans la console.</p> <ul> <li>Ajouter, si ce n\u2019est d\u00e9j\u00e0 fait un <code>#</code> dans les fonctions devant les instructions :</li> </ul> <ul> <li>D\u2019affichage du type <code>print</code> (sauf pour l\u2019affichage du taux de compression).</li> <li>D\u2019affichage de l\u2019arbre d\u2019Huffman.</li> </ul> <ul> <li>Ajouter dans le programme principal une mesure du temps d\u2019ex\u00e9cution :  \ud83d\udc0d Script Python<pre><code>from time import *\n\nstart = time()\n\ncompresse(\"Fichiers_Banc_D_Essai/\" + fichier + \".txt\")\ndecompresse(\"Fichiers_Banc_D_Essai/\" + fichier + \".huf\", fichier + \"_decompresse.txt\")\n\nend = time()\nprint(f\"Dur\u00e9e {end - start} secs\")\nend = time()\n</code></pre> Il faut bien entendu mettre le programme \".py\" dans le m\u00eame dossier que les fichiers \u00e0 compresser. </li> </ul>"},{"location":"cours/Arbres/Banc_d_essai.html#compression-dun-fichier-textetxt-plus-volumineux","title":"Compression d\u2019un fichier texte.txt plus volumineux","text":"<p>On va tester le programme avec un fichier texte (en utf-8) sur un livre : The Mysterious Affair at Styles d\u2019Agatha Christie. </p> <ol> <li>T\u00e9l\u00e9charger et d\u00e9compresser le fichier Fichiers_Banc_D_Essai.zip.</li> <li>En utilisant la fonction <code>compresse()</code>, compresser le fichier 1_livre_a_christie.txt.</li> <li>Ouvrir le fichier comparaison_compression.xlsx et compl\u00e9ter la premi\u00e8re ligne.</li> </ol> <p>Remarque</p> <p>On prendra la taille du fichier \".huf\" pour le fichier compress\u00e9 du programme.</p> <ol> <li>Compresser d\u00e9sormais le m\u00eame fichier de d\u00e9part (1_livre_a_christie.txt) avec un logiciel de compression disponible sur votre ordinateur et noter la taille du fichier obtenu.</li> </ol>"},{"location":"cours/Arbres/Banc_d_essai.html#decompression-dun-fichier-textetxt","title":"D\u00e9compression d\u2019un fichier texte.txt","text":"<ol> <li>A l\u2019aide du programme python, d\u00e9compresser le fichier en utilisant dans la fonction <code>decompresse()</code> les fichiers 1_livre_a_christie.huf et 1_livre_a_christie.occ. Regarder la taille du fichier d\u00e9compress\u00e9. Est-ce qu\u2019il y a une diff\u00e9rence par rapport au fichier d\u2019origine ?</li> </ol>"},{"location":"cours/Arbres/Banc_d_essai.html#autres-formats-de-fichier","title":"Autres formats de fichier","text":"<ol> <li>Remplir les diff\u00e9rentes lignes du fichier comparaison_compression.xlsx pour voir les performances et comparer les r\u00e9sultats de l\u2019algorithme d\u2019Huffman avec un logiciel de compression. Calculer le taux de compression entre le fichier \".zip\" et le fichier non compress\u00e9.</li> </ol> <p>Rappel</p> <p>1 Mo = 1024 Ko  et  1 Ko = 1024 octets</p> <p>Remarque</p> <p>Les fichiers images ont \u00e9t\u00e9 cr\u00e9\u00e9s pour obtenir des fichiers natifs. Des fichiers \".bmp\" peuvent par exemple \u00eatre des fichiers \".jpg\" r\u00e9enregistr\u00e9s.</p> <ol> <li>Quels sont les formats de fichier pour lesquels :</li> </ol> <ul> <li>L\u2019algorithme de Huffman est le plus performant ?</li> <li>L\u2019algorithme de Huffman est le moins performant ?</li> <li>Il existe d\u00e9j\u00e0 une compression dans le format lui-m\u00eame ?</li> </ul>"},{"location":"cours/Arbres/Compression.html","title":"La compression des donn\u00e9es","text":""},{"location":"cours/Arbres/Compression.html#pourquoi-compresser-les-donnees","title":"Pourquoi compresser les donn\u00e9es ?","text":"<p>De nos jours, le volume gigantesque de donn\u00e9es \u00e9chang\u00e9es sur internet, et stock\u00e9es sur des serveurs ne serait possible sans la compression des donn\u00e9es.  </p> <p>En effet, une simple chanson pourrait prendre jusqu\u2019\u00e0 150 Mo, ou 5 min de film 1Go, sans parler de l\u2019ensemble des m\u00e9tadonn\u00e9es, ...  </p> <p>Outre le gain d'espace, la compression am\u00e9liore la vitesse de transmission des donn\u00e9es sur les r\u00e9seaux. Elle permet donc de r\u00e9duire les co\u00fbts mat\u00e9riels de stockage, mais aussi les co\u00fbts li\u00e9s \u00e0 la bande passante r\u00e9seau.  </p> <p>Elle donne lieu encore de nos jours \u00e0 de nombreuses recherches en raison des enjeux \u00e9conomiques.</p>"},{"location":"cours/Arbres/Compression.html#les-types-de-compression","title":"Les types de compression","text":"<p>De nombreux algorithmes de compressions existent, chacun ayant sa particularit\u00e9 et surtout un type de donn\u00e9es cible : images, vid\u00e9os, textes, ex\u00e9cutables, textes, ...  </p> <p>En effet un algorithme de compression tr\u00e8s efficace pour un fichier texte sera une catastrophe pour de la vid\u00e9o et inversement.  </p> <p>Lors de la d\u00e9compression, la reconstruction des donn\u00e9es s\u2019effectue par un algorithme inverse ou diff\u00e9rent de celui de la compression.  </p> <p>"},{"location":"cours/Arbres/Compression.html#compression-symetrique-asymetrique","title":"Compression sym\u00e9trique / asym\u00e9trique","text":"La compression sym\u00e9trique <p>Dans ce cas, la compression et la d\u00e9compression utilisent la m\u00eame m\u00e9thode, et n\u00e9cessitent la m\u00eame quantit\u00e9 de calculs. </p> La compression asym\u00e9trique <p>Dans ce cas, la compression et la d\u00e9compression ne demandent pas la m\u00eame quantit\u00e9 de travail. Par exemple la compression en MP3 est plus lente que la d\u00e9compression pour la lecture, idem pour les vid\u00e9os.</p> <p>"},{"location":"cours/Arbres/Compression.html#compression-avec-sans-pertes","title":"Compression avec / sans pertes","text":"La compression sans perte (Lossless) <p>Les algorithmes de compression sans pertes permettent une reconstitution exacte de l\u2019information apr\u00e8s le cycle de compression / d\u00e9compression. Ils s\u2019utilisent pour les fichiers contenant du texte, les programmes informatiques (.exe), \u2026  </p> <p>S'il est facile de citer des formats de compression connus sans pertes (7z, Zip, Rar, Ace, Cab, gzip, ...), on conna\u00eet moins le nom des algorithmes derri\u00e8re ces extensions.  </p> <p>Pour 7z par exemple, il s'agit du LZMA (pour Lempel-Ziv-Markov chain-Algorithm), pour Zip du LZ77 et du codage Huffman, pour RAR du Lempel-Ziv et de la pr\u00e9diction par reconnaissance partielle (PPM).</p> La compression avec perte (Lossy) <p>Lors de la compression, l\u2019algorithme supprime irr\u00e9m\u00e9diablement des donn\u00e9es en essayant de conserver une qualit\u00e9 de lecture/visionnage optimale. On parle de compression irr\u00e9versible.  </p> <p>Les donn\u00e9es dont la qualit\u00e9 se limite aux perceptions humaines (images, vid\u00e9os, sons, \u2026) peuvent utiliser la compression avec pertes (JPEG, JPEG2000, ondelettes, fractales, MP3, MPEG...).</p>"},{"location":"cours/Arbres/Compression.html#les-criteres-de-compression","title":"Les crit\u00e8res de compression","text":"<p>La compression peut se d\u00e9finir par diff\u00e9rents crit\u00e8res tels que :  </p> <ul> <li>Le taux de compression (taille fichier compress\u00e9 / taille fichier initial) qui s\u2019exprime en pourcentage. Ou son inverse, le quotient (ratio) de compression = taille fichier initial / taille fichier compress\u00e9.</li> <li>La vitesse de compression/d\u00e9compression.</li> <li>L\u2019usage des ressources mat\u00e9rielles (m\u00e9moire, processeur).</li> <li>Rapport qualit\u00e9/taux de compression (avec pertes).</li> <li>Robustesse : sensibilit\u00e9 de l\u2019algorithme \u00e0 des petites alt\u00e9rations du code compress\u00e9 (erreurs de transmission).</li> </ul>"},{"location":"cours/Arbres/Compression.html#david-albert-huffman","title":"David Albert Huffman","text":"<p>Le professeur Huffman (1925 - 1999) a \u00e9t\u00e9 un des pionniers dans le domaine de l\u2019informatique.  </p> <p>N\u00e9 dans l\u2019Ohio, Huffman a obtenu une licence en ing\u00e9nierie \u00e9lectrique \u00e0 18 ans. Puis il a travaill\u00e9 pour la Marine militaire des \u00c9tats-Unis charg\u00e9 de la maintenance des radars. Il a obtenu ensuite un master \u00e0 l'universit\u00e9 de l'Ohio et son doctorat au MIT en 1953.  </p> <p>Huffman contribua beaucoup au d\u00e9veloppement de la th\u00e9orie de l'information et du codage, dont les d\u00e9couvertes sont \u00e0 la base des syst\u00e8mes de compression de fichiers informatiques dans toutes les machines de nos jours.  </p> <p>Il a \u00e9galement apport\u00e9 sa contribution dans d\u2019autres domaines tels que les signaux pour les radars par exemple.  </p> <p>Huffman a longtemps enseign\u00e9 la th\u00e9orie de l'information et l'analyse des signaux \u00e0 l\u2019universit\u00e9 de Californie \u00e0 Santa Cruz.</p>"},{"location":"cours/Arbres/Compression.html#lalgorithme-de-compression-de-huffman","title":"L\u2019algorithme de compression de Huffman","text":"<p>Le codage de Huffman est un codage statistique \u00e0 longueur variable. David Albert Huffman l\u2019a con\u00e7u alors qu'il \u00e9tait \u00e9tudiant au MIT. Il publia l'algorithme en 1952 dans un article intitul\u00e9 \"A Method for the Construction of Minimum-Redundancy Codes\".  </p> <p>La compression se fait en rempla\u00e7ant les caract\u00e8res les plus fr\u00e9quents par des codes courts et les caract\u00e8res les moins fr\u00e9quents par des codes longs. On observe ainsi des r\u00e9ductions de taille de l'ordre de 20 \u00e0 90 %.  </p> <p>C'est une m\u00e9thode de compression largement utilis\u00e9e, souvent en compl\u00e9ment d'autres algorithmes.</p> <p>"},{"location":"cours/Arbres/Compression.html#lalgorithme","title":"L\u2019algorithme","text":"<p>Les diff\u00e9rentes phases de l'algorithme</p> Cr\u00e9ation d'un arbre binaireCodage des caract\u00e8resEcriture du fichier compress\u00e9 <p> <ol> <li>A chaque caract\u00e8re du fichier source, on associe sa fr\u00e9quence. Chaque caract\u00e8re de fr\u00e9quence non nulle repr\u00e9sente un arbre binaire \u00e0 un \u00e9l\u00e9ment.</li> <li>Classer chaque arbre binaire par valeur croissante ou d\u00e9croissante de fr\u00e9quence.</li> <li>Enlever de la liste les 2 arbres binaires de plus faible fr\u00e9quence. Rattacher ces 2 arbres \u00e0 une nouvelle racine qui vaut la somme des fr\u00e9quences des 2 arbres pr\u00e9c\u00e9dents.</li> <li>Recommencer \u00e0 2., jusqu'\u00e0 ce qu'il ne reste plus qu'un arbre binaire unique.</li> </ol> <p>Pour conna\u00eetre le code de Huffman associ\u00e9 \u00e0 chaque caract\u00e8re du fichier source, il suffit de parcourir l'arbre, en partant de la racine pour rejoindre le caract\u00e8re voulu (feuille de l\u2019arbre).  </p> <p>A chaque n\u0153ud, on ajoute \"0\" au code en cours si on part dans le fils gauche et \"1\" si on part dans le fils droit.</p> <p>On r\u00e9\u00e9crit le fichier source en utilisant le nouveau code binaire des caract\u00e8res, puis l\u2019on joint la table de codage des caract\u00e8res. </p> <p>En pratique c\u2019est l\u2019encodage de l\u2019arbre de Huffman qui est joint avant le codage du texte compress\u00e9.</p> <p>"},{"location":"cours/Arbres/Compression.html#utilisation","title":"Utilisation","text":"<p>L\u2019algorithme de compression de Huffman est utilis\u00e9 par exemple, en compl\u00e9ment d\u2019autres algorithmes (souvent utilis\u00e9 en deuxi\u00e8me passage), dans les formats de compression aussi vari\u00e9s que ZIP, PNG, JPEG, MP3.</p> <p>"},{"location":"cours/Arbres/Compression.html#caracteristiques","title":"Caract\u00e9ristiques","text":"<ul> <li>Algorithme simple</li> <li>Sans pertes</li> <li>Asym\u00e9trique</li> <li>Plus lent que d\u2019autres algorithmes puisque compression en 2 temps (1\u00e8re lecture du fichier pour l\u2019\u00e9tude statistique, puis encodage et \u00e9criture du fichier compress\u00e9).</li> </ul>"},{"location":"cours/Arbres/Compression.html#exemple-de-compression","title":"Exemple de compression","text":"<p>Compression du mot \"BIENVENUE\" soit \\(~9~\\) caract\u00e8res ASCII et donc \\(~9\u00d78=72~\\) bits.  Symbole du fichier source B I V U N E Fr\u00e9quence d\u2019apparition 1 1 1 1 2 3 </p> <p>Etape 1</p> <p>Cr\u00e9ation d\u2019un arbre (\u00e0 un seul \u00e9l\u00e9ment) par symbole du texte, tri\u00e9s dans l\u2019ordre croissant (ou d\u00e9croissant) de leurs fr\u00e9quences d\u2019apparition. </p> <p>Etape 2</p> <p>Suppression des 2 arbres de gauche, remplac\u00e9s par un arbre qui les somme. Le nouvel arbre est ins\u00e9r\u00e9 dans la liste en respectant l'ordre croissant (ou d\u00e9croissant). </p> <p>Etape 3</p> <p>On recommence jusqu'\u00e0 ce qu'il ne reste plus qu'un seul arbre binaire. </p> <p>Etape 4</p> <p></p> <p>Etape 5</p> <p></p> <p>Etape 6</p> <p></p> <p>Etape 7</p> <p>On note :  <ul> <li>0 les branches de gauche ;</li> <li>1 les branches de droite.</li> </ul> <p> Et on obtient alors l'arbre de Huffman : </p> <p>Etape 8</p> <p>Ecriture de la table de codage optimale des caract\u00e8res. Le code associ\u00e9 \u00e0 chaque caract\u00e8re du code source est le chemin d'acc\u00e8s de la racine \u00e0 la feuille.  Symbole du fichier source E N I B U V Nouveau codage \\(~~\\)11\\(~~\\) \\(~~\\)10\\(~~\\) \\(~\\)011\\(~\\) \\(~\\)010\\(~\\) \\(~\\)001\\(~\\) \\(~\\)000\\(~\\) </p> <p>Etape 9</p> <p>Compression (r\u00e9\u00e9criture) du code source avec la table de codage optimale. Le mot \"BIENVENUE\" cod\u00e9 devient :  0100111110000111000111</p> <p>Ce qui fait, apr\u00e8s compression, 22 bits au lieu de 72 en ASCII, soit un taux de compression d'environ 30 %.  </p> <p>En pratique on incorpore en ent\u00eate du fichier compress\u00e9, le codage de l\u2019arbre de Huffman afin de retrouver l\u2019encodage optimal des symboles. Ce surplus est n\u00e9gligeable m\u00eame pour des fichiers de petites tailles.</p>"},{"location":"cours/Arbres/Correction%20des%20exos%20du%20cours.html","title":"Correction des exercices du cours","text":""},{"location":"cours/Arbres/Correction%20des%20exos%20du%20cours.html#correction-de-lexercice-2","title":"Correction de l'exercice 2","text":""},{"location":"cours/Arbres/Correction%20des%20exos%20du%20cours.html#correction-de-lexercice-3","title":"Correction de l'exercice 3","text":"<ol> <li>La racine de cet arbre est le noeud 2 situ\u00e9 tout en haut de l'arbre.</li> <li>La hauteur de cet arbre est 3 et sa taille est 10.</li> <li>Le noeud 7 a trois fils : les noeuds 2, 10 et 6.</li> <li>Le noeud 11 a pour p\u00e8re le noeud 6.</li> <li>Les feuilles de cet arbre sont les noeuds 2, 10, 5, 11 et 4.</li> </ol>"},{"location":"cours/Arbres/Correction%20des%20exos%20du%20cours.html#correction-de-lexercice-4","title":"Correction de l'exercice 4","text":"<ol> <li><code>B = arbreCons(7, arbreCons(29, arbreVide(), arbreVide()), arbreCons(13,</code> <code>arbreVide(), arbreCons(88,</code> <code>arbreVide(), arbreVide())))</code></li> <li><code>C = arbreCons(5, arbreCons(12, A, arbreVide()), B)</code></li> <li>Il s'agit du sous-arbre gauche du sous-arbre droit de <code>C</code> : </li> <li>L'instruction <code>estVide(sousArbreDroit(sousArbreGauche(sousArbreGauche(C))))</code> renvoie <code>True</code>.</li> <li>L'instruction <code>cle(sousArbreDroit(sousArbreDroit(C)))</code> renvoie la valeur <code>13</code>.</li> </ol>"},{"location":"cours/Arbres/Correction%20des%20exos%20du%20cours.html#correction-de-lexercice-5","title":"Correction de l'exercice 5","text":"<ol> <li> \ud83d\udc0d Script Python<pre><code>def estVide(self):\n    return not self.valeur\n</code></pre> </li> <li> \ud83d\udc0d Script Python<pre><code>def cle(self):\n    return self.valeur\n</code></pre> </li> <li> \ud83d\udc0d Script Python<pre><code>def sousArbreGauche(self):\n    if not self.estVide():\n        if self.G:\n            return self.G\n        return Arbre()\n</code></pre> </li> <li> \ud83d\udc0d Script Python<pre><code>def sousArbreDroit(self):\n    if not self.estVide():\n        if self.D:\n            return self.D\n        return Arbre()\n</code></pre> </li> <li> \ud83d\udc0d Script Python<pre><code>def estFeuille(self):\n    if not self.estVide():\n        gauche, droit = self.sousArbreGauche(), self.sousArbreDroit()\n        return gauche.estVide() and droit.estVide()\n        \n    return False\n</code></pre> </li> </ol>"},{"location":"cours/Arbres/Correction%20des%20exos%20du%20cours.html#correction-de-lexercice-6","title":"Correction de l'exercice 6","text":"\ud83d\udc0d Script Python<pre><code>def hauteur(self):\n    if self.estVide():\n        return -1\n    \n    if self.estFeuille():\n        return 0\n\n    gauche, droit = self.sousArbreGauche(), self.sousArbreDroit()\n    return 1 + max(gauche.hauteur(), droit.hauteur())\n</code></pre>"},{"location":"cours/Arbres/Correction%20des%20exos%20du%20cours.html#correction-de-lexercice-7","title":"Correction de l'exercice 7","text":"\ud83d\udc0d Script Python<pre><code>def nbFeuilles(self):\n    if self.estVide():\n        return 0\n\n    if self.estFeuille():\n        return 1\n\n    gauche, droit = self.sousArbreGauche(), self.sousArbreDroit()\n    return gauche.nbFeuilles() + droit.nbFeuilles()\n</code></pre>"},{"location":"cours/Arbres/Correction%20des%20exos%20du%20cours.html#correction-de-lexercice-8","title":"Correction de l'exercice 8","text":"\ud83d\udc0d Script Python<pre><code>def listeParcoursInfixe(self, L=[]):\n    if self.estVide():\n        return\n    \n    gauche, droit = self.sousArbreGauche(), self.sousArbreDroit()\n    gauche.listeParcoursInfixe(L)\n    L.append(self.cle())\n    droit.listeParcoursInfixe(L)\n    return L\n</code></pre>"},{"location":"cours/Arbres/Correction%20des%20exos%20du%20cours.html#correction-de-lexercice-9","title":"Correction de l'exercice 9","text":"\ud83d\udc0d Script Python<pre><code>def parcoursPrefixe(self):\n    if self.estVide():\n        return\n\n    gauche, droit = self.sousArbreGauche(), self.sousArbreDroit()\n    print(self.cle(), end = \" \")\n    gauche.parcoursPrefixe()\n    droit.parcoursPrefixe()\n</code></pre>"},{"location":"cours/Arbres/Correction%20des%20exos%20du%20cours.html#correction-de-lexercice-10","title":"Correction de l'exercice 10","text":"\ud83d\udc0d Script Python<pre><code>def parcoursPostfixe(self):\n    if self.estVide():\n        return\n\n    gauche, droit = self.sousArbreGauche(), self.sousArbreDroit()\n    gauche.parcoursPostfixe()\n    droit.parcoursPostfixe()\n    print(self.cle(), end = \" \")\n</code></pre>"},{"location":"cours/Arbres/Correction%20des%20exos%20du%20cours.html#correction-de-lexercice-11","title":"Correction de l'exercice 11","text":"\ud83d\udc0d Script Python<pre><code>def parcoursLargeur(self):\n    if self.estVide():\n        return\n\n    f = File()\n    f.enfiler(self)\n\n    while not f.estVide():\n        n = f.defiler()\n        fg, fd = n.sousArbreGauche(), n.sousArbreDroit()\n        if not fg.estVide():\n            f.enfiler(fg)\n        if not fd.estVide():\n            f.enfiler(fd)\n        print(n.cle(), end = ' ') # on traite le noeud\n    print('')\n</code></pre>"},{"location":"cours/Arbres/Correction%20des%20exos%20du%20cours.html#correction-de-lexercice-12","title":"Correction de l'exercice 12","text":"<ol> <li>La ville contient \\(~26\u00d726\u00d726=17576~\\) maisons.</li> <li>On sait que la hauteur d\u2019un arbre complet de taille \\(~n~\\) est \u00e9gale \u00e0 \\(\u230a\\operatorname{log_{2}}(n)\u230b\\), donc ici, comme \\(~n=17576~\\) et \\(\u230a\\operatorname{log_{2}}(17576)\u230b=14\\), on en d\u00e9duit qu'il faut traverser au maximum \\(~14~\\) rues pour trouver une maison quelconque.</li> </ol>"},{"location":"cours/Arbres/Correction%20des%20exos%20du%20cours.html#correction-de-lexercice-13","title":"Correction de l'exercice 13","text":"<ol> <li>Dans ce cas, on obtient :  L'arbre binaire de recherche n'est plus le m\u00eame : l'ordre dans lequel on ins\u00e8re les \u00e9l\u00e9ments est important.</li> </ol>"},{"location":"cours/Arbres/Correction%20des%20exos%20du%20cours.html#correction-de-lexercice-14","title":"Correction de l'exercice 14","text":"<p>Le parcours infixe de cet arbre donne : <code>3, 5, 6, 8, 9, 11, 13, 88</code>.  </p> <p>Propri\u00e9t\u00e9</p> <p>Un arbre binaire est un ABR si seulement si la liste des valeurs des noeuds \u00e9tablie dans l\u2019ordre infixe est strictement croissante.</p>"},{"location":"cours/Arbres/Correction%20des%20exos%20du%20cours.html#correction-de-lexercice-15","title":"Correction de l'exercice 15","text":"\ud83d\udc0d Script Python<pre><code>def estABR(self):\n    if self.estVide():\n        return True\n    \n    L = self.listeParcoursInfixe([])\n    return L == sorted(L)\n</code></pre>"},{"location":"cours/Arbres/Correction%20des%20exos%20du%20cours.html#correction-de-lexercice-16","title":"Correction de l'exercice 16","text":"\ud83d\udc0d Script Python<pre><code>def rechercherElement(self, e):\n    assert self.estABR() == True, \"L'arbre n'est pas un ABR\"\n    \n    if self.estVide():\n        return False\n    \n    if e == self.cle():\n        return True\n    \n    gauche, droit = self.sousArbreGauche(), self.sousArbreDroit()\n    \n    if e &lt; self.cle():\n        return gauche.rechercherElement(e)\n\n    return droit.rechercherElement(e)\n</code></pre>"},{"location":"cours/Arbres/Correction%20des%20exos%20du%20cours.html#correction-de-lexercice-17","title":"Correction de l'exercice 17","text":"\ud83d\udc0d Script Python<pre><code>def insererElement(self, e):\n    assert self.estABR() == True, \"L'arbre n'est pas un ABR\"\n\n    if self.estVide():\n        self.valeur = e\n        return\n\n    gauche, droit = self.sousArbreGauche(), self.sousArbreDroit()\n    \n    if e &lt;= self.valeur:\n        if not gauche.estVide():\n            gauche.insererElement(e)\n        else :\n            self.G = Arbre(e)\n    \n    else :\n        if not droit.estVide():\n            droit.insererElement(e)\n        else :\n            self.D = Arbre(e)\n</code></pre>"},{"location":"cours/Arbres/Correction.html","title":"Correction des exercices","text":""},{"location":"cours/Arbres/Correction.html#correction-de-lexercice-1","title":"Correction de l'exercice 1","text":"\ud83d\udc0d Script Python<pre><code>def estComplet(self):\n    return self.taille() == 2**(self.hauteur() + 1) - 1\n</code></pre> Version it\u00e9rativeVersion r\u00e9cursive \ud83d\udc0d Script Python<pre><code>def estStrict(self):\n    if self.estVide():\n        return False\n\n    f = File()\n    f.enfiler(self)\n\n    while not f.estVide():\n        n = f.defiler()\n        fg, fd = n.sousArbreGauche(), n.sousArbreDroit()\n        if not fg.estVide():\n            f.enfiler(fg)\n        if not fd.estVide():\n            f.enfiler(fd)\n        if (fg.estVide() and not fd.estVide()) or (fd.estVide() and not fg.estVide()) :\n            return False\n    return True\n</code></pre> \ud83d\udc0d Script Python<pre><code>def estStrict(self):\n    if self.estVide():\n        return False\n        \n    gauche, droit = self.sousArbreGauche(), self.sousArbreDroit()\n        \n    if gauche.estVide() and not droit.estVide():\n        return False\n    elif not gauche.estVide() and droit.estVide():\n        return False\n    elif self.estFeuille():\n        return True\n    else:\n        return gauche.estStrict() and droit.estStrict()\n</code></pre>"},{"location":"cours/Arbres/Correction.html#correction-de-lexercice-2","title":"Correction de l'exercice 2","text":"\ud83d\udc0d Script Python<pre><code>def compte(self, x):\n    if self.estVide():\n        return 0\n            \n    gauche, droit = self.sousArbreGauche(), self.sousArbreDroit()\n        \n    if self.cle() == x:\n        return 1 + gauche.compte(x) + droit.compte(x)\n        \n    return gauche.compte(x) + droit.compte(x)\n</code></pre>"},{"location":"cours/Arbres/Correction.html#correction-de-lexercice-3","title":"Correction de l'exercice 3","text":"Version it\u00e9rativeVersion r\u00e9cursive \ud83d\udc0d Script Python<pre><code>def estEgal(self, arbre):\n    f = File()\n    g = File()\n    f.enfiler(self) # On enfile l'arbre tout entier dans une file\n    g.enfiler(arbre) # et l'autre arbre dans l'autre file\n\n    while not f.estVide(): # tant que la file f (et donc g) n'est pas vide\n        n = f.defiler() # on d\u00e9file l'arbre en t\u00eate de file\n        m = g.defiler() # idem\n\n        if n.cle() != m.cle(): # si les racines sont diff\u00e9rentes\n            return False\n        # sinon, ils sont pour l'instant \u00e9gaux, on s'int\u00e9resse donc \u00e0 leurs \u00e9ventuels fils\n        gauche_n, droit_n = n.sousArbreGauche(), n.sousArbreDroit()\n        gauche_m, droit_m = m.sousArbreGauche(), m.sousArbreDroit()\n\n        if not n.estFeuille(): # si l'arbre n a au moins un fils\n            if not gauche_n.estVide(): # s'il a un fils gauche\n                if not gauche_m.estVide(): # et si l'arbre m aussi\n                    f.enfiler(gauche_n) # on les place chacun dans la file correspondante\n                    g.enfiler(gauche_m)\n                else: # l'arbre m n'a pas de fils gauche, ils ne sont donc pas \u00e9gaux\n                    return False\n\n            if not droit_n.estVide(): # si l'arbre n a un fils droit\n                if not droit_m.estVide(): # et l'arbre m aussi\n                    f.enfiler(droit_n) # on les place chacun dans la file correspondante\n                    g.enfiler(droit_m)\n                else: # l'arbre m n'a pas de fils droit, ils ne sont donc pas \u00e9gaux\n                    return False\n        else: # si l'arbre n'a pas de fils\n            if not gauche_m.estVide() or not droit_m.estVide(): # alors que l'arbre m en a au moins un\n                return False\n    return True\n</code></pre> \ud83d\udc0d Script Python<pre><code>def estEgal(self, arbre):\n    if self.estVide() and arbre.estVide():\n        return True\n    if self.estVide() ^ arbre.estVide():\n        return False\n        \n    gauche_self, droit_self = self.sousArbreGauche(), self.sousArbreDroit()\n    gauche_arbre, droit_arbre = arbre.sousArbreGauche(), arbre.sousArbreDroit()\n        \n    return gauche_self.estEgal(gauche_arbre) and droit_self.estEgal(droit_arbre)\n</code></pre>"},{"location":"cours/Arbres/Correction.html#correction-de-lexercice-4","title":"Correction de l'exercice 4","text":"\ud83d\udc0d Script Python<pre><code>def maxBranche(self):\n    if self.estVide():\n        return 0\n        \n    if self.estFeuille():\n        return self.cle()\n        \n    gauche, droit = self.sousArbreGauche(), self.sousArbreDroit()\n    return self.cle() + max(gauche.maxBranche(), droit.maxBranche())\n</code></pre>"},{"location":"cours/Arbres/Correction.html#correction-de-lexercice-5","title":"Correction de l'exercice 5","text":"\ud83d\udc0d Script Python<pre><code>def estValide(self):\n    if self.estVide():\n        return False\n        \n    if self.estFeuille():\n        return isinstance(self.cle(), int)\n        \n    gauche, droit = self.sousArbreGauche(), self.sousArbreDroit()\n        \n    if self.cle() in ['+', '-', '*', '/', '**']:\n        return gauche.estValide() and droit.estValide()\n            \n    return False\n</code></pre> \ud83d\udc0d Script Python<pre><code>def evaluation(self):\n    if self.estFeuille():\n        return self.cle()\n        \n    gauche, droit = self.sousArbreGauche(), self.sousArbreDroit()\n    return eval(str(gauche.evaluation()) + self.cle() + str(droit.evaluation()))\n    \n</code></pre>"},{"location":"cours/Arbres/Exercices.html","title":"Exercices","text":""},{"location":"cours/Arbres/Exercices.html#exercice-1","title":"Exercice 1","text":"<ol> <li>Ecrire une m\u00e9thode <code>estComplet()</code> de la classe <code>Arbre</code> qui indique si un arbre binaire est complet.</li> </ol> Code \u00e0 compl\u00e9ter \ud83d\udc0d Script Python<pre><code>class Arbre:\n\t...\n\n\tdef estComplet(self):\n\t###################\n\t# Votre code ici  #\n\t###################\n\n# Tests de la fonction\n\nA = Arbre(3, Arbre(2), Arbre(4))\nA.affichage()\nB = Arbre(3, Arbre(2, Arbre(5)), Arbre(4, Arbre(6)))\nB.affichage()\nC = Arbre(3, Arbre(2), Arbre(4, Arbre(5), Arbre(5)))\nC.affichage()\n\nassert A.estComplet(), \"Erreur\"\nassert not B.estComplet(), \"Erreur\"\nassert not C.estComplet(), \"Erreur\"\n</code></pre> <ol> <li>Un arbre binaire est dit strict (ou localement complet) quand deux fr\u00e8res (fils d\u2019un m\u00eame p\u00e8re) y sont toujours soit tous les deux vides soit tous les deux non vides. Cr\u00e9er la m\u00e9thode <code>estStrict()</code> de la classe <code>Arbre</code> qui indique si un arbre est strict ou non.</li> </ol> Code \u00e0 compl\u00e9ter \ud83d\udc0d Script Python<pre><code>class Arbre:\n\t...\n\n\tdef estStrict(self):\n\t###################\n\t# Votre code ici  #\n\t###################\n\n# Tests de la fonction\n\nA = Arbre(3, Arbre(2), Arbre(4))\nA.affichage()\nB = Arbre(3, Arbre(2, Arbre(5)), Arbre(4, Arbre(6)))\nB.affichage()\nC = Arbre(3, Arbre(2), Arbre(4, Arbre(5), Arbre(5)))\nC.affichage()\n\nassert A.estStrict(), \"Erreur\"\nassert not B.estStrict(), \"Erreur\"\nassert C.estStrict(), \"Erreur\"\n</code></pre> <p>Correction de l'exercice</p>"},{"location":"cours/Arbres/Exercices.html#exercice-2","title":"Exercice 2","text":"<p>Ecrire une m\u00e9thode <code>compte(x)</code> de la classe <code>Arbre</code> qui renvoie le nombre d'occurrences de <code>x</code> dans un ABR qui r\u00e9alise des multi-ensembles (dans lequel un m\u00eame \u00e9l\u00e9ment peut appara\u00eetre plusieurs fois).  </p> <p>On s'attachera \u00e0 ne pas descendre dans les sous-arbres dans lesquels on est certain que la valeur <code>x</code> ne peut appara\u00eetre.  </p> Code \u00e0 compl\u00e9ter \ud83d\udc0d Script Python<pre><code>class Arbre:\n\t...\n\n\tdef compte(self, x):\n\t###################\n\t# Votre code ici  #\n\t###################\n\n# Tests de la fonction\n\nD = Arbre(5, Arbre(4, Arbre(3, Arbre(2))), Arbre(13, Arbre(13, Arbre(8, Arbre(5))), Arbre(21, Arbre(17, Arbre(13)),Arbre(88))))\nD.affichage()\n\nassert D.compte(13) == 3, \"Erreur\"\nassert D.compte(5) == 2, \"Erreur\"\nassert D.compte(6) == 0, \"Erreur\"\n</code></pre> <p>Correction de l'exercice</p>"},{"location":"cours/Arbres/Exercices.html#exercice-3","title":"Exercice 3","text":"<p>On cherche dans cet exercice \u00e0 tester l'\u00e9galit\u00e9 de deux arbres binaires.  </p> <p>Ecrire une m\u00e9thode <code>estEgal(arbre)</code> de la classe <code>Arbre</code> qui teste l\u2019\u00e9galit\u00e9 avec un arbre pass\u00e9 en param\u00e8tre.</p> Code \u00e0 compl\u00e9ter \ud83d\udc0d Script Python<pre><code>class Arbre:\n\t...\n\n\tdef estEgal(self, arbre):\n\t###################\n\t# Votre code ici  #\n\t###################\n\n# Tests de la fonction\n\nD = Arbre(5, Arbre(4, Arbre(3, Arbre(2))), Arbre(13, Arbre(13, Arbre(8, Arbre(5))), Arbre(21, Arbre(17, Arbre(13)),Arbre(88))))\nD.affichage()\nE = Arbre(5, Arbre(4, Arbre(3, Arbre(2))), Arbre(13, Arbre(13, Arbre(8, Arbre(5))), Arbre(21, Arbre(17, Arbre(13)),Arbre(88))))\nE.affichage()\n\nassert D.estEgal(E), \"Erreur\"\n\nF = Arbre(5, Arbre(4, Arbre(3, Arbre(2))), Arbre(13, Arbre(13, Arbre(8, Arbre(5))), Arbre(21, Arbre(17, Arbre(13)))))\nF.affichage()\n\nassert not D.estEgal(F), \"Erreur\"\n</code></pre> <p>Correction de l'exercice</p>"},{"location":"cours/Arbres/Exercices.html#exercice-4","title":"Exercice 4","text":"<p>Ecrire une m\u00e9thode r\u00e9cursive <code>maxBranche()</code> de la classe <code>Arbre</code> qui renvoie la somme maximale des valeurs des noeuds depuis la racine vers n\u2019importe quelle feuille de l\u2019arbre (en ne visitant qu\u2019une seule fois chaque noeud).</p> Code \u00e0 compl\u00e9ter \ud83d\udc0d Script Python<pre><code>class Arbre:\n\t...\n\n\tdef maxBranche(self):\n\t###################\n\t# Votre code ici  #\n\t###################\n\n# Tests de la fonction\n\nassert C.maxBranche() == 12, \"Erreur\"\nassert D.maxBranche() == 127, \"Erreur\"\n</code></pre> <p>Correction de l'exercice</p>"},{"location":"cours/Arbres/Exercices.html#exercice-5","title":"Exercice 5","text":"<p>On cherche dans cet exercice \u00e0 \u00e9valuer une expression arithm\u00e9tique repr\u00e9sent\u00e9e par un arbre binaire comme celle donn\u00e9e dans l'exercice 2 du cours :</p> <p></p> <p>Soit un arbre binaire repr\u00e9sentant une expression arithm\u00e9tique contenant des entiers et des op\u00e9rateurs <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code> et <code>**</code>.  </p> <p>Si l\u2019expression est bien form\u00e9e (on dit aussi valide) alors l\u2019arbre binaire est strict. Chaque feuille de cet arbre contient donc un entier et chaque noeud interne un op\u00e9rateur.</p> <ol> <li>Ecrire r\u00e9cursivement la m\u00e9thode <code>estValide()</code> qui teste si un arbre binaire ne contenant que des entiers et des op\u00e9rateurs repr\u00e9sente bien une expression arithm\u00e9tique valide.</li> </ol> Code \u00e0 compl\u00e9ter \ud83d\udc0d Script Python<pre><code>class Arbre:\n...\n\n\tdef estValide(self):\n\t###################\n\t# Votre code ici  #\n\t###################\n\n# Tests de la fonction\n\t\nG = Arbre('+', Arbre(3), Arbre('**', Arbre('-', Arbre('/', Arbre(7), Arbre(3)), Arbre(1)), Arbre(3)))\nG.affichage()\n\nassert G.estValide(), \"Erreur\"\n\nH = Arbre('+', Arbre(3), Arbre('**', Arbre(8)))\nH.affichage()\n\nassert not H.estValide(), \"Erreur\"\n\nI = Arbre('+', Arbre(3), Arbre('**'))\nI.affichage()\n\nassert not I.estValide(), \"Erreur\"\n</code></pre> <ol> <li>Ecrire r\u00e9cursivement la m\u00e9thode <code>evaluation()</code> qui renvoie la valeur correspondant \u00e0 l\u2019expression arithm\u00e9tique repr\u00e9sent\u00e9e par l\u2019arbre qui est \u00e9valu\u00e9 (par exemple, sur l\u2019arbre illustr\u00e9 par la figure pr\u00e9c\u00e9dente, la fonction <code>evaluation()</code> doit renvoyer <code>5.370370370370371</code>). On suppose ici que l\u2019arbre repr\u00e9sente une expression valide.</li> </ol> Code \u00e0 compl\u00e9ter \ud83d\udc0d Script Python<pre><code>class Arbre:\n\t...\n\n\tdef evaluation(self):\n\t###################\n\t# Votre code ici  #\n\t###################\n\n# Tests de la fonction\n\nassert G.evaluation() == 5.370370370370371, \"Erreur\"\n</code></pre> <p>Remarque</p> <p>Puisque les op\u00e9rateurs doivent \u00eatre ins\u00e9r\u00e9s dans l'arbre en tant que caract\u00e8res, il va falloir \u00e9valuer dynamiquement le code.  </p> <p>On rappelle que la fonction <code>eval()</code> permet cela, par exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; eval(\"12 + 3\")\n15\n\n&gt;&gt;&gt; eval(\"12\" + \"3\")\n123\n\n&gt;&gt;&gt; eval(\"12\" + \"3*2\")\n246\n\n&gt;&gt;&gt; eval(\"12\" + \"*\" + \"3\")\n36\n</code></pre></p> <p>Correction de l'exercice</p>"},{"location":"cours/Arbres/Les%20arbres.html","title":"Les arbres","text":"<p> <p>Arbre cr\u00e9\u00e9 par un algorithme r\u00e9cursif</p> <p></p>"},{"location":"cours/Arbres/Les%20arbres.html#introduction","title":"Introduction","text":"<p>Probl\u00e9matique</p> <p>La notion de liste cha\u00een\u00e9e explor\u00e9e dans un pr\u00e9c\u00e9dent chapitre est parfaite pour structurer un ensemble d'\u00e9l\u00e9ments destin\u00e9 \u00e0 \u00eatre \u00e9num\u00e9r\u00e9 s\u00e9quentiellement.  </p> <p>Comme on l'a vu avec la r\u00e9alisation de piles et de files, cette structure permet \u00e9galement un acc\u00e8s simple, suivant le cas, au premier \u00e9l\u00e9ment ou au dernier de la s\u00e9quence.  </p> <p>Par contre l\u2019acc\u00e8s \u00e0 un \u00e9l\u00e9ment situ\u00e9 \u00e0 une position quelconque est plus probl\u00e9matique, puisqu'on doit parcourir les \u00e9l\u00e9ments les uns apr\u00e8s les autres, apportant ainsi un temps d\u2019acc\u00e8s proportionnel au nombre d\u2019\u00e9l\u00e9ments parcourus soit une complexit\u00e9 moyenne en \\(\\mathcal{O}(\\small{n}\\)\\()\\).</p> <p>Structures arborescentes</p> <p>Les structures arborescentes forment une autre famille de structures cha\u00een\u00e9es, dans lesquelles le nombre de sauts \u00e0 effectuer pour aller depuis le point de d\u00e9part jusqu'\u00e0 une position souhait\u00e9e est potentiellement bien moindre.  </p> <p>Ces structures sont omnipr\u00e9sentes en informatique et nous en avons d\u00e9j\u00e0 observ\u00e9 une en classe de Premi\u00e8re : l'arborescence des fichiers d'un ordinateurs.</p> <p></p> <p>Pour acc\u00e9der \u00e0 un fichier par exemple, on parcourt des r\u00e9pertoires (en partant du r\u00e9pertoire racine), ce qui permet ensuite un acc\u00e8s rapide au fichier recherch\u00e9. On imagine sans mal que si l'on devait parcourir une liste de fichiers jusqu\u2019\u00e0 obtenir le bon, le temps n\u00e9cessaire \u00e0 cet acc\u00e8s serait beaucoup plus grand, proportionnellement au nombre de fichiers de cette liste.  </p> <p>Ce principe d'un point de d\u00e9part unique \u00e0 partir duquel une structure cha\u00een\u00e9e se scinde \u00e0 chaque \u00e9tape en plusieurs branches donne l'id\u00e9e g\u00e9n\u00e9rale de la structure d'arbre en informatique, qui est la base d'innombrables structures de donn\u00e9es.  </p> <p>Cette structure permet en outre une organisation hi\u00e9rarchique de l'information, qui la rend utile pour repr\u00e9senter des programmes, des formules de logique, le contenu de pages web, etc.</p>"},{"location":"cours/Arbres/Les%20arbres.html#arbres-quelconques","title":"Arbres quelconques","text":""},{"location":"cours/Arbres/Les%20arbres.html#definition-et-exemples","title":"D\u00e9finition et exemples","text":"<p>D\u00e9finition</p> <p>Un arbre est une structure hi\u00e9rarchique permettant de repr\u00e9senter de mani\u00e8re symbolique des informations structur\u00e9es.</p> Exemple 1 : un arbre g\u00e9n\u00e9alogique <p> source : derniersvalois.canalblog</p> Exemple 2 : un arbre syntaxique <p>Un arbre syntaxique repr\u00e9sente l\u2019analyse d\u2019une phrase \u00e0 partir de r\u00e8gles de grammaire. </p> Exemple 3 : un arbre lexicographique <p>Un arbre lexicographique, ou arbre en parties communes, ou dictionnaire, repr\u00e9sente un ensemble de mots. Les pr\u00e9fixes communs \u00e0 plusieurs mots apparaissent une seule fois dans l\u2019arbre. </p> Exercice 1 <p>Rajouter dans cet arbre les mots : <code>malle</code> et <code>portail</code>.</p> Exemple 4 : repr\u00e9sentation d'une expression arithm\u00e9tique <p>On peut \u00e9galement repr\u00e9senter les expressions arithm\u00e9tiques par des arbres \u00e9tiquet\u00e9s par des op\u00e9rateurs, des constantes et des variables. </p> <p>La structure de l\u2019arbre rend compte de la priorit\u00e9 des op\u00e9rateurs et rend inutile tout parenth\u00e9sage.</p> <p>Pour l\u2019expression : \\((\\displaystyle\\frac{y}{2}-t)(75+z)\\) cela donne : </p> Exercice 2 <p>Repr\u00e9senter l\u2019expression : \\(3+(\\displaystyle\\frac{7}{3}-1)^3\\) Correction de l'exercice</p>"},{"location":"cours/Arbres/Les%20arbres.html#terminologie","title":"Terminologie","text":"<p>Noeud</p> <p>Un arbre est constitu\u00e9 de noeuds, reli\u00e9s entre eux par des ar\u00eates selon une relation p\u00e8res-fils.  On distingue trois types de noeuds :  <ul> <li>La racine de l\u2019arbre est l\u2019unique noeud ne poss\u00e9dant pas de parent.</li> <li>Les feuilles (ou noeuds externes), \u00e9l\u00e9ments ne poss\u00e9dant pas de fils dans l\u2019arbre.</li> <li>Les noeuds internes, \u00e9l\u00e9ments poss\u00e9dant des fils (sous-branches).  </li> </ul> <p>Le chemin \u00e0 la racine d\u2019un noeud est la liste des noeuds qu\u2019il faut parcourir depuis la racine jusqu\u2019au noeud consid\u00e9r\u00e9. </p> Remarque <p>L'analogie avec les arbres r\u00e9els peut s'av\u00e9rer trompeuse. Les arbres - en informatique - sont le plus souvent repr\u00e9sent\u00e9s avec la racine en haut, puis les noeuds, et les feuilles en bas.</p> <p>Mesures</p> <p>La profondeur d\u2019un noeud est la distance (nombre d\u2019ar\u00eates) de la racine au noeud.  </p> <p>La hauteur d\u2019un arbre est la plus grande profondeur d\u2019une feuille de l\u2019arbre.  </p> <p>La taille d\u2019un arbre est son nombre de noeuds.  </p> <p>La longueur de cheminement est la somme des profondeurs de chacune des feuilles.  Cette structure de donn\u00e9e est r\u00e9cursive : chaque noeud est lui m\u00eame noeud-racine d\u2019un sous-arbre (\u00e9galement appel\u00e9 branche).</p> Remarque importante <p>Il n\u2019existe pas de d\u00e9finition universelle pour la hauteur d\u2019un arbre et la profondeur d\u2019un noeud dans un arbre. Dans certains cas la profondeur des noeuds est compt\u00e9e \u00e0 partir de 1 et/ou la hauteur est \u00e9gale au nombre de profondeurs diff\u00e9rentes\u2026 Parfois \u00e9galement, la taille d\u2019un arbre ne tient pas compte des feuilles !!</p> Exercice 3 <p>Soit l\u2019arbre suivant : <ol> <li>Quelle est la racine de cet arbre ?</li> <li>Donner la hauteur et la taille de cet arbre.</li> <li>Donner le(s) fils du noeud 7.</li> <li>Donner le p\u00e8re du noeud 11.</li> <li>Donner toutes les feuilles de cet arbre.</li> </ol> <p> Correction de l'exercice</p> <p>\u00c9tiquette</p> <p>La finalit\u00e9 d\u2019un arbre est le plus souvent de structurer des donn\u00e9es : chaque noeud peut \u00eatre identifi\u00e9 par une \u00e9tiquette.  </p> <p>L\u2019\u00e9tiquette repr\u00e9sente directement la valeur du noeud ou bien une cl\u00e9 associ\u00e9e \u00e0 une donn\u00e9e.  </p> <p>Un arbre dont tous les noeuds sont nomm\u00e9s est dit \u00e9tiquet\u00e9.</p> Exemple <p>L\u2019arbre ci-dessous est \u00e9tiquet\u00e9 avec les entiers de 1 \u00e0 10 : </p>"},{"location":"cours/Arbres/Les%20arbres.html#arbres-binaires","title":"Arbres binaires","text":""},{"location":"cours/Arbres/Les%20arbres.html#definition-et-exemples_1","title":"D\u00e9finition et exemples","text":"<p>D\u00e9finition</p> <p>Un arbre binaire est un arbre dont tous les noeuds ont au plus deux fils.</p> Exemple et contre-exemple <p>L'arbre suivant est binaire : </p> <p>En revanche, l'arbre qui a servi d'exemple tout au long du paragraphe pr\u00e9c\u00e9dent n'en est pas un...  ... puisqu'il contient un noeud ayant plus de deux fils.</p> <p>Les d\u00e9finitions vues pr\u00e9c\u00e9demment pour des arbres quelconques restent bien \u00e9videmment valables pour les arbres binaires. Mais dans ce cas, chaque noeud poss\u00e8de deux sous-arbres, \u00e9ventuellement vides, que l'on appelle sous-arbre gauche et sous-arbre droit.  </p> <p>Par exemple, dans le cas de l'arbre binaire pr\u00e9c\u00e9dent, le noeud A poss\u00e8de un sous-arbre gauche et un sous-arbre droit comme le montre la figure suivante : </p> <p>Ainsi, et plus pr\u00e9cis\u00e9ment, un arbre binaire est un ensemble fini de noeuds correspondant \u00e0 l'un des deux cas suivants :</p> <ul> <li>Soit l'arbre est vide, c'est-\u00e0-dire qu'il ne contient aucun noeud.</li> <li>Soit l'arbre n'est pas vide, et ses noeuds sont structur\u00e9s de la fa\u00e7on suivante :</li> </ul> <ul> <li>Un noeud est la racine de l'arbre.</li> <li>Les noeuds restant sont s\u00e9par\u00e9s en deux sous-ensembles, qui forment r\u00e9cursivement deux sous-arbres (le gauche et le droit).</li> <li>La racine est reli\u00e9e \u00e0 ses deux sous-arbres gauche et droit, et plus pr\u00e9cis\u00e9ment \u00e0 la racine de chacun de ses sous-arbres (lorsqu'ils ne sont pas vides).</li> </ul> <p>On peut rapprocher la notion de noeud d\u2019un arbre binaire \u00e0 celle d\u2019une cellule de liste cha\u00een\u00e9e, la racine d\u2019un arbre non vide correspond \u00e0 la t\u00eate d\u2019une liste non vide qui contient une valeur et deux chainages menant vers les deux directions.</p>"},{"location":"cours/Arbres/Les%20arbres.html#cas-particuliers-darbres-binaires","title":"Cas particuliers d'arbres binaires","text":"<p>Il est possible d\u2019avoir des arbres binaires de m\u00eame taille mais de \"formes\" tr\u00e8s diff\u00e9rentes :</p> <p>Arbre complet</p> <p>Un arbre complet (ou parfait) est un arbre binaire dont tous les noeuds poss\u00e8dent exactement 2 fils (sauf les feuilles qui en ont z\u00e9ro !). </p> <p>Arbre filiforme</p> <p>Un arbre filiforme est un arbre binaire dont tous les noeuds (sauf la feuille) poss\u00e8dent un unique fils (on parle aussi de peigne). </p> <p>On pourra aussi dire que l\u2019arbre filiforme est d\u00e9s\u00e9quilibr\u00e9 alors que l\u2019arbre complet est \u00e9quilibr\u00e9.</p>"},{"location":"cours/Arbres/Les%20arbres.html#proprietes","title":"Propri\u00e9t\u00e9s","text":"<p>Encadrement de la hauteur</p> <p>La hauteur d\u2019un arbre filiforme de taille \\(~n~\\) est \u00e9gale \u00e0 \\(~n-1\\).  </p> <p>La hauteur d\u2019un arbre complet de taille \\(~n~\\) est \u00e9gale \u00e0 \\(\u230a\\operatorname{log_{2}}(n)\u230b\\) o\u00f9 \\(\u230a~\u230b\\) est le symbole de la partie enti\u00e8re.</p> Exemple <p>Si on reprend l'arbre complet pr\u00e9c\u00e9dent, \\(\\operatorname{log_{2}}(7)\\approx2,8\\) : la hauteur de l\u2019arbre complet est \u00e9gale \u00e0 \\(~2\\), ce que l'on v\u00e9rifie ais\u00e9ment.</p> <p>Un arbre filiforme et un arbre complet \u00e9tant deux cas extr\u00eames, on peut encadrer la hauteur d\u2019un arbre binaire quelconque :</p> <p>Propri\u00e9t\u00e9</p> <p>Un encadrement de la hauteur \\(~h~\\) d\u2019un arbre binaire quelconque de taille \\(~n~\\) est : \\(\u230a\\operatorname{log_{2}}(n)\u230b~\\)\\(\\leq\\)\\(~h~\\)\\(\\leq\\)\\(~n-1\\).</p> <p>De la m\u00eame mani\u00e8re, on peut encadrer la taille d\u2019un arbre binaire quelconque connaissant sa hauteur :</p> <p>Propri\u00e9t\u00e9</p> <p>Un encadrement de la taille \\(~n~\\) d\u2019un arbre binaire quelconque de hauteur \\(~h~\\) est : \\(h+1~\\)\\(\\leq\\)\\(~n~\\)\\(\\leq\\)\\(~2^{h+1}\u22121\\).</p> Exemple <p>La taille d\u2019un arbre de hauteur \\(~3~\\) est comprise entre \\(~3+1=4~\\) et \\(~2^{3+1}\u22121=15\\). </p>"},{"location":"cours/Arbres/Les%20arbres.html#implementation-en-python","title":"Impl\u00e9mentation en Python","text":""},{"location":"cours/Arbres/Les%20arbres.html#type-abstrait-arbre-binaire","title":"Type abstrait arbre binaire","text":"<p>De mani\u00e8re g\u00e9n\u00e9rale, on peut construire un arbre binaire comme un noeud compos\u00e9 de deux sous-arbres. L'arbre vide est repr\u00e9sent\u00e9e par la valeur <code>None</code>. Ainsi, une feuille est un noeud avec les sous-arbres gauche et droit \u00e0 <code>None</code>. Pour annoter la structure de l'arbre avec des informations, on utilise des \u00e9tiquettes pouvant \u00eatre enregistr\u00e9es \u00e0 chaque noeud.</p> <p>On peut ensuite parcourir un arbre par l'acc\u00e8s \u00e0 son \u00e9tiquette et \u00e0 ses sous-arbres gauche et droit. </p> <p>Voici les fonctions primitives qui d\u00e9finissent le type abstrait arbre binaire :  Action Instruction Cr\u00e9er un arbre vide <code>arbreVide()</code> Tester si l'arbre <code>A</code> est vide <code>estVide(A)</code> Renvoyer la cl\u00e9 (la valeur) de la racine de l'arbre <code>A</code> <code>cle(A)</code> Renvoyer le sous-arbre gauche de l'arbre <code>A</code> (si <code>A</code> est non vide) <code>sousArbreGauche(A)</code> Renvoyer le sous-arbre droit de l'arbre <code>A</code> (si <code>A</code> est non vide) <code>sousArbreDroit(A)</code> Cr\u00e9er un arbre binaire de cl\u00e9 <code>valeur</code> et de sous-arbres <code>G</code> et <code>D</code> <code>arbreCons(valeur, G, D)</code> <p></p> Exemple <ul> <li><code>A = arbreVide()</code> \u21d2 <code>A = ()</code></li> <li><code>estVide(A)</code> \u21d2 <code>True</code></li> <li>Pour d\u00e9finir \u00e0 l'aide de primitives l'arbre suivant :  On \u00e9crira : <code>A = arbreCons(21, arbreCons(8, arbreVide(), arbreVide()), arbreVide())</code></li> <li><code>cle(A)</code> \u21d2 <code>21</code></li> <li><code>estVide(A)</code> \u21d2 <code>False</code></li> <li><code>arbreGauche(A)</code> \u21d2 <code>arbreCons(8, arbreVide(), arbreVide())</code></li> <li><code>arbreDroit(A)</code> \u21d2 <code>arbreVide()</code></li> </ul> <p>Exercice 4</p> <ol> <li>Comment s'\u00e9crit \u00e0 l'aide de fonctions primitives l'arbre suivant, not\u00e9 <code>B</code> ? </li> <li>A l'aide de fonctions primitives et des arbres <code>A</code> et <code>B</code> cr\u00e9\u00e9s pr\u00e9c\u00e9demment, d\u00e9finir l'arbre <code>C</code> suivant : </li> <li>Quel arbre est renvoy\u00e9 par l'instruction : <code>sousArbreGauche(sousArbreDroit(C))</code> ?</li> <li>Que renvoie l'instruction : <code>estVide(sousArbreDroit(sousArbreGauche(sousArbreGauche(C))))</code> ?</li> <li>M\u00eame question avec l'instruction : <code>cle(sousArbreDroit(sousArbreDroit(C)))</code>.</li> </ol> <p> Correction de l'exercice</p>"},{"location":"cours/Arbres/Les%20arbres.html#implementation","title":"Impl\u00e9mentation","text":"<p>Suivant l\u2019usage, un arbre binaire peut \u00eatre repr\u00e9sent\u00e9 par :</p> <ul> <li>Un cha\u00eenage (similaire \u00e0 une liste cha\u00een\u00e9e, mais chaque noeud a deux fils)</li> <li>Un tableau qui stocke les noeuds, la racine \u00e0 la premi\u00e8re position, les autres noeuds ont la position qu\u2019on veut.</li> <li>Un tableau o\u00f9 les noeuds ont une position d\u00e9finie \u00e0 l\u2019avance. La racine est \u00e0 la position \\(~1\\). Le noeud \u00e0 la position \\(~p~\\) est le p\u00e8re des noeuds des positions \\(~2p~\\) et \\(~2p+1~\\).</li> </ul> <p>Python ne propose pas nativement de structure de donn\u00e9es permettant d'impl\u00e9menter directement les arbres binaires. Il va donc \u00eatre n\u00e9cessaire de cr\u00e9er manuellement cette structure et pour cela, nous allons utiliser un cha\u00eenage.  </p> <p>Pour programmer ce type de structure, nous allons utiliser le paradigme de la programmation orient\u00e9e objet (P.O.O.).  </p> <p>Un arbre vide est repr\u00e9sent\u00e9 par l\u2019attribut <code>valeur</code> \u00e0 <code>None</code>. Les attributs <code>G</code> et <code>D</code> sont des arbres donc tous les noeuds sont des arbres, une feuille a deux attributs <code>G</code> et <code>D</code> \u00e0 <code>None</code>.</p> \ud83d\udc0d Script Python<pre><code>class Arbre :\n\n    def __init__(self, valeur=None, G=None, D=None):\n        self.valeur = valeur\n        self.G = G\n        self.D = D\n\n    # ...\n</code></pre> \ud83d\udc0d Script Python<pre><code>a1 = Arbre() # arbre vide\na2 = Arbre(88) # arbre avec un noeud (la racine)\n</code></pre> <p>Ainsi, si l'on souhaite cr\u00e9er en Python l'arbre <code>C</code> de l'exercice 4, on peut proc\u00e9der ainsi :</p> \ud83d\udc0d Script Python<pre><code>A = Arbre(21, Arbre(8))\nB = Arbre(7, Arbre(29), Arbre(13, None, Arbre(88)))\nC = Arbre(5, Arbre(12, A), B)\n</code></pre> <p>On donne la m\u00e9thode d'affichage ci-dessous afin de repr\u00e9senter au mieux un arbre dans une console Python :</p> \ud83d\udc0d Script Python<pre><code>def affichage(self, niveau=0, c=132):\n    if self.D:\n        self.D.affichage(niveau+1, 47)\n    if self.valeur :\n        print(f\"{' ' * 4 * niveau}{chr(c)}{self.valeur}\")\n    if self.G:\n        self.G.affichage(niveau+1, 92)\n</code></pre> <p>Ainsi, l'utilisation de cette m\u00e9thode sur l'arbre <code>C</code> donne :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; C.affichage()\n            /88\n        /13\n    /7\n        \\29\n\u20225\n    \\12\n        \\21\n            \\8\n</code></pre> <p>Exercice 5 : impl\u00e9mentation de primitives</p> <p>Coder en Python les m\u00e9thodes suivantes de la classe <code>Arbre</code> :  <ol> <li><code>estVide()</code> qui renvoie <code>True</code> si l'arbre est vide, <code>False</code> sinon.</li> <li><code>cle()</code> qui renvoie la cl\u00e9 de la racine de l'arbre.</li> <li><code>sousArbreGauche()</code> qui renvoie le sous-arbre gauche de la racine de l'arbre (si <code>A</code> est non vide).</li> <li><code>sousArbreDroit()</code> qui renvoie le sous-arbre droit de la racine de l'arbre (si <code>A</code> est non vide).</li> <li><code>estFeuille()</code> qui renvoie <code>True</code> si l'arbre est une feuille, <code>False</code> sinon.</li> </ol> <p> Correction de l'exercice</p>"},{"location":"cours/Arbres/Les%20arbres.html#algorithmique-des-arbres-binaires","title":"Algorithmique des arbres binaires","text":"<p>La d\u00e9finition d'un arbre binaire \u00e9tant r\u00e9cursive, il est naturel d'\u00e9crire des op\u00e9rations sur les arbres binaires sous la forme de fonctions r\u00e9cursives.  </p> <p>L'exemple le plus simple est celui d'une fonction <code>taille()</code> qui calcule la taille d'un arbre.  </p> <p>On commence par consid\u00e9rer le cas de base o\u00f9 l'arbre est vide. Dans ce cas, il convient de renvoyer <code>0</code> car il n'y a aucun noeud dans l'arbre. Dans le cas contraire, l'arbre contient au moins un noeud (la racine de l'arbre), auquel on va ajouter la taille des sous-arbres gauche et droit, calcul\u00e9e r\u00e9cursivement :</p> \ud83d\udc0d Script Python<pre><code>def taille(self):\n    if self.estVide():\n        return 0\n\n    gauche, droit = self.sousArbreGauche(), self.sousArbreDroit()\n    return 1 + gauche.taille() + droit.taille()\n</code></pre> <p>Exercice 6 : hauteur d'un arbre</p> <p>Pour calculer la hauteur d\u2019un arbre, il faut parcourir toutes ses branches et retenir la profondeur de la feuille la plus \u00e9loign\u00e9e. La fonction est bien entendue r\u00e9cursive\u2026  </p> <p>Coder en Python la m\u00e9thode <code>hauteur()</code> de la classe <code>Arbre</code> qui calcule la hauteur d'un arbre. Correction de l'exercice</p> <p>Exercice 7 : nombre de feuilles d'un arbre</p> <p>Pour calculer le nombre de feuilles d\u2019un arbre, il faut l\u00e0 encore parcourir toutes ses branches et compter les noeuds. La fonction est \u00e9galement r\u00e9cursive.  </p> <p>Coder en Python la m\u00e9thode <code>nbFeuilles()</code> de la classe <code>Arbre</code> qui calcule le nombre de feuilles d'un arbre. Correction de l'exercice</p>"},{"location":"cours/Arbres/Les%20arbres.html#parcours-dun-arbre-binaire","title":"Parcours d'un arbre binaire","text":"<p>Les deux fonctions <code>taille()</code> et <code>hauteur()</code> parcourent tous les noeuds de l'arbre. L'ordre dans lequel ce parcours est effectu\u00e9 n'est pas important. Dans les deux cas, peu importe si on commence le calcul par le sous-arbre gauche ou le droit.  </p> <p>Ecrivons maintenant une autre fonction qui affiche les valeurs contenues dans tous les noeuds de l'arbre. L'ordre dans lequel le parcours des noeuds est effectu\u00e9 devient important. On peut par exemple parcourir le sous-arbre gauche, puis afficher la valeur de la racine, puis enfin parcourir le sous-arbre droit.</p> <p>D\u00e9finition</p> <p>Un parcours d\u2019arbre est une fa\u00e7on d\u2019ordonner les noeuds d\u2019un arbre afin de les parcourir.  Il existe diff\u00e9rents types de parcours :  <ul> <li>Parcours en profondeur :</li> </ul> <p> <ul> <li>Infixe (en ordre)</li> <li>Pr\u00e9fixe (en pr\u00e9ordre)</li> <li>Postfixe (en postordre)</li> </ul> <p> <ul> <li>Parcours en largeur</li> </ul> <p>"},{"location":"cours/Arbres/Les%20arbres.html#parcours-en-profondeur","title":"Parcours en profondeur","text":"<p>Les trois m\u00e9thodes de parcours en profondeur se distinguent uniquement par l\u2019ordre dans lequel on r\u00e9alise les parcours des branches droite et gauche par rapport \u00e0 la visite d\u2019un noeud.</p> <p>Pour illustrer chaque m\u00e9thode, reprenons l'arbre d'un pr\u00e9c\u00e9dent exemple :</p> <p></p> <p>Ensuite, entourons-le de la fa\u00e7on suivante :</p> <p></p> <p>Parcours infixe</p> <p>Dans un parcours infixe (inorder traversal), chaque noeud est visit\u00e9 apr\u00e8s son enfant gauche mais avant son enfant droit.  </p> <p>Le parcours infixe affiche la racine apr\u00e8s avoir trait\u00e9 le sous-arbre gauche. Et apr\u00e8s traitement de la racine, on traite le sous-arbre droit (c'est donc un parcours de type \"GRD\" : Gauche, Racine, Droite).  </p> <p>Ainsi, l\u2019affichage des noeuds avec un parcours infixe de l\u2019arbre pr\u00e9c\u00e9dent est : <code>8, 21, 12, 5, 29, 7, 13, 88</code>.  </p> <p>Proc\u00e9d\u00e9 mn\u00e9motechnique</p> <p>Une fa\u00e7on relativement simple de retenir l'ordre infixe est de suivre la ligne qui entoure l'arbre, dans le sens anti-horaire, et en partant de la racine.  </p> <p>A chaque fois que l'on rencontre un noeud et qu'il est possible de \"toucher\" le bas de ce noeud, on note son \u00e9tiquette.  </p> <p>Dans l'exemple pr\u00e9c\u00e9dent, on part de la racine, mais il n'est pas possible de \"toucher\" la partie inf\u00e9rieure de celle-ci (\u00e0 cause de l'ar\u00eate entre la racine et le noeud \u00e9tiquet\u00e9 <code>12</code>). De m\u00eame pour les deux noeuds suivants : ceux \u00e9tiquet\u00e9s <code>12</code> puis <code>21</code>. Ainsi, le premier noeud dont il est possible \"d'atteindre\" le bas est celui dont l'\u00e9tiquette est <code>8</code> et ainsi de suite. </p> Code Python <p>On donne ci-dessous le code de la m\u00e9thode <code>parcoursInfixe()</code> qui affiche les \u00e9tiquettes des noeuds d'un arbre dans un parcours infixe.</p> \ud83d\udc0d Script Python<pre><code>def parcoursInfixe(self):\n    if not self.valeur:\n        return\n    \n    gauche, droit = self.sousArbreGauche(), self.sousArbreDroit()\n    gauche.parcoursInfixe()\n    print(self.valeur, end = \" \")\n    droit.parcoursInfixe()\n</code></pre> <p>Exercice 8</p> <p>Coder en Python la m\u00e9thode <code>listeParcoursInfixe()</code> qui renvoie une liste compos\u00e9e des \u00e9tiquettes des noeuds d'un arbre dans un parcours infixe. \\(~\\) Correction de l'exercice</p> <p>Parcours pr\u00e9fixe</p> <p>Dans un parcours pr\u00e9fixe (preorder traversal), chaque noeud est visit\u00e9 avant que ses enfants soient visit\u00e9s. </p> <p>Cela signifie que l'on affiche la racine de l'arbre, on parcourt tout le sous-arbre de gauche, une fois qu'il n'y a plus de sous-arbre gauche on parcourt les \u00e9l\u00e9ments du sous-arbre droit. </p> <p>Ce type de parcours peut \u00eatre r\u00e9sum\u00e9 en trois lettres : \"RGD\" (pour Racine, Gauche, Droit).  </p> <p>Ainsi, l\u2019affichage des noeuds avec un parcours pr\u00e9fixe de l\u2019arbre pr\u00e9c\u00e9dent est : <code>5, 12, 21, 8, 7, 29, 13, 88</code>.  </p> <p>Proc\u00e9d\u00e9 mn\u00e9motechnique</p> <p>Une fa\u00e7on relativement simple de retenir l'ordre pr\u00e9fixe est de suivre la ligne qui entoure l'arbre, dans le sens anti-horaire, et en partant de la racine.  </p> <p>A chaque fois que l'on rencontre un noeud et qu'il est possible de \"toucher\" la partie gauche de ce noeud, on note son \u00e9tiquette.  </p> <p>Dans l'exemple pr\u00e9c\u00e9dent, on part de la racine et on voit qu'il est possible de \"toucher\" la partie gauche de celle-ci donc on note son \u00e9tiquette. De la m\u00eame fa\u00e7on, la partie gauche du noeud suivant, dont l'\u00e9tiquette est <code>12</code> est atteignable et ainsi de suite. </p> <p>Exercice 9</p> <p>Coder en Python la m\u00e9thode <code>parcoursPrefixe()</code> qui affiche les \u00e9tiquettes des noeuds d'un arbre dans un parcours pr\u00e9fixe. Correction de l'exercice</p> <p>Parcours suffixe (ou postfixe)</p> <p>Dans un parcours suffixe (ou postfixe pour postorder traversal), chaque noeud est visit\u00e9 apr\u00e8s que ses enfants soient visit\u00e9s. </p> <p>Le parcours postfixe effectue sch\u00e9matiquement le parcours suivant : sous-arbre gauche, sous-arbre droit puis la racine, c'est donc un parcours \"GDR\" (Gauche, Droite, Racine).  </p> <p>Ainsi, l\u2019affichage des noeuds avec un parcours postfixe de l\u2019arbre pr\u00e9c\u00e9dent est : <code>8, 21, 12, 29, 88, 13, 7, 5</code>.  </p> <p>Proc\u00e9d\u00e9 mn\u00e9motechnique</p> <p>Une fa\u00e7on relativement simple de retenir l'ordre postfixe est de suivre la ligne qui entoure l'arbre, dans le sens anti-horaire, et en partant de la racine.  </p> <p>A chaque fois que l'on rencontre un noeud et qu'il est possible de \"toucher\" la partie droite de ce noeud, on note son \u00e9tiquette.  </p> <p>Dans l'exemple pr\u00e9c\u00e9dent, on part de la racine, mais il n'est pas possible de \"toucher\" la partie droite de celle-ci (\u00e0 cause de l'ar\u00eate entre la racine et le noeud \u00e9tiquet\u00e9 <code>12</code>). De m\u00eame pour les deux noeuds suivants : ceux \u00e9tiquet\u00e9s <code>12</code> puis <code>21</code>. Ainsi, le premier noeud dont il est possible \"d'atteindre\" la partie droite est celui dont l'\u00e9tiquette est <code>8</code> et ainsi de suite. </p> <p>Exercice 10</p> <p>Coder en Python la m\u00e9thode <code>parcoursPostfixe()</code> qui affiche les \u00e9tiquettes des noeuds d'un arbre dans un parcours postfixe. Correction de l'exercice</p> <p>"},{"location":"cours/Arbres/Les%20arbres.html#parcours-en-largeur","title":"Parcours en largeur","text":"<p>Parcours en largeur</p> <p>Dans un parcours en largeur (ou BFS, pour Breadth First Search), on commence par explorer la racine de l'arbre, puis son fils gauche (s'il existe) suivi de son fils droit (s'il existe), puis le fils gauche du fils gauche etc.  </p> <p>Ainsi, l\u2019affichage des noeuds avec un parcours en largeur de l\u2019arbre pr\u00e9c\u00e9dent est : <code>5, 12, 7, 21, 29, 13, 8, 88</code>.  Pour impl\u00e9menter ce parcours, le plus simple est d'utiliser une file afin d'y stocker les diff\u00e9rents \u00e9l\u00e9ments visit\u00e9s.  </p> <p>Le principe de l\u2019algorithme de parcours en largeur est le suivant : <ol> <li>Mettre l'arbre source dans la file. </li> <li>Retirer l'arbre du d\u00e9but de la file pour le traiter (r\u00e9cup\u00e9rer sa racine). </li> <li>Mettre les sous-arbres dans la file (s'ils existent !). </li> <li>Si la file n'est pas vide reprendre \u00e0 l'\u00e9tape 2.</li> </ol> <p>Exercice 11</p> <p>Coder en Python la m\u00e9thode <code>parcoursLargeur()</code> qui affiche les \u00e9tiquettes des noeuds d'un arbre dans un parcours en largeur en utilisant une file. Correction de l'exercice</p>"},{"location":"cours/Arbres/Les%20arbres.html#arbres-binaires-de-recherche","title":"Arbres binaires de recherche","text":""},{"location":"cours/Arbres/Les%20arbres.html#probleme-introductif","title":"Probl\u00e8me introductif","text":"<p>Exercice 12</p> <p>La ville Binarus a \u00e9t\u00e9 construite selon la mani\u00e8re suivante :  <ul> <li>Chaque rue m\u00e8ne \u00e0 une seule maison identifi\u00e9e par trois lettres de l\u2019alphabet.</li> <li>Il y a autant de maisons que de combinaisons possibles de triplets de trois lettres.</li> <li>Devant chaque maison se trouve deux nouvelles rues, si on emprunte la rue de gauche, toutes les maisons que l\u2019on rencontrera porteront un nom de trois lettres inf\u00e9rieur dans l\u2019ordre lexicographique \u00e0 la maison du d\u00e9part de l\u2019embranchement. Par contre la rue de droite m\u00e8ne vers des maisons dont le nom est sup\u00e9rieur dans l\u2019ordre lexicographique.</li> </ul> <p> On a commenc\u00e9 le plan de la ville Binarus o\u00f9 l'entr\u00e9e est gard\u00e9e ici par la maison \"MAI\":  <ol> <li>Proposer une suite possible avec 7 premi\u00e8res maisons.</li> <li>Combien de maisons poss\u00e8de la ville Binarus ?</li> <li>D\u00e9terminer le nombre maximal de rues \u00e0 traverser pour trouver une maison quelconque dans le cas o\u00f9 l'arbre est complet.</li> </ol> <p> Correction de l'exercice</p>"},{"location":"cours/Arbres/Les%20arbres.html#definition-et-exemples_2","title":"D\u00e9finition et exemples","text":"<p>D\u00e9finition</p> <p>Un arbre binaire de recherche (ABR) est un arbre binaire qui est \u00e9tiquet\u00e9 par des valeurs totalement  ordonnables (c'est-\u00e0-dire qu'il doit exister une mani\u00e8re de dire si un \u00e9l\u00e9ment est plus grand ou plus petit qu'un autre) gr\u00e2ce \u00e0 deux r\u00e8gles de construction.  </p> <p>L\u2019\u00e9tiquette d\u2019un noeud est : <ol> <li>sup\u00e9rieure ou \u00e9gale \u00e0 celle de chaque noeud de son sous-arbre gauche ;</li> <li>inf\u00e9rieure ou \u00e9gale \u00e0 celle de chaque noeud de son sous-arbre droit.</li> </ol> <p>  Selon la mise en oeuvre de l'ABR, on pourra interdire ou non des cl\u00e9s de valeur \u00e9gale.</p> Exemple et contre-exemple <p>L'arbre suivant est un arbre binaire de recherche : </p> <p>En revanche, l'arbre suivant n'en est pas un...  ... puisque le noeud \u00e9tiquet\u00e9 <code>7</code> ne peut pas se trouver dans le sous-arbre droit du noeud \u00e9tiquet\u00e9 <code>8</code>.</p> <p>Exercice 13</p> <p>Un v\u00e9t\u00e9rinaire voudrait stocker les fiches m\u00e9dicales de ses patients, et, plut\u00f4t que d'utiliser un tableau ou une liste, on se propose d'utiliser un arbre binaire de recherche.  </p> <p>La fiche contiendra diff\u00e9rentes informations sur l'animal ; on utilisera son nom comme cl\u00e9 (c'est-\u00e0-dire comme crit\u00e8re pour la relation d'ordre), que l'on triera selon l'ordre alphab\u00e9tique croissant. </p> <p>Le v\u00e9t\u00e9rinaire re\u00e7oit sa premi\u00e8re patiente, qui r\u00e9pond au nom de Gaufrette.  Comme sa fiche sera le premier noeud de notre arbre, elle en devient automatiquement la racine. </p> <p>Puis le v\u00e9t\u00e9rinaire re\u00e7oit les animaux dans l\u2019ordre suivant afin de les soigner : Charlie, M\u00e9dor, Flipper, Bubulle et Augustin.  <ol> <li>Construire l\u2019arbre binaire de recherche associ\u00e9 \u00e0 cette s\u00e9quence.</li> <li>Imaginons que la s\u00e9quence soit maintenant la suivante : {Gaufrette, Charlie, M\u00e9dor, Flipper, Augustin, Bubulle}, c\u2019est-\u00e0-dire que Augustin soit arriv\u00e9 au rendez-vous m\u00e9dical avant Bubulle. L\u2019arbre binaire de recherche est-il encore le m\u00eame ? Quelle conclusion peut-on en tirer ?</li> </ol> <p> Correction de l'exercice</p> <p>Remarque</p> <p>Les algorithmes vus sur les arbres binaires (taille et hauteur, de m\u00eame que les parcours infixe, pr\u00e9fixe, postfixe et en largeur) fonctionnent bien entendu sur les ABR (qui n'en sont qu'un cas particulier). </p> <p>Exercice 14</p> <p>Afficher, \u00e0 la main, le parcours infixe de l'ABR suivant :  Quelle propri\u00e9t\u00e9 semble se d\u00e9gager ?  </p> <p>Correction de l'exercice</p> <p>Exercice 15</p> <p>Coder en Python la m\u00e9thode <code>estABR()</code> qui renvoie <code>True</code> si l'arbre est un arbre binaire de recherche et <code>False</code> sinon. On veillera \u00e0 utiliser la m\u00e9thode <code>listeParcoursInfixe()</code>.</p> <p>Correction de l'exercice</p>"},{"location":"cours/Arbres/Les%20arbres.html#recherche-dune-cle-dans-un-arbre-binaire-de-recherche","title":"Recherche d\u2019une cl\u00e9 dans un arbre binaire de recherche","text":"<p>Comme l\u2019a montr\u00e9 le probl\u00e8me introductif, la recherche d\u2019\u00e9l\u00e9ments dans un ABR est particuli\u00e8rement efficace.  </p> <p>L\u2019id\u00e9e est donc de comparer l\u2019\u00e9l\u00e9ment recherch\u00e9 aux valeurs de noeuds successifs :</p> <ul> <li>Si l\u2019\u00e9l\u00e9ment cherch\u00e9 est plus grand, on continue la recherche dans le sous-arbre droit et s'il est plus petit, dans le sous-arbre gauche.</li> <li>Si on le trouve on renvoie <code>True</code>, par contre si on termine dans le sous-arbre vide d\u2019une feuille on renvoie <code>False</code>.</li> </ul> <p>Remarque</p> <p>Plus l\u2019ABR est \"\u00e9quilibr\u00e9\" , c\u2019est-\u00e0-dire qu'il a un nombre de noeuds \u00e9quitablement r\u00e9partis entre les sous-arbres droit et gauche, plus la recherche est efficace.  </p> <p>En effet, notre algorithme de recherche \u00e9limine la moiti\u00e9 des \u00e9l\u00e9ments \u00e0 chaque \u00e9tape. Cela fait \u00e9cho \u00e0 la recherche dichotomique dans un tableau tri\u00e9, o\u00f9 chaque \u00e9tape divise par 2 le nombre d'\u00e9l\u00e9ments \u00e0 examiner.  </p> <p>On sait que cet algorithme est extr\u00eamement efficace (complexit\u00e9 dans le pire des cas en \\(\\mathcal{O}(\\operatorname{log_{2}}(n))\\)), ainsi, il ne faut pas plus de 20 \u00e9tapes pour chercher parmi un million de valeurs.  </p> <p>Aussi, on essaiera d\u2019\u00e9viter la structure de \"peigne\", o\u00f9 l\u2019on rangerait tous les \u00e9l\u00e9ments dans l\u2019ordre croissant ou d\u00e9croissant puique la recherche serait au contraire peu efficace (elle serait susceptible de parcourir l'arbre tout entier, dans le cas d'un recherche infructueuse).</p> <p>Exercice 16</p> <p>Coder en Python la m\u00e9thode <code>rechercherElement(e)</code> qui renvoie <code>True</code> si l'\u00e9l\u00e9ment <code>e</code> est un \u00e9l\u00e9ment d'un arbre binaire de recherche et <code>False</code> sinon. On veillera \u00e0 ce que l'arbre sur laquelle cette m\u00e9thode s'applique est bien un ABR.  </p> <p>Correction de l'exercice</p>"},{"location":"cours/Arbres/Les%20arbres.html#insertion-dune-cle-dans-un-arbre-binaire-de-recherche","title":"Insertion d\u2019une cl\u00e9 dans un arbre binaire de recherche","text":"<p>Il est tout \u00e0 fait possible d'ins\u00e9rer un noeud dans un arbre binaire de recherche.  </p> <p>De la m\u00eame mani\u00e8re que nous avons cherch\u00e9 un \u00e9l\u00e9ment dans un ABR, nous allons nous d\u00e9placer dans l\u2019ABR afin d\u2019ajouter un nouvel \u00e9l\u00e9ment en respectant les contraintes li\u00e9es \u00e0 la d\u00e9finition de l\u2019ABR.</p> <p>Principe</p> <p>Pour ins\u00e9rer un nouveau noeud <code>x</code> dans un ABR, on parcourt l'arbre de fa\u00e7on similaire \u00e0 l'algorithme de recherche jusqu'\u00e0 trouver un noeud <code>y</code> sans fils gauche et de cl\u00e9 sup\u00e9rieure (ou sans fils droit et de cl\u00e9 inf\u00e9rieure). \u00c0 cet instant, on place <code>x</code> en tant que fils gauche (resp. droit) de <code>y</code>.</p> <p>Exercice 17</p> <p>Coder en Python la m\u00e9thode <code>insererElement(e)</code> qui ins\u00e8re un noeud de cl\u00e9 <code>e</code> dans un arbre binaire de recherche.  </p> <p>Si l'\u00e9tiquette existe d\u00e9j\u00e0, on placera le noeud dans le sous-arbre gauche du noeud contenant cette \u00e9tiquette.  </p> <p>On veillera \u00e0 ce que l'arbre sur laquelle cette m\u00e9thode s'applique est bien un ABR.</p> <p>Correction de l'exercice</p> <p>Remarques</p> <ol> <li>Les ABR construits dans ce cours peuvent contenir plusieurs fois le m\u00eame \u00e9l\u00e9ment : on dit qu'ils r\u00e9alisent des multiensembles. Si on veut en revanche r\u00e9aliser des ensembles, o\u00f9 chaque \u00e9l\u00e9ment appara\u00eet exactement une fois, il ne faut pas ajouter de nouvelle occurence de l'\u00e9l\u00e9ment lorsqu'il se trouve d\u00e9j\u00e0 dans l'arbre. Pour cela, il y a deux solutions (voir exercice) </li> <li>La complexit\u00e9 de la fonction <code>insererElement</code> n'est donc pas diff\u00e9rente de celle de la fonction <code>rechercherElement</code> puisqu'on prend exactement les m\u00eames d\u00e9cisions quant \u00e0 la descente dans l'arbre. Aussi, dans les deux cas, la complexit\u00e9 d\u00e9pend de la forme de l'arbre et elle est, dans le pire des cas, major\u00e9e par sa hauteur.</li> <li>Avec la m\u00e9thode <code>insererElement</code>, nous allons pouvoir construire des ABR par ajouts successifs d'\u00e9l\u00e9ments, en partant d'un arbre vide, comme le montre l'exemple suivant : \ud83d\udc0d Script Python<pre><code>def genABR(nbElements):\n    L = [randint(1, 100) for i in range(nbElements)]\n    print(L)\n    D = Arbre()\n    for elt in L:\n        D.insererElement(elt)\n    D.affichage()\n</code></pre> L'appel <code>genABR(14)</code> donne alors dans la console : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; (executing file \"Arbre.py\")\n[16, 21, 20, 49, 15, 14, 39, 75, 38, 1, 29, 82, 17, 19]\n                /82\n            /75\n        /49\n            \\39\n                \\38\n                    \\29\n    /21\n        \\20\n                /19\n            \\17\n\u202216\n    \\15\n        \\14\n            \\1\n</code></pre> </li> </ol>"},{"location":"cours/Arbres/Mise%20en%20commun.html","title":"Mise en commun","text":"<p>"},{"location":"cours/Arbres/Mise%20en%20commun.html#programme-final","title":"Programme final","text":"Si chacun a respect\u00e9 le cahier des charges de sa fonction, il en r\u00e9sultera un programme de compression fonctionnel."},{"location":"cours/Arbres/Mise%20en%20commun.html#rassembler-les-fichiers-utiles","title":"Rassembler les fichiers utiles","text":"<ol> <li>Cr\u00e9er un r\u00e9pertoire HuffmanComplet dans votre espace personnel sur le r\u00e9seau.</li> <li>R\u00e9cup\u00e9rer l\u2019ensemble des fonctions du projet r\u00e9alis\u00e9es par vos camarades, au m\u00eame emplacement r\u00e9seau que l\u00e0 o\u00f9 vous avez d\u00e9pos\u00e9 la votre.</li> <li>Copier ces diff\u00e9rentes fonctions dans le r\u00e9pertoire HuffmanComplet pr\u00e9c\u00e9demment cr\u00e9\u00e9.</li> <li>V\u00e9rifier bien que vous \u00eates en possession des fichiers :</li> </ol> <ul> <li>binaryTree.py</li> <li>fct_sequenceToOccurrences.py</li> <li>fct_weightTree.py</li> <li>fct_insertTreeInForest.py</li> <li>fct_huffmanTree.py</li> <li>fct_treeToCoding.py</li> <li>fct_encode.py</li> <li>fct_decode.py</li> </ul> <ol> <li>Veillez \u00e0 ce que les diff\u00e9rents tests soient supprim\u00e9s dans chacun de ces fichiers afin de ne conserver que la fonction.</li> </ol>"},{"location":"cours/Arbres/Mise%20en%20commun.html#creer-le-programme-principal","title":"Cr\u00e9er le programme principal","text":"<p>Cr\u00e9er dans votre dossier un nouveau fichier python nomm\u00e9 CompressionHuffman.py, et importer dans ce fichier l\u2019ensemble des fonctions contenues dans les fichiers cit\u00e9s pages pr\u00e9c\u00e9dentes. Pour cela, inspirez-vous de la commande suivante : \ud83d\udc0d Script Python<pre><code>from fct_weightTree import weightTree\n</code></pre></p>"},{"location":"cours/Arbres/Mise%20en%20commun.html#niveau-1-compressiondecompression-dune-chaine-de-caracteres-sans-manipuler-de-fichiers","title":"Niveau 1 : Compression/d\u00e9compression d\u2019une chaine de caract\u00e8res (sans manipuler de fichiers)","text":"<p>Exercice 1</p> <p>Ecrire en quelques lignes une fonction nomm\u00e9e <code>compresse()</code> de compression avec l\u2019algorithme de Huffman.  </p> <p>Le texte \u00e0 compresser sera une chaine de caract\u00e8res directement \u00e9crite dans le programme.  </p> <p>Exemple : <code>texte = 'hello world !'</code></p> Aide <ul> <li>Utiliser bien s\u00fbr les fonctions import\u00e9es de vos camarades.</li> <li>Relire si n\u00e9cessaire les docstrings des fonctions de vos camarades, elles sont l\u00e0 : \ud83d\udc0d Script Python<pre><code>#######  Fonction \u00ab analyser fr\u00e9quences \u00bb #######\n\ndef sequenceToOccurrences(seq):\n\"\"\"\n    R\u00f4le : rep\u00e8re les occurrences de chaque caract\u00e8re dans un texte et les renvoie sous la forme d'un dictionnaire.\n\n    Exemple de retour : {'d': 2, 'e': 2, 'c': 1, 'i': 1}\n\n    Parameters\n    ----------\n    seq : string\n        une s\u00e9quence de symboles, le texte \u00e0 analyser\n\n    Returns\n    -------\n    dict\n        un dictionnaire donnant le nombre d'occurrences de chacun des symboles contenu dans seq\n    \"\"\"\n\n#######  Fonction \u00ab construire arbre \u00bb #######\n\n# Cette fonction fait appel \u00e0 deux \u00ab sous fonctions \u00bb \u00e0 d\u00e9tailler d'abord :\n#    - weightTree() qui d\u00e9termine le poids d'un arbre.\n#    - insertTreeInForest(), qui ins\u00e8re un arbre dans la for\u00eat (donn\u00e9e).\n\n#######  Fonction \u00ab Trouver le poids d'un arbre \u00bb #######\n\ndef weightTree(arbre):\n\"\"\"\n    R\u00f4le: Donne le poids d'un arbre non vide : le poids de la racine, soit la somme des poids des feuilles.\n\n    Parameters\n    ----------\n    arbre : Objet de la class Arbre import\u00e9e via le module binaryTree\n\n    Returns\n    -------\n    nombre entier si occurrences, float de 0 \u00e0 100 si %\n    \"\"\"\n\n#######  Fonction \u00ab ins\u00e9rer un arbre dans la for\u00eat \u00bb  #######\n\ndef insertTreeInForest(arbre, foret):\n\"\"\"\n    R\u00f4le: cette fonction ins\u00e8re un arbre suppl\u00e9mentaire dans la for\u00eat de mani\u00e8re \u00e0 ce que l'ordre de poids d\u00e9croissant des arbres soit respect\u00e9.\n\n    Parameters\n    ----------\n    arbre : Objet de la class Arbre import\u00e9e via le module binaryTree\n    foret: Une liste d'arbres\n\n    Returns\n    -------\n    Une liste d'arbres dans lequel l'arbre a \u00e9t\u00e9 ins\u00e9r\u00e9.\n    \"\"\"\n\n#######  Fonction \u00ab Construire Arbre \u00bb  #######\n\ndef huffmanTree(occ):\n\"\"\"\n    R\u00f4le: cette fonction construit l'arbre de Huffman.\n\n    Parameters\n    ----------\n    occ: (dict) dictionnaire d'occurrences de chaque caract\u00e8re.\n    Exemple occ = {'d': 2, 'e': 2, 'c': 1, 'i': 1}\n\n    Returns\n    -------\n    (arbre) l'arbre binaire de codage de Huffman.\n    \"\"\"\n\n#######  Fonction \u00ab Obtenir le dictionnaire de codage \u00bb  #######\n\ndef treeToCoding(arbre_huff, dicCodeCarac={}, codeEnConstruction=[]):\n\"\"\"\n    R\u00f4le: cette fonction r\u00e9cursive construit le dictionnaire de codage.\n\n    Exemple de retour : {'a': 0, 't': 10, 'r': 11}\n\n    Parameters\n    ----------\n    arbre_huff : (arbre) arbre de Huffman\n\n    Returns\n    -------\n    (dict) dictionnaire donnant pour chaque caract\u00e8re le code de Huffman \u00e0 utiliser\n\n    \"\"\"\n\n#######  Fonction \u00ab Coder Texte \u00bb  #######\n\ndef encode(source, coding_table):\n\"\"\"\n    R\u00f4le: Code le texte source en utilisant la table de Huffman\n\n    Parameters\n    ----------\n    source: (str) texte source \u00e0 encoder\n    coding_table: (dict) une table de codage\n\n    Returns\n    -------\n    (str) chaine qui contient une suite de '0' et de '1'\n\n    \"\"\"\n\n#######  Fonction \u00ab d\u00e9coder fichier compress\u00e9 \u00bb  #######\n\ndef decode(encoded_source, tree):\n\"\"\"\n    R\u00f4le: D\u00e9code la suite cod\u00e9e de 0 et 1 et obtient le texte\n\n    Parameters\n    ----------\n    encoded_source: (str) la cha\u00eene binaire \u00e0 d\u00e9coder\n    tree: (arbre) l'arbre de Huffman du codage utilis\u00e9\n\n    Returns\n    -------\n    (str) le message source d\u00e9cod\u00e9\n\n    \"\"\"\n</code></pre></li> <li>Respecter le d\u00e9roulement de l\u2019algorithme de Huffman ci-dessous :</li> </ul> <p> </p> <p>Lorsque votre programme fonctionne et transforme le texte source en une suite optimale de <code>0</code> et de <code>1</code>, passer \u00e0 l'exercice 2.</p> <p>Exercice 2</p> <p>Ecrire une fonction nomm\u00e9e <code>tauxCompression()</code> qui renvoie le taux de compression (en %) obtenu.  </p> <p>Comparer pour cela les tailles des textes original et compress\u00e9.</p> <p>Exercice 3</p> <p>Cr\u00e9er maintenant une fonction nomm\u00e9e <code>decompresse()</code> qui ne va faire qu\u2019ex\u00e9cuter la fonction <code>decode()</code> import\u00e9e.  </p> <p>Cette fonction <code>decompresse()</code> prend comme arguments le texte compress\u00e9 (chaine de <code>0</code> et de <code>1</code>) et l\u2019arbre de Huffman.  </p> <p>Elle renvoie le texte source d\u00e9compress\u00e9.</p> Aide <p>Utiliser encore une fois les fonctions import\u00e9es de vos camarades, et s'aider du diagramme ci-dessous : </p>"},{"location":"cours/Arbres/Mise%20en%20commun.html#niveau-2-compressiondecompression-dun-fichier","title":"Niveau 2 : Compression/d\u00e9compression d\u2019un fichier","text":"<p>Nous allons maintenant r\u00e9aliser un programme de compression digne de ce nom (ou presque...). </p> <p>Objectif</p> <p>L\u2019objectif est de lire le contenu d\u2019un fichier quel qu\u2019il soit, le compresser, et d'\u00e9crire d\u2019une part le fichier compress\u00e9 avec l\u2019extension \".huf\", et d'autre part la table d\u2019occurrences dans un second fichier d\u2019extension \".occ\"  </p> <p>Et comment s'y prend-t-on ??</p> <p>Vous avez remarqu\u00e9 que pour compresser un texte source, nous avons regard\u00e9 la fr\u00e9quence d\u2019apparition des caract\u00e8res. Et bien il est possible, sur ce principe, de compresser n\u2019importe quel type de documents, m\u00eame autre que du texte !  </p> <p>L'id\u00e9e, assez simple, est de lire les octets d\u2019un fichier quelconque \u00e0 compresser, et de regarder la fr\u00e9quence d\u2019apparition des octets et non des caract\u00e8res comme pr\u00e9c\u00e9demment. Les octets qui apparaissent souvent seront recod\u00e9s par une suite courte de bits, et ceux moins fr\u00e9quents par une suite de bits plus longue.  </p> <p>Probl\u00e8me</p> <p>Un probl\u00e8me se profile tout de m\u00eame : on ne peut \u00e9crire dans un fichier qu\u2019un nombre entier d\u2019octets (nombre de bits multiple de 8). Et la suite de bits issue de la compression n\u2019est pas forc\u00e9ment un multiple de 8.</p> <p>Solution</p> <p>Une solution consiste \u00e0 compl\u00e9ter le dernier octet avec un 1 et des 0. \\(~\\) Exemple 1 : chaine de bits issue de la compression : 10101110 10110010 110. Apr\u00e8s avoir compl\u00e9t\u00e9 le dernier octet: 10101110 10110010 11010000. \\(~\\) Exemple 2 : si le nombre d\u2019octets issue de la compression est entier : 10101110 10110010. On compl\u00e9tera alors de la fa\u00e7on suivante : 10101110 10110010 10000000. \\(~\\) Lors de la d\u00e9compression, afin de r\u00e9cup\u00e9rer la chaine de bits exacte issue de la compression, sans les bits ajout\u00e9s artificiellement, il \"suffit\" de retirer le dernier 1 et tous les 0 qui suivent. \\(~\\) Exemple 3 : Chaine de bits issue de la lecture du fichier compress\u00e9 : 10101110 10110010 11010000. Apr\u00e8s avoir retir\u00e9 les bits de compl\u00e9tion du dernier octet on obtient : 10101110 10110010 110. </p>"},{"location":"cours/Arbres/Mise%20en%20commun.html#compression","title":"Compression","text":"<p>Pour compresser des fichiers en binaire, quels qu\u2019ils soient, vous aurez besoin de fonctions particuli\u00e8res, fournies dans le fichier fcts_fournies.py et d\u2019une librairie binary_IO qui permet de travailler sur des flux d\u2019octets en lecture et \u00e9criture de fichiers. Pour cela :  </p> <ul> <li>Enregistrer sous un autre nom votre fichier pr\u00e9c\u00e9dent compressionHuffman.py, par exemple en compressionFichiersHuffman.py.</li> <li>Copier les fichiers fcts_fournies.py et binary_IO.py dans votre r\u00e9pertoire de travail HuffmanComplet</li> <li>Ins\u00e9rer en d\u00e9but de votre programme la ligne suivante afin d\u2019importer fcts_fournies.py : <code>from fcts_fournies import *</code></li> </ul> <p>Ce fichier fcts_fournies.py contient 6 fonctions :</p> <ul> <li><code>litFichierBinaire</code></li> <li><code>ecritFichierBinaire</code></li> <li><code>completeDernierOctet</code></li> <li><code>uncompleteDernierOctet</code></li> <li><code>sauveDicoOccurrences</code></li> <li><code>lireFichierDicoOcc</code></li> </ul> <p>Exercice 4</p> <p>Modifier la fonction <code>compresse()</code> du niveau 1 afin qu\u2019elle prenne en argument un nom de fichier avec extension <code>str</code>, et qu\u2019elle compresse ce fichier en \u00e9crivant deux nouveaux fichiers :  <ul> <li>Le fichier compress\u00e9 d\u2019extension \".huf\" qui porte le m\u00eame nom que le fichier source (\u00e0 compresser).</li> <li>Le fichier contenant le dictionnaire d\u2019occurrences avec l\u2019extension \".occ\" qui porte \u00e9galement le m\u00eame nom que le fichier source (\u00e0 compresser).</li> </ul> <p> Tester votre programme sur le fichier NSI.txt</p> Aide <ul> <li>Penser \u00e0 lire les docstrings des fonctions fournies dans le fichier fcts_fournies.py.</li> <li>Pour g\u00e9n\u00e9rer le nom du fichier compress\u00e9 : \ud83d\udc0d Script Python<pre><code>nomFichierCompresse = fichierSource.rsplit('.', 1)[0]+'.huf'\n</code></pre></li> <li>Pour g\u00e9n\u00e9rer le nom du fichier compress\u00e9 contenant le dictionnaire d\u2019occurrences : \ud83d\udc0d Script Python<pre><code>nomFichierOcc = fichierSource.rsplit('.', 1)[0]+'.occ'\n</code></pre></li> <li>Pour transformer la chaine de caract\u00e8res compos\u00e9e de <code>0</code> et de <code>1</code> issue de l\u2019encodage optimal, en une suite d\u2019octets \u00e0 \u00e9crire dans le fichier compress\u00e9 : \ud83d\udc0d Script Python<pre><code>listeOctets = [int(chaineBitsCompletee[8*i : 8*(i+1)], 2) for i in range(int(len(chaineBitsCompletee)/8))]\n</code></pre> </li> </ul> <p>Exercice 5</p> <p>Ajouter une ou deux lignes dans votre fonction <code>compresse()</code> afin qu\u2019elle affiche dans la console le taux de compression et tester sur le fichier NSI.txt.</p>"},{"location":"cours/Arbres/Mise%20en%20commun.html#decompression","title":"D\u00e9compression","text":"<p>Exercice 6</p> <p>Modifier la fonction <code>decode()</code> afin qu\u2019elle remplisse une liste python, au lieu de cr\u00e9er une chaine de caract\u00e8res. R\u00e9\u00e9crire la docstring en fonction bien s\u00fbr.</p> <p>Exercice 7</p> <p>Modifier la fonction <code>decompresse()</code> du niveau 1 afin qu\u2019elle d\u00e9compresse un fichier d\u2019extension \".huf\". Votre fonction doit prendre deux arguments :  <ul> <li>Le nom du fichier \u00e0 d\u00e9compresser avec l\u2019extension (ex : NSI.huf)</li> <li>Le nom du fichier de destination (ex : NSI_decompresse.txt)</li> </ul> <p> Tester votre programme sur le fichier NSI.huf pr\u00e9sent normalement dans le r\u00e9pertoire.</p> Aide <p>Apr\u00e8s lecture du fichier compress\u00e9 en binaire par la fonction <code>litFichierBinaire()</code>, transformer la liste d\u2019octets obtenue en une chaine de caract\u00e8res (<code>str</code>) constitu\u00e9e de <code>0</code> et de <code>1</code> avec cette ligne de commande : \ud83d\udc0d Script Python<pre><code>chaineBitsCompletee = ''.join('{:08b}'.format(oct) for oct in listeOctetsSource)\n</code></pre></p>"},{"location":"cours/Arbres/Projet.html","title":"Projet collaboratif","text":"<p>Ce projet collaboratif consiste en la r\u00e9alisation d'un programme de compression de donn\u00e9es. Chaque groupe r\u00e9alisera une partie du programme puis le programme principal apr\u00e8s une mise en commun avant de tester sur des fichiers de diff\u00e9rentes natures.</p> <p>Pr\u00e9requis :</p> <ul> <li>Structures de donn\u00e9es : Arbres binaires </li> <li>Algorithmique : Algorithmes sur les arbres binaires</li> </ul> <p>Type d\u2019activit\u00e9 : Projet collaboratif  </p> <p>Objectifs :</p> <ul> <li>Application du cours sur les arbres binaires</li> <li>Comprendre la compression de Huffman</li> <li>R\u00e9aliser un programme qui permet de compresser et d\u00e9compresser un fichier</li> <li>R\u00e9soudre un probl\u00e8me en le scindant en sous-probl\u00e8me</li> <li>Travailler de mani\u00e8re collaborative</li> </ul>"},{"location":"cours/Arbres/R%C3%A9partition.html","title":"R\u00e9partition","text":""},{"location":"cours/Arbres/decode%28%29.html","title":"Fonction : decode()","text":"Objectif principal <p>R\u00e9aliser une fonction qui \u00e0 partir du texte compress\u00e9 avec le dictionnaire d\u2019encodage optimal d\u2019Huffman (chaine de caract\u00e8res compos\u00e9e de <code>0</code> et de <code>1</code>), reconstitue le texte source non compress\u00e9.</p> Rendu / Evaluation <p>La fonction, une fois achev\u00e9e, servira de brique de base au programme de compression de Huffman que l\u2019ensemble de la classe codera. Tout le monde compte sur vous !!!  </p> <p>Votre fonction doit \u00eatre fonctionnelle, optimale, et son codage doit respecter les bonnes pratiques de programmation telles que CamelCase, ou Snake_case.  </p> <p>A l\u2019issu, votre groupe passera \u00e0 l\u2019oral au tableau afin d\u2019expliquer concr\u00e8tement le d\u00e9roulement de l\u2019ex\u00e9cution de votre fonction. Le vocabulaire employ\u00e9, la perspicacit\u00e9, et le niveau de compr\u00e9hension seront des crit\u00e8res d\u2019\u00e9valuation.  </p> <p>La dur\u00e9e de la prestation orale est fix\u00e9e \u00e0 5 min. </p> Cahier des charges de la fonction <p>Fichier \u00e0 compl\u00e9ter :  </p> \ud83d\udc0d Script Python<pre><code>from binaryTree import Arbre as BT\nfrom fct_huffmanTree import huffmanTree\nfrom fct_sequenceToOccurrences import sequenceToOccurrences\n\n\ndef decode(encoded_source, tree):\n\"\"\"\n    R\u00f4le: D\u00e9code la suite cod\u00e9e de 0 et 1 et obtient le texte\n\n    Parameters\n    ----------\n    encoded_source: (str) la cha\u00eene binaire \u00e0 d\u00e9coder\n    tree: (arbre) l'arbre de Huffman du codage utilis\u00e9\n\n    Returns\n    -------\n    (str) le message source d\u00e9cod\u00e9\n\n    \"\"\"\n\n    pass\n</code></pre> Commandes utiles / Aide <p>La fonction doit lire dans l\u2019ordre les <code>0</code> et <code>1</code> du texte compress\u00e9, et en m\u00eame temps (en partant de la racine) parcourir l\u2019arbre de Huffman. Lorsque l\u2019on est sur une feuille, alors on lit le caract\u00e8re qu\u2019elle contient. On se replace ensuite \u00e0 la racine tout en continuant \u00e0 parcourir le texte compress\u00e9.  </p> <p>Principe de ce que fait dans l\u2019ordre la fonction :</p> <ul> <li>Tant que l\u2019on n\u2019a pas parcouru enti\u00e8rement le texte compress\u00e9 (chaine de <code>0</code> et de <code>1</code>) :</li> </ul> <ul> <li>Si on lit un <code>0</code> et que le noeud en cours n\u2019est pas une feuille alors on part dans le fils gauche.</li> <li>Si on lit un <code>1</code> et que le noeud en cours n\u2019est pas une feuille alors on part dans le fils droit.</li> <li>Si le noeud en cours est une feuille, alors on lit le caract\u00e8re \u00e9tiquet\u00e9 dans ce noeud que l\u2019on ajoute au texte d\u00e9cod\u00e9, puis on se replace \u00e0 la racine de l\u2019arbre.</li> </ul> Tests \ud83d\udc0d Script Python<pre><code># ----------------------------\n#       TEST\n# ----------------------------\n\nocc = sequenceToOccurrences('rechercher')     # n\u00e9cessaire uniquement pour le test de la fonction\narbreHuffman = huffmanTree(occ)                # n\u00e9cessaire uniquement pour le test de la fonction\ntexteCompresse = \"11100100101101001011\"\nassert decode(texteCompresse, arbreHuffman) == 'rechercher', \"Erreur\"\n\nocc = sequenceToOccurrences('i love coding')     # n\u00e9cessaire uniquement pour le test de la fonction\narbreHuffman = huffmanTree(occ)                # n\u00e9cessaire uniquement pour le test de la fonction\ntexteCompresse = \"0010101010001110110101110110011000011111110\"\nassert decode(texteCompresse, arbreHuffman) == 'i love coding', \"Erreur\"\n</code></pre>"},{"location":"cours/Arbres/encode%28%29.html","title":"Fonction : encode()","text":"Objectif principal <p>R\u00e9aliser une fonction qui convertit le texte source, \u00e0 l\u2019aide du dictionnaire de codage optimal de Huffman, en une suite de <code>0</code> et de <code>1</code>.</p> Rendu / Evaluation <p>La fonction, une fois achev\u00e9e, servira de brique de base au programme de compression de Huffman que l\u2019ensemble de la classe codera. Tout le monde compte sur vous !!!  </p> <p>Votre fonction doit \u00eatre fonctionnelle, optimale, et son codage doit respecter les bonnes pratiques de programmation telles que CamelCase, ou Snake_case. </p> <p>A l\u2019issu, votre groupe passera \u00e0 l\u2019oral au tableau afin d\u2019expliquer concr\u00e8tement le d\u00e9roulement de l\u2019ex\u00e9cution de votre fonction. Le vocabulaire employ\u00e9, la perspicacit\u00e9, et le niveau de compr\u00e9hension seront des crit\u00e8res d\u2019\u00e9valuation.  </p> <p>La dur\u00e9e de la prestation orale est fix\u00e9e \u00e0 5 min. </p> Cahier des charges de la fonction <p>Fichier \u00e0 compl\u00e9ter :  </p> \ud83d\udc0d Script Python<pre><code>def encode(source, coding_table):\n\"\"\"\n    R\u00f4le: Code le texte source en utilisant la table de Huffman\n\n    Parameters\n    ----------\n    source: (str) texte source \u00e0 encoder\n    coding_table: (dict) une table de codage\n\n    Returns\n    -------\n    (str) chaine qui contient une suite de '0' et de '1'\n\n    \"\"\"\n\n    pass\n</code></pre> Commandes utiles / Aide <p>Vos connaissances actuelles suffisent \u00e0 coder cette fonction.</p> Tests \ud83d\udc0d Script Python<pre><code># ----------------------------\n#       TEST\n# ----------------------------\n\ntexteSource = 'rechercher'\ntableCodage = {'h': '00', 'c': '01', 'e': '10', 'r': '11'}\nassert encode(texteSource, tableCodage) == \"11100100101101001011\", \"erreur\"\n\ntexteSource = 'i love coding'\ntableCodage = {'i': '00', 'l': '010', 'e': '0110', 'v': '0111', 'o': '100', ' ': '101', 'd': '1100', 'c': '1101', 'g': '1110', 'n': '1111'}\nassert encode(texteSource, tableCodage) == \"0010101010001110110101110110011000011111110\", \"erreur\"\n</code></pre>"},{"location":"cours/Arbres/huffmanTree%28%29.html","title":"Fonction : huffmanTree()","text":"Objectif principal <p>R\u00e9aliser une fonction qui g\u00e9n\u00e8re l\u2019arbre de Huffman \u00e0 partir du nombre d\u2019occurrences (ou pourcentage d\u2019apparition) de chacun des symboles dans le texte source \u00e0 compresser.</p> Rendu / Evaluation <p>La fonction, une fois achev\u00e9e, servira de brique de base au programme de compression de Huffman que l\u2019ensemble de la classe codera. Tout le monde compte sur vous !!!  </p> <p>Votre fonction doit \u00eatre fonctionnelle, optimale, et son codage doit respecter les bonnes pratiques de programmation telles que CamelCase, ou Snake_case.  </p> <p>A l\u2019issu, votre groupe passera \u00e0 l\u2019oral au tableau afin d\u2019expliquer concr\u00e8tement le d\u00e9roulement de l\u2019ex\u00e9cution de votre fonction. Le vocabulaire employ\u00e9, la perspicacit\u00e9, et le niveau de compr\u00e9hension seront des crit\u00e8res d\u2019\u00e9valuation.  </p> <p>La dur\u00e9e de la prestation orale est fix\u00e9e \u00e0 5 min. </p> Cahier des charges de la fonction <p>Fichier \u00e0 compl\u00e9ter :  </p> \ud83d\udc0d Script Python<pre><code>from binaryTree import Arbre as BT\nfrom fct_weightTree import weightTree\nfrom fct_insertTreeInForest import insertTreeInForest\n\ndef huffmanTree(occ):\n\"\"\"\n    R\u00f4le: cette fonction construit l'arbre de Huffman.\n\n    Parameters\n    ----------\n    occ: (dict) dictionnaire d'occurrences de chaque caract\u00e8re.\n    Exemple occ = {'d': 2, 'e': 2, 'c': 1, 'i': 1}\n\n    Returns\n    -------\n    (arbre) l'arbre binaire de codage de Huffman.\n    \"\"\"\n\n    pass\n</code></pre> Commandes utiles / Aide <p>Pour g\u00e9n\u00e9rer l\u2019arbre de Huffman, vous devez dans l\u2019ordre :</p> <ul> <li>Trier le dictionnaire d\u2019occurrences dans l\u2019ordre d\u00e9croissant des valeurs (c'est-\u00e0-dire occurrences), ce qui doit vous donner une liste de tuples. Exemple :     \ud83d\udc0d Script Python<pre><code>occurrences = {'t': 3, 'a': 4, 'r': 1}\n# Ici mon instruction de tri qui va bien\nliste_tuples = [('a', 4), ('t', 3), ('r', 1)]\n</code></pre> Pour trier un dictionnaire, on pourra utiliser le guide suivant. </li> <li>Cr\u00e9er \u00e0 partir de cette liste de tuples, la for\u00eat d\u2019arbres binaires, c\u2019est-\u00e0-dire une liste d\u2019arbres r\u00e9duits \u00e0 une feuille contenant chacun comme donn\u00e9e <code>('lettre', nbOccurrences)</code>. Chaque symbole avec son nombre d\u2019occurrences doit \u00eatre repr\u00e9sent\u00e9 par un arbre dans la for\u00eat, et l\u2019ordre des occurrences dans la liste doit \u00eatre d\u00e9croissant comme pour le dictionnaire.</li> <li>Fusionner les arbres de la for\u00eat en respectant l\u2019algorithme de Huffman, pour cela on retire les deux arbres les \u00ab moins lourds \u00bb de la for\u00eat et on les regroupe en un seul qu'on remet dans la for\u00eat. Vous avez \u00e0 votre disposition la fonction <code>insertTreeInForest(arbre, foret)</code> qui permet d\u2019ins\u00e9rer un arbre binaire dans une liste d\u2019arbres binaires (la for\u00eat), en respectant l\u2019ordre d\u00e9croissant des poids des arbres dans la liste. Vous avez \u00e9galement \u00e0 votre disposition la fonction <code>weightTree(arbre)</code> qui renvoie le poids de la racine (somme des poids des feuilles).</li> </ul> <p>A la fin il ne reste plus qu\u2019un arbre dans la for\u00eat, cet arbre binaire est l\u2019arbre de Huffman. La fonction renvoie cet arbre de Huffman.</p> Tests \ud83d\udc0d Script Python<pre><code># ----------------------------\n#       TEST\n# ----------------------------\n\noccurrences = {'d': 2, 'e': 2, 'c': 1, 'i': 1}\narbreHuffman = huffmanTree(occurrences)\narbreHuffman.affichage()                         \n</code></pre> <p>Le dernier appel doit afficher en console :</p> <p></p>"},{"location":"cours/Arbres/insertTreeInForest%28%29.html","title":"Fonction : insertTreeInForest()","text":"Objectif principal <p>R\u00e9aliser une fonction qui ins\u00e8re un arbre binaire dans une for\u00eat d\u2019arbres binaire (qui est en fait une liste d\u2019arbres). L\u2019arbre est ins\u00e9r\u00e9 \u00e0 la premi\u00e8re position qui maintient la for\u00eat rang\u00e9e en ordre d\u00e9croissant.</p> Rendu / Evaluation <p>La fonction, une fois achev\u00e9e, servira de brique de base au programme de compression de Huffman que l\u2019ensemble de la classe codera. Tout le monde compte sur vous !!!  </p> <p>Votre fonction doit \u00eatre fonctionnelle, optimale, et son codage doit respecter les bonnes pratiques de programmation telles que CamelCase, ou Snake_case.  </p> <p>A l\u2019issu, votre groupe passera \u00e0 l\u2019oral au tableau afin d\u2019expliquer concr\u00e8tement le d\u00e9roulement de l\u2019ex\u00e9cution de votre fonction. Le vocabulaire employ\u00e9, la perspicacit\u00e9, et le niveau de compr\u00e9hension seront des crit\u00e8res d\u2019\u00e9valuation.  </p> <p>La dur\u00e9e de la prestation orale est fix\u00e9e \u00e0 5 min. </p> Cahier des charges de la fonction <p>Fichier \u00e0 compl\u00e9ter :  </p> \ud83d\udc0d Script Python<pre><code>from binaryTree import Arbre as BT\nfrom fct_weightTree import weightTree\n\ndef insertTreeInForest(arbre, foret):\n\"\"\"\n    R\u00f4le: cette fonction ins\u00e8re un arbre suppl\u00e9mentaire dans la for\u00eat de mani\u00e8re \u00e0 ce que l'ordre de poids d\u00e9croissant des arbres soit respect\u00e9.\n\n    Parameters\n    ----------\n    arbre : Objet de la class Arbre import\u00e9e via le module binaryTree\n    foret: Une liste d'arbres\n\n    Returns\n    -------\n    Une liste d'arbres dans lequel l'arbre a \u00e9t\u00e9 ins\u00e9r\u00e9.\n    \"\"\"\n\n    pass\n</code></pre> Commandes utiles / Aide <p>M\u00e9thode insert.</p> Tests \ud83d\udc0d Script Python<pre><code># ----------------------------\n#       TEST\n# ----------------------------\n\ndef afficheForet():\n    for arbre in foret:\n        print(arbre.cle(), end=' ')\n    print()\n\nforet=[]                                # Cr\u00e9ation d'une foret vide\nforet.append(BT((\"a\", 3)))              # Ajoute \u00e0 la foret un arbre binaire (sommet) avec le symbole et sa fr\u00e9quence dans le texte\nforet.append(BT((\"b\", 1)))              # Ajoute \u00e0 la foret un arbre binaire (sommet) avec le symbole et sa fr\u00e9quence dans le texte\narbre3 = BT((\"c\", 1))                   # Cr\u00e9ation d'un arbre binaire\narbre4 = BT((\"d\", 5))                   # Cr\u00e9ation d'un arbre binaire\n\n\nafficheForet()                          # Renvoie ('a', 3) ('b', 1)\ninsertTreeInForest(arbre3, foret)       # Appel de la fonction pour ins\u00e9rer l'arbre 3 dans la foret\nafficheForet()                          # Renvoie ('a', 3) ('b', 1) ('c', 1)\ninsertTreeInForest(arbre4, foret)       # Appel de la fonction pour ins\u00e9rer l'arbre 4 dans la foret\nafficheForet()                          # Renvoie ('d', 5) ('a', 3) ('b', 1) ('c', 1)\n</code></pre>"},{"location":"cours/Arbres/sequenceToOccurrences%28%29.html","title":"Fonction : sequenceToOccurrences()","text":"Objectif principal <p>R\u00e9aliser une fonction qui analyse et m\u00e9morise la fr\u00e9quence d\u2019apparition des caract\u00e8res/symboles dans une chaine de caract\u00e8res. </p> Rendu / Evaluation <p>La fonction, une fois achev\u00e9e, servira de brique de base au programme de compression de Huffman que l\u2019ensemble de la classe codera. Tout le monde compte sur vous !!!  </p> <p>Votre fonction doit \u00eatre fonctionnelle, optimale, et son codage doit respecter les bonnes pratiques de programmation telles que CamelCase, ou Snake_case.  </p> <p>A l\u2019issu, votre groupe passera \u00e0 l\u2019oral au tableau afin d\u2019expliquer concr\u00e8tement le d\u00e9roulement de l\u2019ex\u00e9cution de votre fonction. Le vocabulaire employ\u00e9, la perspicacit\u00e9, et le niveau de compr\u00e9hension seront des crit\u00e8res d\u2019\u00e9valuation.  </p> <p>La dur\u00e9e de la prestation orale est fix\u00e9e \u00e0 5 min. </p> Cahier des charges de la fonction <p>Fichier \u00e0 compl\u00e9ter :  </p> \ud83d\udc0d Script Python<pre><code>def sequenceToOccurrences(seq):\n\"\"\"\n    R\u00f4le : rep\u00e8re les occurrences de chaque caract\u00e8re dans un texte et les renvoie sous la forme d'un dictionnaire.\n\n    Exemple de retour : {'d': 2, 'e': 2, 'c': 1, 'i': 1}\n\n    Parameters\n    ----------\n    seq : string \n          une s\u00e9quence de symboles, le texte \u00e0 analyser\n    Returns\n    -------\n    dict\n        un dictionnaire donnant le nombre d'occurrences de chacun des symboles contenu dans seq\n    \"\"\"\n\n    pass\n</code></pre> Commandes utiles / Aide <p>L\u2019\u00e9tat actuel de vos connaissances est suffisant pour coder la fonction.</p> Tests \ud83d\udc0d Script Python<pre><code># ----------------------------\n#       TESTS\n# ----------------------------\n\nassert type(sequenceToOccurrences('aaabc')) == type({}), \"Votre fonction ne renvoie pas un dictionnaire\"\nassert sequenceToOccurrences('aaabc') == {'a': 3, 'b': 1, 'c': 1}, \"Erreur\"\nassert sequenceToOccurrences('dictionnaire') == {'d': 1, 'i': 3, 'c': 1, 't': 1, 'o': 1, 'n': 2, 'a': 1, 'r': 1, 'e': 1}, \"Erreur\"\n</code></pre>"},{"location":"cours/Arbres/treeToCoding%28%29.html","title":"Fonction : treeToCoding()","text":"Objectif principal <p>R\u00e9aliser la fonction qui g\u00e9n\u00e8re la table de codage. Cette table contient le code optimal, selon l\u2019algorithme de Huffman, de chacun des caract\u00e8res du fichier source \u00e0 compresser.</p> Rendu / Evaluation <p>La fonction, une fois achev\u00e9e, servira de brique de base au programme de compression de Huffman que l\u2019ensemble de la classe codera. Tout le monde compte sur vous !!!  </p> <p>Votre fonction doit \u00eatre fonctionnelle, optimale, et son codage doit respecter les bonnes pratiques de programmation telles que CamelCase, ou Snake_case.  </p> <p>A l\u2019issu, votre groupe passera \u00e0 l\u2019oral au tableau afin d\u2019expliquer concr\u00e8tement le d\u00e9roulement de l\u2019ex\u00e9cution de votre fonction. Le vocabulaire employ\u00e9, la perspicacit\u00e9, et le niveau de compr\u00e9hension seront des crit\u00e8res d\u2019\u00e9valuation.  </p> <p>La dur\u00e9e de la prestation orale est fix\u00e9e \u00e0 5 min. </p> Cahier des charges de la fonction <p>Fichier \u00e0 compl\u00e9ter :  </p> \ud83d\udc0d Script Python<pre><code>from binaryTree import Arbre as BT\nfrom fct_huffmanTree import huffmanTree\nfrom fct_sequenceToOccurrences import sequenceToOccurrences\n\n\ndef treeToCoding(arbre_huff, dicCodeCarac = {}, codeEnConstruction = []):\n\"\"\"\n    R\u00f4le: cette fonction r\u00e9cursive construit le dictionnaire de codage.\n\n    Exemple de retour : {'a': 0, 't': 10, 'r': 11}\n\n    Parameters\n    ----------\n    arbre_huff : (arbre) arbre de Huffman\n\n    Returns\n    -------\n    (dict) dictionnaire donnant pour chaque caract\u00e8re le code de Huffman \u00e0 utiliser\n\n    \"\"\"\n\n    pass\n</code></pre> Commandes utiles / Aide <p>Principe de ce que fait dans l\u2019ordre la fonction :</p> <ul> <li>Si le noeud est une feuille, alors on est arriv\u00e9 en bout de branche sur un caract\u00e8re, on affecte le symbole construit \u00e0 ce caract\u00e8re.</li> <li>Ajout d\u2019un <code>'0'</code> au code en construction.</li> <li>Ex\u00e9cution de la fonction (r\u00e9cursion) pour explorer le fils gauche.</li> <li>Suppression d\u2019un <code>'0'</code> au code de construction puisque l\u2019on remonte depuis un fils gauche.</li> <li>Ajout d\u2019un <code>'1'</code> au code en construction.</li> <li>Ex\u00e9cution de la fonction (r\u00e9cursion) pour explorer le fils droit.</li> <li>Suppression d\u2019un <code>'1'</code> au code de construction puisque l\u2019on remonte depuis un fils droit.</li> <li>Renvoie du dictionnaire d\u2019encodage des caract\u00e8res.</li> </ul> Tests \ud83d\udc0d Script Python<pre><code># ----------------------------\n#       TEST\n# ----------------------------\n\noccurrences = sequenceToOccurrences('bienvenue')\narbreHuffman = huffmanTree(occurrences)\ntableCodage = treeToCoding(arbreHuffman)\n\nassert tableCodage == {'i': '000', 'b': '001', 'u': '010', 'v': '011', 'n': '10', 'e': '11'}, 'Erreur'                         \n</code></pre>"},{"location":"cours/Epreuve_pratique/EP.html","title":"Banque d'exercices","text":"<p>Vous trouverez ci-dessous l'int\u00e9gralit\u00e9 des sujets de l'\u00e9preuve pratique, disponibles publiquement sur la Banque Nationale des Sujets (novembre 2021). </p> <p>Une nouvelle version (qui sera a priori en grande partie semblable \u00e0 celle-ci) sera publi\u00e9e en janvier 2022 sur le site Eduscol.</p>  \u2764\ufe0f  <p>Pdf de l'int\u00e9gralit\u00e9 des exercices.</p>"},{"location":"cours/Epreuve_pratique/EP.html#sujet-01","title":"Sujet 01 \u270f\ufe0f","text":"<p>Exercice 01.1</p> \u00c9nonc\u00e9 \ud83d\udd12Correction \ud83d\udd13 <p>Programmer la fonction <code>recherche</code>, prenant en param\u00e8tre un tableau non vide <code>tab</code> (type <code>list</code>) d'entiers et un entier <code>n</code>, et qui renvoie l'indice de la derni\u00e8re occurrence de l'\u00e9l\u00e9ment cherch\u00e9. Si l'\u00e9l\u00e9ment n'est pas pr\u00e9sent, la fonction renvoie la longueur du tableau.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche([5, 3], 1)\n2\n&gt;&gt;&gt; recherche([2, 4], 2)\n0\n&gt;&gt;&gt; recherche([2, 3, 5, 2, 4], 2)\n3\n</code></pre></p> <p>\u25b6\ufe0f \u2935\ufe0f \u2934\ufe0f benchmark = ['recherche([5, 3], 1) == 2', 'recherche([2, 4], 2) == 0', 'recherche([2, 3, 5, 2, 4], 2) == 3']backslash_newlinebackslash_newlinebackslash_newlinebackslash_newline\ud83d\udec25/5def recherche(tab, n):backslash_newline    passbackslash_newlinedef recherche(tab, n):backslash_newline    indice_solution = len(tab)backslash_newline    for i in range(len(tab)):backslash_newline        if tab[i] == n:backslash_newline            indice_solution = ibackslash_newline    return indice_solutionbackslash_newline</p> \ud83d\udc0d Script Python<pre><code>def recherche(tab, n):\n    indice_solution = len(tab)\n    for i in range(len(tab)):\n        if tab[i] == n:\n            indice_solution = i\n    return indice_solution\n</code></pre> <p>Exercice 01.2</p> \u00c9nonc\u00e9 \ud83d\udd12Correction \ud83d\udd13 <p>On souhaite programmer une fonction donnant la distance la plus courte entre un point de d\u00e9part et une liste de points. Les points sont tous \u00e0 coordonn\u00e9es enti\u00e8res.</p> <p>Les points sont donn\u00e9s sous la forme d'un tuple de deux entiers.</p> <p>La liste des points \u00e0 traiter est donc un tableau de tuples.</p> <p>On rappelle que la distance entre deux points du plan de coordonn\u00e9es \\((x;y)\\) et \\((x';y')\\) est donn\u00e9e par la formule :</p> \\[d=\\sqrt{(x-x')^2+(y-y')^2}\\] <p>On importe pour cela la fonction racine carr\u00e9e (<code>sqrt</code>) du module <code>math</code> de Python.</p> <p>On dispose d'une fonction <code>distance</code> et d'une fonction <code>plus_courte_distance</code> :</p> <p>\ud83d\udc0d Script Python<pre><code>from math import sqrt     # import de la fonction racine carr\u00e9e\n\ndef distance(point1, point2):\n\"\"\" Calcule et renvoie la distance entre deux points. \"\"\"\n    return sqrt((...)**2 + (...)**2)\n\nassert distance((1, 0), (5, 3)) == 5.0, \"erreur de calcul\"\n\ndef plus_courte_distance(tab, depart):\n\"\"\" Renvoie le point du tableau tab se trouvant \u00e0 la plus courte distance du point depart.\"\"\"\n    point = tab[0]\n    min_dist = ...\n    for i in range (1, ...):\n        if distance(tab[i], depart)...:\n            point = ...\n            min_dist = ...\n    return point\n\nassert plus_courte_distance([(7, 9), (2, 5), (5, 2)], (0, 0)) == (2, 5), \"erreur\"\n</code></pre> Recopier sous Python (sans les commentaires) ces deux fonctions puis compl\u00e9ter leur code et ajouter une ou des d\u00e9clarations (<code>assert</code>) \u00e0 la fonction <code>distance</code> permettant de v\u00e9rifier la ou les pr\u00e9conditions.</p> \ud83d\udc0d Script Python<pre><code>from math import sqrt\n\ndef distance(point1, point2):\n\"\"\" Calcule et renvoie la distance entre deux points. \"\"\"\n    return sqrt((point1[0] - point2[0])**2 + ((point1[1] - point2[1]))**2)\n\nassert distance((1, 0), (5, 3)) == 5.0, \"erreur de calcul\"\n\ndef plus_courte_distance(tab, depart):\n\"\"\" Renvoie le point du tableau tab se trouvant \u00e0 la plus courte distance du point depart.\"\"\"\n    point = tab[0]\n    min_dist = distance(point, depart)\n    for i in range (1, len(tab)):\n        if distance(tab[i], depart) &lt; min_dist:\n            point = tab[i]\n            min_dist = distance(tab[i], depart)\n    return point\n\nassert plus_courte_distance([(7, 9), (2, 5), (5, 2)], (0, 0)) == (2, 5), \"erreur\"\n</code></pre>"},{"location":"cours/Epreuve_pratique/EP.html#sujet-02","title":"Sujet 02 \u270f\ufe0f","text":"<p>Exercice 02.1</p> \u00c9nonc\u00e9 \ud83d\udd12Correction \ud83d\udd13 <p>Programmer la fonction <code>moyenne</code>   prenant en param\u00e8tre un tableau d'entiers <code>tab</code> (type <code>list</code>) qui renvoie la moyenne de ses \u00e9l\u00e9ments si le tableau est non vide et affiche <code>'erreur'</code> si le tableau est vide.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; moyenne([5, 3, 8])\n5.333333333333333\n&gt;&gt;&gt; moyenne([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n5.5\n&gt;&gt;&gt; moyenne([])\n'erreur'\n</code></pre></p> <p>L'\u00e9nonc\u00e9 n'est pas tr\u00e8s clair quand il dit \u00ab d'afficher <code>'erreur'</code>\u00bb (ce qui suppose un <code>print</code> et non un <code>return</code>). Nous choisissons donc dans ce cas de renvoyer <code>None</code>.</p> \ud83d\udc0d Script Python<pre><code>def moyenne(tab):\n    if tab == []:\n        print('erreur')\n        return None\n    else:\n        somme = 0\n        for elt in tab:\n            somme += elt\n        return somme / len(tab)\n</code></pre> <p>Exercice 02.2</p> \u00c9nonc\u00e9  \ud83d\udd12Correction \ud83d\udd13 <p>On consid\u00e8re un tableau d'entiers <code>tab</code> (type <code>list</code> dont les \u00e9l\u00e9ments sont des <code>0</code> ou des <code>1</code>). On se propose de trier ce tableau selon l'algorithme suivant : \u00e0 chaque \u00e9tape du tri, le tableau est constitu\u00e9 de trois zones cons\u00e9cutives, la premi\u00e8re ne contenant que des <code>0</code>, la seconde n'\u00e9tant pas tri\u00e9e et la derni\u00e8re ne contenant que des <code>1</code>.</p> <p> Zone de <code>0</code>Zone non tri\u00e9eZone de <code>1</code>  Tant que la zone non tri\u00e9e n'est pas r\u00e9duite \u00e0 un seul \u00e9l\u00e9ment, on regarde son premier \u00e9l\u00e9ment :  <ul> <li>si cet \u00e9l\u00e9ment vaut <code>0</code>, on consid\u00e8re qu'il appartient d\u00e9sormais \u00e0 la zone ne contenant que des <code>0</code> ;</li> <li>si cet \u00e9l\u00e9ment vaut <code>1</code>, il est \u00e9chang\u00e9 avec le dernier \u00e9l\u00e9ment de la zone non tri\u00e9e et on consid\u00e8re alors qu\u2019il appartient \u00e0 la zone ne contenant que des <code>1</code>.</li> </ul> <p> Dans tous les cas, la longueur de la zone non tri\u00e9e diminue de <code>1</code>.</p> <p>Recopier sous Python en la compl\u00e9tant la fonction <code>tri</code> suivante :</p> \ud83d\udc0d Script Python<pre><code>def tri(tab):\n    #i est le premier indice de la zone non triee, j le dernier indice.\n    #Au debut, la zone non triee est le tableau entier.\n    i = ...\n    j = ...\n    while i != j :\n        if tab[i] == 0:\n            i = ...\n        else :\n            valeur = tab[j]\n            tab[j] = ...\n            ...\n            j = ...\n    ...\n</code></pre> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; tri([0, 1, 0, 1, 0, 1, 0, 1, 0])\n[0, 0, 0, 0, 0, 1, 1, 1, 1]       \n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def tri(tab):\n    #i est le premier indice de la zone non triee, j le dernier indice.\n    #Au debut, la zone non triee est le tableau entier.\n    i = 0\n    j = len(tab) - 1\n    while i != j :\n        if tab[i] == 0:\n            i = i + 1\n        else :\n            valeur = tab[j]\n            tab[j] = tab[i]\n            tab[i] = valeur\n            j = j - 1\n    return tab\n</code></pre>"},{"location":"cours/Epreuve_pratique/EP.html#sujet-03","title":"Sujet 03 \u270f\ufe0f","text":"<p>Exercice 03.1</p> \u00c9nonc\u00e9  \ud83d\udd12Correction \ud83d\udd13 <p>Programmer la fonction <code>multiplication</code>, prenant en param\u00e8tres deux nombres entiers <code>n1</code> et <code>n2</code>, et qui renvoie le produit de ces deux nombres.</p> <p>Les seules op\u00e9rations autoris\u00e9es sont l\u2019addition et la soustraction. </p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; multiplication(3,5)\n15\n&gt;&gt;&gt; multiplication(-4,-8)\n32\n&gt;&gt;&gt; multiplication(-2,6)\n-12\n&gt;&gt;&gt; multiplication(-2,0)\n0\n</code></pre></p> <p>On utilise le fait que \\(5 \\times (-6)= - (5 \\times 6)\\). \ud83d\udc0d Script Python<pre><code>def multiplication(n1, n2):\n    if n1 &lt; 0:\n        return -multiplication(-n1, n2)\n    if n2 &lt; 0:\n        return -multiplication(n1, -n2)\n    resultat = 0\n    for _ in range(n2):\n        resultat += n1\n    return resultat\n</code></pre></p> <p>Exercice 03.2</p> \u00c9nonc\u00e9 \ud83d\udd12Correction \ud83d\udd13 <p>Recopier et compl\u00e9ter sous Python la fonction suivante en respectant la sp\u00e9cification. On ne recopiera pas les commentaires.</p> \ud83d\udc0d Script Python<pre><code>def dichotomie(tab, x):\n\"\"\"\n    tab : tableau d\u2019entiers tri\u00e9 dans l\u2019ordre croissant\n    x : nombre entier\n    La fonction renvoie True si tab contient x et False sinon\n    \"\"\"\n    debut = 0\n    fin = len(tab) - 1\n    while debut &lt;= fin:\n        m = ...\n        if x == tab[m]:\n            return ...\n        if x &gt; tab[m]:\n            debut = m + 1\n        else:\n            fin = ...\n    return ...\n</code></pre> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33], 28)\nTrue\n&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33], 27)\nFalse\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def dichotomie(tab, x):\n\"\"\"\n    tab : tableau d\u2019entiers tri\u00e9 dans l\u2019ordre croissant\n    x : nombre entier\n    La fonction renvoie True si tab contient x et False sinon\n    \"\"\"\n    debut = 0\n    fin = len(tab) - 1\n    while debut &lt;= fin:\n        m = (debut + fin) // 2\n        if x == tab[m]:\n            return True\n        if x &gt; tab[m]:\n            debut = m + 1\n        else:\n            fin = m - 1\n    return False\n</code></pre>"},{"location":"cours/Epreuve_pratique/EP.html#sujet-04","title":"Sujet 04 \u270f\ufe0f","text":"<p>Exercice 04.1</p> \u00c9nonc\u00e9  \ud83d\udd12Correction \ud83d\udd13 <p>\u00c9crire une fonction qui prend en param\u00e8tre un tableau d'entiers non vide et qui renvoie la moyenne de ces entiers.</p> <p>La fonction est sp\u00e9cifi\u00e9e ci-apr\u00e8s et doit passer les assertions fournies. \ud83d\udc0d Script Python<pre><code>def moyenne (tab):\n'''\n    moyenne(list) -&gt; float\n    Entr\u00e9e : un tableau non vide d'entiers\n    Sortie : nombre de type float\n    Correspondant \u00e0 la moyenne des valeurs pr\u00e9sentes dans le\n    tableau\n    '''\nassert moyenne([1]) == 1\nassert moyenne([1, 2, 3, 4, 5, 6, 7]) == 4\nassert moyenne([1, 2]) == 1.5\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def moyenne(tab):\n'''\n    moyenne(list) -&gt; float\n    Entr\u00e9e : un tableau non vide d'entiers\n    Sortie : nombre de type float\n    Correspondant \u00e0 la moyenne des valeurs pr\u00e9sentes dans le\n    tableau\n    '''\n    somme = 0\n    for elt in tab:\n        somme += elt\n    return somme / len(tab)\n</code></pre> <p>Exercice 04.2</p> \u00c9nonc\u00e9 \ud83d\udd12Correction \ud83d\udd13 <p>Le but de l'exercice est de compl\u00e9ter une fonction qui d\u00e9termine si une valeur est pr\u00e9sente dans un tableau de valeurs tri\u00e9es dans l'ordre croissant.</p> <p>L'algorithme traite le cas du tableau vide.</p> <p>L'algorithme est \u00e9crit pour que la recherche dichotomique ne se fasse que dans le cas o\u00f9 la valeur est comprise entre les valeurs extr\u00eames du tableau.</p> <p>On distingue les trois cas qui renvoient <code>False</code> en renvoyant <code>False, 1</code> , <code>False, 2</code> et <code>False, 3</code>.</p> <p>Compl\u00e9ter l'algorithme de dichotomie donn\u00e9 ci-apr\u00e8s. \ud83d\udc0d Script Python<pre><code>def dichotomie(tab, x):\n\"\"\"\n    tab : tableau tri\u00e9 dans l\u2019ordre croissant\n    x : nombre entier\n    La fonction renvoie True si tab contient x et False sinon\n    \"\"\"\n    \n    # cas du tableau vide\n    if ...:\n        return False, 1\n    \n    # cas o\u00f9 x n'est pas compris entre les valeurs extr\u00eames\n    if (x &lt; tab[0]) or ...:\n        return False, 2\n    debut = 0\n    fin = len(tab) - 1\n    while debut &lt;= fin:\n        m = ...\n        if x == tab[m]:\n            return ...\n        if x &gt; tab[m]:\n            debut = m + 1\n        else:\n            fin = ...\n    return ...\n</code></pre> Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33], 28)\nTrue\n&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33], 27)\n(False, 3)\n&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33], 1)\n(False, 2)\n&gt;&gt;&gt; dichotomie([], 28)\n(False, 1)\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def dichotomie(tab, x):\n\"\"\"\n    tab : tableau tri\u00e9 dans l\u2019ordre croissant\n    x : nombre entier\n    La fonction renvoie True si tab contient x et False sinon\n    \"\"\"\n    \n    # cas du tableau vide\n    if tab = []:\n        return False,1\n    \n    # cas o\u00f9 x n'est pas compris entre les valeurs extr\u00eames\n    if (x &lt; tab[0]) or (x &gt; tab[-1]):\n        return False,2\n    debut = 0\n    fin = len(tab) - 1\n    while debut &lt;= fin:\n        m = (debut + fin) // 2\n        if x == tab[m]:\n            return True\n        if x &gt; tab[m]:\n            debut = m + 1\n        else:\n            fin = m - 1\n    return False\n</code></pre>"},{"location":"cours/Epreuve_pratique/EP.html#sujet-05","title":"Sujet 05 \u270f\ufe0f","text":"<p>Exercice 05.1</p> \u00c9nonc\u00e9 \ud83d\udd12Correction \ud83d\udd13 <p>On mod\u00e9lise la repr\u00e9sentation binaire d'un entier non sign\u00e9 par un tableau d'entiers dont les \u00e9l\u00e9ments sont 0 ou 1. Par exemple, l'\u00e9criture d\u00e9cimale est <code>2**6 + 2**4 + 2**1 + 2**0 = 83</code>.</p> <p>\u00c0 l'aide d'un parcours s\u00e9quentiel, \u00e9crire la fonction <code>convertir</code> r\u00e9pondant aux sp\u00e9cifications suivantes : \ud83d\udc0d Script Python<pre><code>def convertir(T):\n\"\"\"\n    T est un tableau d'entiers, dont les \u00e9l\u00e9ments sont 0 ou 1 et\n    repr\u00e9sentant un entier \u00e9crit en binaire. Renvoie l'\u00e9criture\n    d\u00e9cimale de l'entier positif dont la repr\u00e9sentation binaire\n    est donn\u00e9e par le tableau T\n    \"\"\"\n</code></pre> Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; convertir([1, 0, 1, 0, 0, 1, 1])\n83\n&gt;&gt;&gt; convertir([1, 0, 0, 0, 0, 0, 1, 0])\n130\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def convertir(T):\n    puissance = 0\n    total = 0\n    for i in range(len(T)-1, -1, -1):\n        total += T[i] * (2 ** puissance)\n        puissance += 1\n    return total\n</code></pre> <p>Exercice 05.2</p> \u00c9nonc\u00e9 \ud83d\udd12Correction \ud83d\udd13 <p>La fonction <code>tri_insertion</code> suivante prend en argument une liste <code>L</code> et trie cette liste en utilisant la m\u00e9thode du tri par insertion. Compl\u00e9ter cette fonction pour qu'elle r\u00e9ponde \u00e0 la sp\u00e9cification demand\u00e9e. \ud83d\udc0d Script Python<pre><code>def tri_insertion(L):\n    n = len(L)\n    \n    # cas du tableau vide\n    if ...:\n        return L\n    \n    for j in range(1, n):\n        e = L[j]\n        i = j\n    \n    # A l'\u00e9tape j, le sous-tableau L[0,j-1] est tri\u00e9\n    # et on ins\u00e8re L[j] dans ce sous-tableau en d\u00e9terminant\n    # le plus petit i tel que 0 &lt;= i &lt;= j et L[i-1] &gt; L[j].\n        while i &gt; 0 and L[i-1] &gt; ...:\n            i = ...\n        \n        # si i != j, on d\u00e9cale le sous tableau L[i,j-1] d\u2019un cran\n        # vers la droite et on place L[j] en position i\n        if i != j:\n            for k in range(j, i,...):\n                L[k] = L[...]\n            L[i] = ...\n    return L\n</code></pre> Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; tri_insertion([2, 5, -1, 7, 0, 28])\n[-1, 0, 2, 5, 7, 28]\n&gt;&gt;&gt; tri_insertion([10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0])\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def tri_insertion(L):\n    n = len(L)\n    \n    # cas du tableau vide\n    if L == []:\n        return L\n    \n    for j in range(1, n):\n        e = L[j]\n        i = j\n    \n    # A l'\u00e9tape j, le sous-tableau L[0,j-1] est tri\u00e9\n    # et on ins\u00e8re L[j] dans ce sous-tableau en d\u00e9terminant\n    # le plus petit i tel que 0 &lt;= i &lt;= j et L[i-1] &gt; L[j].\n        while i &gt; 0 and L[i-1] &gt; e:\n            i = i - 1\n        \n        # si i != j, on d\u00e9cale le sous tableau L[i,j-1] d\u2019un cran\n        # vers la droite et on place L[j] en position i\n        if i != j:\n            for k in range(j, i, -1):\n                L[k] = L[k-1]\n            L[i] = e\n    return L\n</code></pre>"},{"location":"cours/Epreuve_pratique/EP.html#sujet-06","title":"Sujet 06 \u270f\ufe0f","text":"<p>Exercice 06.1</p> \u00c9nonc\u00e9 \ud83d\udd12Correction \ud83d\udd13 <p>On s\u2019int\u00e9resse au probl\u00e8me du rendu de monnaie. On suppose qu\u2019on dispose d\u2019un nombre infini de billets de 5 euros, de pi\u00e8ces de 2 euros et de pi\u00e8ces de 1 euro.</p> <p>Le but est d\u2019\u00e9crire une fonction nomm\u00e9e <code>rendu</code> dont le param\u00e8tre est un entier positif non nul <code>somme_a_rendre</code> et qui retourne une liste de trois entiers <code>n1</code>, <code>n2</code> et <code>n3</code> qui correspondent aux nombres de billets de 5 euros (<code>n1</code>) de pi\u00e8ces de 2 euros (<code>n2</code>) et de pi\u00e8ces de 1 euro (<code>n3</code>) \u00e0 rendre afin que le total rendu soit \u00e9gal \u00e0 <code>somme_a_rendre</code>.</p> <p>On utilisera un algorithme glouton : on commencera par rendre le nombre maximal de billets de 5 euros, puis celui des pi\u00e8ces de 2 euros et enfin celui des pi\u00e8ces de 1 euros. Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; rendu(13)\n[2, 1, 1]\n&gt;&gt;&gt; rendu(64)\n[12, 2, 0]\n&gt;&gt;&gt; rendu(89)\n[17, 2, 0]\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def rendu(somme_a_rendre):\n    pieces = [5, 2, 1]\n    retour = [0, 0, 0]\n    reste_a_rendre = somme_a_rendre\n    for i in range(3):\n        retour[i] = reste_a_rendre // pieces[i]\n        reste_a_rendre = reste_a_rendre % pieces[i]\n    return retour\n</code></pre> <p>\u00e0 noter une erreur dans la version officielle, sur la m\u00e9thode <code>enfile()</code> </p> <p>Exercice 06.2</p> \u00c9nonc\u00e9 \ud83d\udd12Correction \ud83d\udd13 <p>On veut \u00e9crire une classe pour g\u00e9rer une file \u00e0 l\u2019aide d\u2019une liste cha\u00een\u00e9e. On dispose d\u2019une classe <code>Maillon</code> permettant la cr\u00e9ation d\u2019un maillon de la cha\u00eene, celui-ci \u00e9tant constitu\u00e9 d\u2019une valeur et d\u2019une r\u00e9f\u00e9rence au maillon suivant de la cha\u00eene : \ud83d\udc0d Script Python<pre><code>class Maillon :\n    \n    def __init__(self,v) :\n        self.valeur = v\n        self.suivant = None\n</code></pre> Compl\u00e9ter la classe <code>File suivante</code> o\u00f9 l\u2019attribut <code>dernier_file</code> contient le maillon correspondant \u00e0 l\u2019\u00e9l\u00e9ment arriv\u00e9 en dernier dans la file : \ud83d\udc0d Script Python<pre><code>class File :\n    \n    def __init__(self) :\n        self.dernier_file = None\n    \n    def enfile(self,element) :\n        nouveau_maillon = Maillon(...)\n        nouveau_maillon.suivant = self.dernier_file\n        self.dernier_file = ...\n    \n    def est_vide(self) :\n        return self.dernier_file == None\n    \n    def affiche(self) :\n        maillon = self.dernier_file\n        while maillon != ... :\n            print(maillon.valeur)\n            maillon = ...\n    \n    def defile(self) :\n        if not self.est_vide() :\n            if self.dernier_file.suivant == None :\n                resultat = self.dernier_file.valeur\n                self.dernier_file = None\n                return resultat\n            maillon = ...\n            while maillon.suivant.suivant != None :\n                maillon = maillon.suivant\n            resultat = ...\n            maillon.suivant = None\n            return resultat\n        return None\n</code></pre> On pourra tester le fonctionnement de la classe en utilisant les commandes suivantes dans la console Python : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; F = File()\n&gt;&gt;&gt; F.est_vide()\nTrue\n&gt;&gt;&gt; F.enfile(2)\n&gt;&gt;&gt; F.affiche()\n2\n&gt;&gt;&gt; F.est_vide()\nFalse\n&gt;&gt;&gt; F.enfile(5)\n&gt;&gt;&gt; F.enfile(7)\n&gt;&gt;&gt; F.affiche()\n7\n5\n2\n&gt;&gt;&gt; F.defile()\n2\n&gt;&gt;&gt; F.defile()\n5\n&gt;&gt;&gt; F.affiche()\n7\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>class Maillon :\n    \n    def __init__(self,v) :\n        self.valeur = v\n        self.suivant = None\n\nclass File :\n    \n    def __init__(self) :\n        self.dernier_file = None\n    \n    def enfile(self,element) :\n        nouveau_maillon = Maillon(element)\n        nouveau_maillon.suivant =  self.dernier_file\n        self.dernier_file = nouveau_maillon\n    \n    def est_vide(self) :\n        return self.dernier_file == None\n    \n    def affiche(self) :\n        maillon = self.dernier_file\n        while maillon != None :\n            print(maillon.valeur)\n            maillon = maillon.suivant\n    \n    def defile(self) :\n        if not self.est_vide() :\n            if self.dernier_file.suivant == None :\n                resultat = self.dernier_file.valeur\n                self.dernier_file = None\n                return resultat\n            maillon = self.dernier_file\n            while maillon.suivant.suivant != None :\n                maillon = maillon.suivant\n            resultat = maillon.suivant.valeur\n            maillon.suivant = None\n            return resultat\n        return None\n</code></pre>"},{"location":"cours/Epreuve_pratique/EP.html#sujet-07","title":"Sujet 07 \u270f\ufe0f","text":"<p>Exercice 07.1</p> \u00c9nonc\u00e9 \ud83d\udd12Correction \ud83d\udd13 <p>On s\u2019int\u00e9resse \u00e0 la suite d\u2019entiers d\u00e9finie par  <code>U1 = 1</code>, <code>U2 = 1</code> et, pour tout entier naturel <code>n</code>, par <code>Un+2 = Un+1 + Un</code>.</p> <p>Elle s\u2019appelle la suite de Fibonacci.</p> <p>\u00c9crire la fonction <code>fibonacci</code> qui prend un entier <code>n &gt; 0</code> et qui renvoie l\u2019\u00e9l\u00e9ment d\u2019indice <code>n</code> de cette suite.</p> <p>On utilisera une programmation dynamique (pas de r\u00e9cursivit\u00e9). Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; fibonacci(1)\n1\n&gt;&gt;&gt; fibonacci(2)\n1\n&gt;&gt;&gt; fibonacci(25)\n75025\n&gt;&gt;&gt; fibonacci(45)\n1134903170\n</code></pre></p> <p>On utilise un dictionnaire pour stocker au fur et \u00e0 mesure les valeurs. \ud83d\udc0d Script Python<pre><code>def fibonnaci(n):\n    d = {}\n    d[1] = 1\n    d[2] = 1\n    for k in range(3, n+1):\n        d[k] = d[k-1] + d[k-2]\n    return d[n]\n</code></pre></p> <p>Exercice 07.2</p> \u00c9nonc\u00e9 \ud83d\udd12Correction \ud83d\udd13 <p>Les variables <code>liste_eleves</code> et <code>liste_notes</code> ayant \u00e9t\u00e9 pr\u00e9alablement d\u00e9finies et \u00e9tant de m\u00eame longueur, la fonction <code>meilleures_notes</code> renvoie la note maximale qui a \u00e9t\u00e9 attribu\u00e9e, le nombre d\u2019\u00e9l\u00e8ves ayant obtenu cette note et la liste des noms de ces \u00e9l\u00e8ves.</p> <p>Compl\u00e9ter le code Python de la fonction <code>meilleures_notes</code> ci-dessous. \ud83d\udc0d Script Python<pre><code>liste_eleves = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']\nliste_notes = [1, 40, 80, 60, 58, 80, 75, 80, 60, 24]\n\ndef meilleures_notes():\n    note_maxi = 0\n    nb_eleves_note_maxi = ...\n    liste_maxi = ...\n    \n    for compteur in range(...):\n        if liste_notes[compteur] == ...:\n            nb_eleves_note_maxi = nb_eleves_note_maxi + 1\n            liste_maxi.append(liste_eleves[...])\n        if liste_notes[compteur] &gt; note_maxi:\n            note_maxi = liste_notes[compteur]\n            nb_eleves_note_maxi = ...\n            liste_maxi = [...]\n    \n    return (note_maxi,nb_eleves_note_maxi,liste_maxi)\n</code></pre> Une fois compl\u00e9t\u00e9, le code ci-dessus donne \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; meilleures_notes()\n(80, 3, ['c', 'f', 'h'])\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>liste_eleves = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']\nliste_notes = [1, 40, 80, 60, 58, 80, 75, 80, 60, 24]\n\ndef meilleures_notes():\n    note_maxi = 0\n    nb_eleves_note_maxi = 0\n    liste_maxi = []\n    \n    for compteur in range(len(liste_eleves)):\n        if liste_notes[compteur] == note_maxi:\n            nb_eleves_note_maxi = nb_eleves_note_maxi + 1\n            liste_maxi.append(liste_eleves[compteur])\n        if liste_notes[compteur] &gt; note_maxi:\n            note_maxi = liste_notes[compteur]\n            nb_eleves_note_maxi = 1\n            liste_maxi = [liste_eleves[compteur]]\n    \n    return (note_maxi,nb_eleves_note_maxi,liste_maxi)\n</code></pre>"},{"location":"cours/Epreuve_pratique/EP.html#sujet-08","title":"Sujet 08 \u270f\ufe0f","text":"<p>Exercice 08.1</p> \u00c9nonc\u00e9 \ud83d\udd12Correction \ud83d\udd13 <p>\u00c9crire une fonction <code>recherche</code> qui prend en param\u00e8tres <code>caractere</code>, un caract\u00e8re, et <code>mot</code>, une cha\u00eene de caract\u00e8res, et qui renvoie le nombre d\u2019occurrences de <code>caractere</code> dans <code>mot</code>, c\u2019est-\u00e0-dire le nombre de fois o\u00f9 <code>caractere</code> appara\u00eet dans <code>mot</code>.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche('e', \"sciences\")\n2\n&gt;&gt;&gt; recherche('i', \"mississippi\")\n4\n&gt;&gt;&gt; recherche('a', \"mississippi\")\n0\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def recherche(caractere, mot):\n    somme = 0\n    for lettre in mot:\n        if lettre == caractere:\n            somme += 1\n    return somme\n</code></pre> <p>Exercice 08.2</p> \u00c9nonc\u00e9 \ud83d\udd12Correction \ud83d\udd13 <p>On s\u2019int\u00e9resse \u00e0 un algorithme r\u00e9cursif qui permet de rendre la monnaie \u00e0 partir d\u2019une liste donn\u00e9e de valeurs de pi\u00e8ces et de billets - le syst\u00e8me mon\u00e9taire est donn\u00e9 sous forme d\u2019une liste <code>pieces=[100, 50, 20, 10, 5, 2, 1]</code> - (on supposera qu\u2019il n\u2019y a pas de limitation quant \u00e0 leur nombre), on cherche \u00e0 donner la liste de pi\u00e8ces \u00e0 rendre pour une somme donn\u00e9e en argument.</p> <p>Compl\u00e9ter le code Python ci-dessous de la fonction <code>rendu_glouton</code> qui impl\u00e9mente cet algorithme et renvoie la liste des pi\u00e8ces \u00e0 rendre. \ud83d\udc0d Script Python<pre><code>pieces = [100, 50, 20, 10, 5, 2, 1]\n\ndef rendu_glouton(arendre, solution=[], i=0):\n    if arendre == 0:\n        return ...\n    p = pieces[i]\n    if p &lt;= ... :\n        solution.append(...)\n        return rendu_glouton(arendre - p, solution,i)\n    else :\n        return rendu_glouton(arendre, solution, ...)\n</code></pre> On devra obtenir : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt;rendu_glouton(68, [], 0)\n[50, 10, 5, 2, 1]\n&gt;&gt;&gt;rendu_glouton(291, [], 0)\n[100, 100, 50, 20, 20, 1]\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>pieces = [100, 50, 20, 10, 5, 2, 1]\ndef rendu_glouton(arendre, solution=[], i=0):\n    if arendre == 0:\n        return solution\n    p = pieces[i]\n    if p &lt;= arendre :\n        solution.append(p)\n        return rendu_glouton(arendre-p, solution,i)\n    else :\n        return rendu_glouton(arendre, solution, i+1)\n</code></pre>"},{"location":"cours/Epreuve_pratique/EP.html#sujet-09","title":"Sujet 09 \u270f\ufe0f","text":"<p>Exercice 09.1</p> \u00c9nonc\u00e9 \ud83d\udd12Correction \ud83d\udd13 <p>Soit le couple (<code>note</code>,<code>coefficient</code>) :  <ul> <li><code>note</code> est un nombre de type flottant (<code>float</code>) compris entre 0 et 20 ;</li> <li><code>coefficient</code> est un nombre entier positif.</li> </ul> <p> Les r\u00e9sultats aux \u00e9valuations d'un \u00e9l\u00e8ve sont regroup\u00e9s dans une liste compos\u00e9e de couples (<code>note</code>, <code>coefficient</code>).</p> <p>\u00c9crire une fonction <code>moyenne</code> qui renvoie la moyenne pond\u00e9r\u00e9e de cette liste donn\u00e9e en param\u00e8tre.  </p> <p>Par exemple, l\u2019expression <code>moyenne([(15, 2), (9, 1), (12, 3)])</code> devra renvoyer le r\u00e9sultat du calcul suivant :</p> <p> \\(\\small{\\dfrac{2 \\times 15 + 1 \\times 9 + 3 \\times 12 }{2+1+3}=12,5}\\) </p> \ud83d\udc0d Script Python<pre><code>def moyenne(tab):\n    somme_notes = 0\n    somme_coeffs = 0\n    for devoir in tab:\n        note = devoir[0]\n        coeff = devoir[1]\n        somme_notes += note * coeff\n        somme_coeffs += coeff\n    return somme_notes / somme_coeffs\n</code></pre> <p>Exercice 09.2</p> \u00c9nonc\u00e9 \ud83d\udd12Correction \ud83d\udd13 <p>On cherche \u00e0 d\u00e9terminer les valeurs du triangle de Pascal. Dans ce tableau de forme triangulaire, chaque ligne commence et se termine par le nombre 1. Par ailleurs, la valeur qui occupe une case situ\u00e9e \u00e0 l\u2019int\u00e9rieur du tableau s\u2019obtient en ajoutant les valeurs des deux cases situ\u00e9es juste au-dessus, comme l\u2019indique la figure suivante :</p> <p></p> <p>Compl\u00e9ter la fonction <code>pascal</code> ci-apr\u00e8s. Elle doit renvoyer une liste correspondant au triangle de Pascal de la ligne <code>1</code> \u00e0 la ligne <code>n</code> o\u00f9 <code>n</code> est un nombre entier sup\u00e9rieur ou \u00e9gal \u00e0 <code>2</code> (le tableau sera contenu dans la variable <code>C</code>). La variable <code>Ck</code> doit, quant \u00e0 elle, contenir, \u00e0 l\u2019\u00e9tape num\u00e9ro <code>k</code>, la <code>k</code>-i\u00e8me ligne du tableau. \ud83d\udc0d Script Python<pre><code>def pascal(n):\n    C= [[1]]\n    for k in range(1,...):\n        Ck = [...]\n        for i in range(1,k):\n            Ck.append(C[...][i-1]+C[...][...] )\n        Ck.append(...)\n        C.append(Ck)\n    return C\n</code></pre> Pour <code>n = 4</code>, voici ce qu'on devra obtenir : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; pascal(4)\n[[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]\n</code></pre> Pour <code>n = 5</code>, voici ce qu'on devra obtenir : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; pascal(5)\n[[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1], [1, 5, 10, 10, 5, 1]]\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def pascal(n):\n    C = [[1]]\n    for k in range(1,n+1):\n        Ck = [1]\n        for i in range(1,k):\n            Ck.append(C[k-1][i-1]+C[k-1][i] )\n        Ck.append(1)\n        C.append(Ck)\n    return C\n</code></pre>"},{"location":"cours/Epreuve_pratique/EP.html#sujet-10","title":"Sujet 10 \u270f\ufe0f","text":"<p>Exercice 10.1</p> \u00c9nonc\u00e9 \ud83d\udd12Correction \ud83d\udd13 <p>\u00c9crire une fonction <code>maxi</code> qui prend en param\u00e8tre une liste <code>tab</code> de nombres entiers et renvoie un couple donnant le plus grand \u00e9l\u00e9ment de cette liste, ainsi que l\u2019indice de la premi\u00e8re apparition de ce maximum dans la liste.</p> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; maxi([1, 5, 6, 9, 1, 2, 3, 7, 9, 8])\n(9, 3)\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def maxi(tab):\n    val_max = tab[0]\n    pos_max = 0\n    for i in range(len(tab)):\n        if tab[i] &gt; val_max:\n            val_max = tab[i]\n            pos_max = i\n    return (val_max, pos_max)\n</code></pre> <p>Exercice 10.2</p> \u00c9nonc\u00e9 \ud83d\udd12Correction \ud83d\udd13 <p>Cet exercice utilise des piles qui seront repr\u00e9sent\u00e9es en Python par des listes (type <code>list</code>). On rappelle que l\u2019expression <code>T1 = list(T)</code> fait une copie de <code>T</code> ind\u00e9pendante de <code>T</code>, que l\u2019expression <code>x = T.pop()</code> enl\u00e8ve le sommet de la pile <code>T</code> et le place dans la variable <code>x</code> et, enfin, que l\u2019expression <code>T.append(v)</code> place la valeur <code>v</code> au sommet de la pile <code>T</code>.</p> <p>Compl\u00e9ter le code Python de la fonction <code>positif</code> ci-dessous qui prend une pile <code>T</code> de nombres entiers en param\u00e8tre et qui renvoie la pile des entiers positifs dans le m\u00eame ordre, sans modifier la variable <code>T</code>. \ud83d\udc0d Script Python<pre><code>def positif(T):\n    T2 = ...(T)\n    T3 = ...\n    while T2 != []:\n        x = ...\n        if ... &gt;= 0:\n            T3.append(...)\n    T2 = []\n    while T3 != ...:\n        x = T3.pop()\n        ...\n    print('T = ',T)\n    return T2\n</code></pre> Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; positif([-1, 0, 5, -3, 4, -6, 10, 9, -8])\n[0, 5, 4, 10, 9]\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def positif(T):\n    T2 = list(T)\n    T3 = []\n    while T2 != []:\n        x = T2.pop()\n        if x &gt;= 0:\n            T3.append(x)\n    T2 = [] # &lt;- NB : cette ligne est inutile\n    while T3 != []:\n        x = T3.pop()\n        T2.append(x)\n    print('T = ',T)\n    return T2\n</code></pre>"},{"location":"cours/Epreuve_pratique/EP.html#sujet-11","title":"Sujet 11 \u270f\ufe0f","text":"<p>Exercice 11.1</p> \u00c9nonc\u00e9 \ud83d\udd12Correction \ud83d\udd13 <p>\u00c9crire une fonction <code>conv_bin</code> qui prend en param\u00e8tre un entier positif <code>n</code> et renvoie un couple (<code>b, bit)</code> o\u00f9 :  <ul> <li><code>b</code> est une liste d'entiers correspondant \u00e0 la repr\u00e9sentation binaire de <code>n</code>;</li> <li><code>bit</code> correspond aux nombre de bits qui constituent <code>b</code>.</li> </ul> <p> Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; conv_bin(9)\n([1, 0, 0, 1], 4)\n</code></pre> Aide :  <ul> <li>l'op\u00e9rateur <code>//</code> donne le quotient de la division euclidienne : <code>5 // 2</code> donne <code>2</code> ;</li> <li>l'op\u00e9rateur <code>%</code> donne le reste de la division euclidienne :<code>5 % 2</code> donne <code>1</code> ;</li> <li><code>append</code> est une m\u00e9thode qui ajoute un \u00e9l\u00e9ment \u00e0 une liste existante : Soit <code>T = [5, 2, 4]</code>, alors <code>T.append(10)</code> ajoute <code>10</code> \u00e0 la liste <code>T</code>. Ainsi, <code>T</code> devient <code>[5, 2, 4, 10]</code>.</li> <li><code>reverse</code> est une m\u00e9thode qui renverse les \u00e9l\u00e9ments d'une liste. Soit <code>T = [5, 2, 4, 10]</code>. Apr\u00e8s <code>T.reverse()</code>, la liste devient <code>[10, 4, 2, 5]</code>.</li> </ul> <p> On remarquera qu\u2019on r\u00e9cup\u00e8re la repr\u00e9sentation binaire d\u2019un entier <code>n</code> en partant de la gauche en appliquant successivement les instructions : <code>b = n % 2</code> <code>n = n // 2</code> r\u00e9p\u00e9t\u00e9es autant que n\u00e9cessaire.</p> \ud83d\udc0d Script Python<pre><code>def conv_bin(n):\n    b = []\n    bits = 0\n    while n != 0:\n        b.append(n % 2)\n        bits += 1\n        n = n // 2\n    b.reverse()\n    return (b, bits)\n</code></pre> <p>Exercice 11.2</p> \u00c9nonc\u00e9 \ud83d\udd12Correction \ud83d\udd13 <p>La fonction <code>tri_bulles</code> prend en param\u00e8tre une liste <code>T</code> d\u2019entiers non tri\u00e9s et renvoie la liste tri\u00e9e par ordre croissant.</p> <p>Compl\u00e9ter le code Python ci-dessous qui impl\u00e9mente la fonction <code>tri_bulles</code>. \ud83d\udc0d Script Python<pre><code>def tri_bulles(T):\n    n = len(T)\n    for i in range(...,...,-1):\n        for j in range(i):\n            if T[j] &gt; T[...]:\n                ... = T[j]\n                T[j] = T[...]\n                T[j+1] = temp\n    return T\n</code></pre> \u00c9crire une autre version de l\u2019algorithme avec \ud83d\udc0d Script Python<pre><code>for i in range(n-1):\n</code></pre> en lieu et place de la troisi\u00e8me ligne du code pr\u00e9c\u00e9dent.</p> \ud83d\udc0d Script Python<pre><code>def tri_bulles(T):\n    n = len(T)\n    for i in range(n-1,0,-1):\n        for j in range(i):\n            if T[j] &gt; T[j+1]:\n                temp = T[j]\n                T[j] = T[j+1]\n                T[j+1] = temp\n    return T\n#version 2\ndef tri_bulles(T):\n    n = len(T)\n    for i in range(n-1):\n        for j in range(n-1,i,-1):\n            if T[j] &lt; T[j-1]:\n                temp = T[j]\n                T[j] = T[j-1]\n                T[j-1] = temp\n    return T\n</code></pre>"},{"location":"cours/Epreuve_pratique/EP.html#sujet-12","title":"Sujet 12 \u270f\ufe0f","text":"<p>Cet exercice est le m\u00eame que le 10.1...  \ud83e\udd37</p> <p>Exercice 12.1</p> \u00c9nonc\u00e9 \ud83d\udd12Correction \ud83d\udd13 <p>\u00c9crire une fonction <code>maxi</code> qui prend en param\u00e8tre une liste <code>tab</code> de nombres entiers et renvoie un couple donnant le plus grand \u00e9l\u00e9ment de cette liste, ainsi que l\u2019indice de la premi\u00e8re apparition de ce maximum dans la liste.  </p> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; maxi([1, 5, 6, 9, 1, 2, 3, 7, 9, 8])\n(9, 3)\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def maxi(tab):\n    val_max = tab[0]\n    pos_max = 0\n    for i in range(len(tab)):\n        if tab[i] &gt; val_max:\n            val_max = tab[i]\n            pos_max = i\n    return (val_max, pos_max)\n</code></pre> <p>Exercice 12.2</p> \u00c9nonc\u00e9 \ud83d\udd12Correction \ud83d\udd13 <p>La fonction <code>recherche</code> prend en param\u00e8tres deux chaines de caract\u00e8res <code>gene</code> et <code>seq_adn</code> et renvoie <code>True</code> si on retrouve <code>gene</code> dans <code>seq_adn</code> et <code>False</code> sinon.</p> <p>Compl\u00e9ter le code Python ci-dessous pour qu\u2019il impl\u00e9mente la fonction <code>recherche</code>. \ud83d\udc0d Script Python<pre><code>def recherche(gene, seq_adn):\n    n = len(seq_adn)\n    g = len(gene)\n    i = ...\n    trouve = False\n    while i &lt; ... and trouve == ... :\n        j = 0\n        while j &lt; g and gene[j] == seq_adn[i+j]:\n            ...\n        if j == g:\n            trouve = True\n        ...\n    return trouve\n</code></pre> Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche(\"AATC\", \"GTACAAATCTTGCC\")\nTrue\n&gt;&gt;&gt; recherche(\"AGTC\", \"GTACAAATCTTGCC\")\nFalse\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def recherche(gene, seq_adn):\n    n = len(seq_adn)\n    g = len(gene)\n    i = 0\n    trouve = False\n    while i &lt; n-g and trouve == False :\n        j = 0\n        while j &lt; g and gene[j] == seq_adn[i+j]:\n            j += 1\n        if j == g:\n            trouve = True\n        i += 1\n    return trouve\n</code></pre>"},{"location":"cours/Epreuve_pratique/EP.html#sujet-13","title":"Sujet 13 \u270f\ufe0f","text":"<p>Exercice 13.1</p> \u00c9nonc\u00e9 \ud83d\udd12Correction \ud83d\udd13 <p>\u00c9crire une fonction <code>tri_selection</code> qui prend en param\u00e8tre une liste <code>tab</code> de nombres entiers et qui renvoie le tableau tri\u00e9 par ordre croissant. On utilisera l\u2019algorithme suivant :  <ul> <li>on recherche le plus petit \u00e9l\u00e9ment du tableau, et on l'\u00e9change avec l'\u00e9l\u00e9ment d'indice <code>0</code> ;</li> <li>on recherche le second plus petit \u00e9l\u00e9ment du tableau, et on l'\u00e9change avec l'\u00e9l\u00e9ment d'indice <code>1</code> ;</li> <li>on continue de cette fa\u00e7on jusqu'\u00e0 ce que le tableau soit enti\u00e8rement tri\u00e9.</li> </ul> <p> Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; tri_selection([1, 52, 6, -9, 12])\n[-9, 1, 6, 12, 52]\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def tri_selection(tab):\n    for i in range(len(tab)-1):\n        indice_min = i\n        for j in range(i+1, len(tab)):\n            if tab[j] &lt; tab[indice_min]:\n                indice_min = j\n        tab[i], tab[indice_min] = tab[indice_min], tab[i]\n    return tab\n</code></pre> <p>Exercice 13.2</p> \u00c9nonc\u00e9 \ud83d\udd12Correction \ud83d\udd13 <p>Le jeu du \u00ab plus ou moins \u00bb consiste \u00e0 deviner un nombre entier choisi entre 1 et 99. Un \u00e9l\u00e8ve de NSI d\u00e9cide de le coder en langage Python de la mani\u00e8re suivante :  <ul> <li>le programme g\u00e9n\u00e8re un nombre entier al\u00e9atoire compris entre 1 et 99 ;</li> <li>si la proposition de l\u2019utilisateur est plus petite que le nombre cherch\u00e9, l\u2019utilisateur en est averti. Il peut alors en tester un autre ;</li> <li>si la proposition de l\u2019utilisateur est plus grande que le nombre cherch\u00e9, l\u2019utilisateur en est averti. Il peut alors en tester un autre ;</li> <li>si l\u2019utilisateur trouve le bon nombre en 10 essais ou moins, il gagne ;</li> <li>si l\u2019utilisateur a fait plus de 10 essais sans trouver le bon nombre, il perd.</li> </ul> <p> La fonction <code>randint</code> est utilis\u00e9e. Si <code>a</code> et <code>b</code> sont des entiers, <code>randint(a,b)</code> renvoie un nombre entier compris entre <code>a</code> et <code>b</code>.</p> <p>Compl\u00e9ter le code ci-dessous et le tester : \ud83d\udc0d Script Python<pre><code>from random import randint\n\ndef plus_ou_moins():\n    nb_mystere = randint(1,...)\n    nb_test = int(input(\"Proposez un nombre entre 1 et 99 : \"))\n    compteur = ...\n    while nb_mystere != ... and compteur &lt; ... :\n        compteur = compteur + ...\n        if nb_mystere ... nb_test:\n            nb_test = int(input(\"Trop petit ! Testez encore : \"))\n        else:\n            nb_test = int(input(\"Trop grand ! Testez encore : \"))\n    if nb_mystere == nb_test:\n        print (\"Bravo ! Le nombre \u00e9tait \",...)\n        print(\"Nombre d'essais: \",...)\n    else:\n        print (\"Perdu ! Le nombre \u00e9tait \",...)\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>from random import randint\n\ndef plus_ou_moins():\n    nb_mystere = randint(1,100)\n    nb_test = int(input('Proposez un nombre entre 1 et 99 : '))\n    compteur = 0\n    while nb_mystere != nb_test and compteur &lt; 10 :\n        compteur = compteur + 1\n        if nb_mystere &gt; nb_test:\n            nb_test = int(input('Trop petit ! Testez encore : '))\n        else:\n            nb_test = int(input('Trop grand ! Testez encore : '))\n    if nb_mystere == nb_test:\n        print ('Bravo ! Le nombre \u00e9tait ', nb_mystere)\n        print('Nombre d essais: ', compteur)\n    else:\n        print ('Perdu ! Le nombre \u00e9tait ', nb_mystere)\n</code></pre>"},{"location":"cours/Epreuve_pratique/EP.html#sujet-14","title":"Sujet 14 \u270f\ufe0f","text":"<p>Exercice 14.1</p> \u00c9nonc\u00e9 \ud83d\udd12Correction \ud83d\udd13 <p>\u00c9crire une fonction <code>recherche</code> qui prend en param\u00e8tres <code>elt</code> un nombre et <code>tab</code> un tableau de nombres, et qui renvoie le tableau des indices de <code>elt</code> dans <code>tab</code> si <code>elt</code> est dans <code>tab</code> et le tableau vide <code>[]</code> sinon.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche(3, [3, 2, 1, 3, 2, 1])\n[0, 3]\n&gt;&gt;&gt; recherche(4, [1, 2, 3])\n[]\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def recherche(elt, tab):\n    tab_indices = []\n    for i in range(len(tab)):\n        if tab[i] == elt:\n            tab_indices.append(i)\n    return tab_indices        \n</code></pre> <p>Exercice 14.2</p> \u00c9nonc\u00e9 \ud83d\udd12Correction \ud83d\udd13 <p>Un professeur de NSI d\u00e9cide de g\u00e9rer les r\u00e9sultats de sa classe sous la forme d\u2019un dictionnaire :  <ul> <li>les clefs sont les noms des \u00e9l\u00e8ves ;</li> <li>les valeurs sont des dictionnaires dont les clefs sont les types d\u2019\u00e9preuves et les valeurs sont les notes obtenues associ\u00e9es \u00e0 leurs coefficients.</li> </ul> <p> Avec : \ud83d\udc0d Script Python<pre><code>resultats = {'Dupont': { 'DS1': [15.5, 4], 'DM1': [14.5, 1], 'DS2': [13, 4], 'PROJET1': [16, 3], 'DS3': [14, 4]},\n             'Durand': { 'DS1': [6 , 4], 'DM1': [14.5, 1], 'DS2': [8, 4], 'PROJET1' :[9, 3], 'IE1': [7, 2], 'DS3': [8, 4], 'DS4': [15, 4]}}\n</code></pre> L\u2019\u00e9l\u00e8ve dont le nom est Durand a ainsi obtenu au DS2 la note de 8 avec un coefficient 4.</p> <p>Le professeur cr\u00e9e une fonction <code>moyenne</code> qui prend en param\u00e8tre le nom d\u2019un de ces \u00e9l\u00e8ves et lui renvoie sa moyenne arrondie au dixi\u00e8me.</p> <p>Compl\u00e9ter le code du professeur ci-dessous : \ud83d\udc0d Script Python<pre><code>def moyenne(nom):\n    if nom in ...:\n        notes = resultats[nom]\n        total_points = ...\n        total_coefficients = ...\n        for ... in notes.values():\n            note , coefficient = valeurs\n            total_points = total_points + ... * coefficient\n            total_coefficients = ... + coefficient\n        return round(... / total_coefficients, 1)\n    else:\n        return -1\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>resultats = {'Dupont': { 'DS1': [15.5, 4], 'DM1': [14.5, 1], 'DS2': [13, 4], 'PROJET1': [16, 3], 'DS3': [14, 4]},\n             'Durand': { 'DS1': [6 , 4], 'DM1': [14.5, 1], 'DS2': [8, 4], 'PROJET1' :[9, 3], 'IE1': [7, 2], 'DS3': [8, 4], 'DS4': [15, 4]}}\n\ndef moyenne(nom):\n    if nom in resultats:\n        notes = resultats[nom]\n        total_points = 0\n        total_coefficients = 0\n        for valeurs in notes.values():\n            note , coefficient = valeurs\n            total_points = total_points + note * coefficient\n            total_coefficients = total_coefficients + coefficient\n        return round(total_points / total_coefficients, 1)\n    else:\n        return -1\n</code></pre>"},{"location":"cours/Epreuve_pratique/EP.html#sujet-15","title":"Sujet 15 \u270f\ufe0f","text":"<p>Exercice 15.1</p> \u00c9nonc\u00e9 \ud83d\udd12Correction \ud83d\udd13 <p>\u00c9crire une fonction <code>rechercheMinMax</code> qui prend en param\u00e8tre un tableau de nombres non tri\u00e9s <code>tab</code>, et qui renvoie la plus petite et la plus grande valeur du tableau sous la forme d\u2019un dictionnaire \u00e0 deux cl\u00e9s <code>'min'</code> et <code>'max'</code>. </p> <p>Les tableaux seront repr\u00e9sent\u00e9s sous forme de liste Python.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; tableau = [0, 1, 4, 2, -2, 9, 3, 1, 7, 1]\n&gt;&gt;&gt; resultat = rechercheMinMax(tableau)\n&gt;&gt;&gt; resultat\n{'min': -2, 'max': 9}\n&gt;&gt;&gt; tableau = []\n&gt;&gt;&gt; resultat = rechercheMinMax(tableau)\n&gt;&gt;&gt; resultat\n{'min': None, 'max': None}\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def rechercheMinMax(tab):\n    d = {}\n    d['min'] = None\n    d['max'] = None\n    for val in tab:\n        if val &lt; d['min']:\n            d['min'] = val\n        if val &gt; d['max']:\n            d['max'] = val\n    return d\n</code></pre> <p>Exercice 15.2</p> \u00c9nonc\u00e9 \ud83d\udd12Correction \ud83d\udd13 <p>On dispose d\u2019un programme permettant de cr\u00e9er un objet de type <code>PaquetDeCarte</code>, selon les \u00e9l\u00e9ments indiqu\u00e9s dans le code ci-dessous.</p> <p>Compl\u00e9ter ce code aux endroits indiqu\u00e9s par <code>#A compl\u00e9ter</code>, puis ajouter des assertions dans l\u2019initialiseur de <code>Carte</code>, ainsi que dans la m\u00e9thode <code>getCarteAt()</code>. \ud83d\udc0d Script Python<pre><code>class Carte:\n\"\"\"Initialise Couleur (entre 1 \u00e0 4), et Valeur (entre 1 \u00e0 13)\"\"\"\n    def __init__(self, c, v):\n        self.Couleur = c\n        self.Valeur = v\n\"\"\"Renvoie le nom de la Carte As, 2, ... 10, Valet, Dame, Roi\"\"\"\n    def getNom(self):\n        if (self.Valeur &gt; 1 and self.Valeur &lt; 11):\n            return str(self.Valeur)\n        elif self.Valeur == 11:\n            return \"Valet\"\n        elif self.Valeur == 12:\n            return \"Dame\"\n        elif self.Valeur == 13:\n            return \"Roi\"\n        else:\n            return \"As\"\n\"\"\"Renvoie la couleur de la Carte (parmi pique, coeur, carreau, trefle\"\"\"\n    def getCouleur(self):\n        return ['pique', 'coeur', 'carreau', 'trefle'][self.Couleur - 1]\n\nclass PaquetDeCarte:\n    \n    def __init__(self):\n        self.contenu = []\n\"\"\"Remplit le paquet de cartes\"\"\"\n    def remplir(self):\n        #A compl\u00e9ter\n\"\"\"Renvoie la Carte qui se trouve \u00e0 la position donn\u00e9e\"\"\"\n    def getCarteAt(self, pos):\n        #A compl\u00e9ter\n</code></pre> Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; unPaquet = PaquetDeCarte()\n&gt;&gt;&gt; unPaquet.remplir()\n&gt;&gt;&gt; uneCarte = unPaquet.getCarteAt(20)\n&gt;&gt;&gt; print(uneCarte.getNom() + \" de \" + uneCarte.getCouleur())\n</code></pre></p> <p>Attention, le code propos\u00e9 ne respecte pas les standards de notation :  <ul> <li>il ne faut pas de majuscules sur les noms des attributs ;</li> <li>la docstring se place \u00e0 l'int\u00e9rieur de la fonction et non au-dessus.</li> </ul> <p> \ud83d\udc0d Script Python<pre><code>class Carte:\n\"\"\"Initialise Couleur (entre 1 \u00e0 4), et Valeur (entre 1 \u00e0 13)\"\"\"\n    def __init__(self, c, v):\n        assert c in range(1,5)\n        assert v in range(1,14)\n        self.Couleur = c\n        self.Valeur = v\n\"\"\"Renvoie le nom de la Carte As, 2, ... 10, Valet, Dame, Roi\"\"\"\n    def getNom(self):\n        if (self.Valeur &gt; 1 and self.Valeur &lt; 11):\n            return str( self.Valeur)\n        elif self.Valeur == 11:\n            return \"Valet\"\n        elif self.Valeur == 12:\n            return \"Dame\"\n        elif self.Valeur == 13:\n            return \"Roi\"\n        else:\n            return \"As\"\n\"\"\"Renvoie la couleur de la Carte (parmi pique, coeur, carreau, trefle\"\"\"\n    def getCouleur(self):\n        return ['pique', 'coeur', 'carreau', 'trefle'][self.Couleur]\n\nclass PaquetDeCarte:\n    \n    def __init__(self):\n        self.contenu = []\n\"\"\"Remplit le paquet de cartes\"\"\"\n    def remplir(self):\n        for nb_coul in range(1,5):\n            for val in range(1,14):\n                self.contenu.append(Carte(nb_coul, val))\n\"\"\"Renvoie la Carte qui se trouve \u00e0 la position donn\u00e9e\"\"\"\n    def getCarteAt(self, pos):\n        assert pos in range(56)\n        return self.contenu[pos]\n</code></pre></p>"},{"location":"cours/Epreuve_pratique/EP.html#sujet-16","title":"Sujet 16 \u270f\ufe0f","text":"<p>Exercice 16.1</p> \u00c9nonc\u00e9 \ud83d\udd12Correction \ud83d\udd13 <p>\u00c9crire une fonction <code>moyenne</code> qui prend en param\u00e8tre un tableau non vide de nombres flottants et qui renvoie la moyenne des valeurs du tableau. </p> <p>Les tableaux seront repr\u00e9sent\u00e9s sous forme de liste Python.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; moyenne([1.0])\n1.0\n&gt;&gt;&gt; moyenne([1.0, 2.0, 4.0])\n2.3333333333333335\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def moyenne(tab):\n    somme = 0\n    for val in tab:\n        somme += val\n    return somme / len(tab)\n</code></pre> <p>Exercice 16.2</p> \u00c9nonc\u00e9 \ud83d\udd12Correction \ud83d\udd13 <p>On consid\u00e8re la fonction <code>dec_to_bin</code> ci-dessous qui prend en param\u00e8tre un entier positif <code>a</code> en \u00e9criture d\u00e9cimale et qui renvoie son \u00e9criture binaire sous la forme d'une chaine de caract\u00e8res. \ud83d\udc0d Script Python<pre><code>def dec_to_bin(a):\n    bin_a = ...\n    a = a//2\n    while a ... :\n        bin_a = ... + bin_a\n        a = ...\n    return bin_a\n</code></pre> Compl\u00e9ter la fonction <code>dec_to_bin</code>.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; dec_to_bin(83)\n'1010011'\n&gt;&gt;&gt; dec_to_bin(127)\n'1111111'\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def dec_to_bin(a):\n    bin_a = ''\n    a = a // 2\n    while a != 0 :\n        bin_a = str(a % 2) + bin_a\n        a = a // 2\n    return bin_a\n</code></pre>"},{"location":"cours/Epreuve_pratique/EP.html#sujet-17","title":"Sujet 17 \u270f\ufe0f","text":"<p>Exercice 17.1</p> \u00c9nonc\u00e9 \ud83d\udd12Correction \ud83d\udd13 <p>\u00c9crire une fonction <code>indice_du_min</code> qui prend en param\u00e8tre un tableau de nombres non tri\u00e9 <code>tab</code>, et qui renvoie l'indice de la premi\u00e8re occurrence du minimum de ce tableau. </p> <p>Les tableaux seront repr\u00e9sent\u00e9s sous forme de liste Python.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; indice_du_min([5])\n0\n&gt;&gt;&gt; indice_du_min([2, 4, 1])\n2\n&gt;&gt;&gt; indice_du_min([5, 3, 2, 2, 4])\n2\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def indice_du_min(tab):\n    indice_min = 0\n    for i in range(len(tab)):\n        if tab[i] &lt; tab[indice_min]:\n            indice_min = i\n    return indice_min\n</code></pre> <p>Exercice 17.2</p> \u00c9nonc\u00e9 \ud83d\udd12Correction \ud83d\udd13 <p>On consid\u00e8re la fonction <code>separe</code> ci-dessous qui prend en argument un tableau <code>tab</code> dont les \u00e9l\u00e9ments sont des <code>0</code> et des <code>1</code> et qui s\u00e9pare les <code>0</code> des <code>1</code> en pla\u00e7ant les <code>0</code> en d\u00e9but de tableau et les <code>1</code> \u00e0 la suite. \ud83d\udc0d Script Python<pre><code>def separe(tab):\n    i = 0\n    j = ...\n    while i &lt; j :\n        if tab[i] == 0 :\n            i = ...\n        else :\n            tab[i], tab[j] = ...\n            j = ...\n    return tab\n</code></pre> Compl\u00e9ter la fonction <code>separe</code> ci-dessus.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; separe([1, 0, 1, 0, 1, 0, 1, 0])\n[0, 0, 0, 0, 1, 1, 1, 1]\n&gt;&gt;&gt; separe([1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0])\n[0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def separe(tab):\n    i = 0\n    j = len(tab) - 1\n    while i &lt; j :\n        if tab[i] == 0 :\n            i = i + 1\n        else :\n            tab[i], tab[j] = tab[j], tab[i]\n            j = j - 1\n    return tab\n</code></pre>"},{"location":"cours/Epreuve_pratique/EP.html#sujet-18","title":"Sujet 18 \u270f\ufe0f","text":"<p>Exercice 18.1</p> \u00c9nonc\u00e9 \ud83d\udd12Correction \ud83d\udd13 <p>\u00c9crire une fonction <code>recherche</code> qui prend en param\u00e8tres <code>elt</code> un nombre entier et <code>tab</code> un tableau de nombres entiers, et qui renvoie l\u2019indice de la premi\u00e8re occurrence de <code>elt</code> dans <code>tab</code> si <code>elt</code> est dans <code>tab</code> et <code>-1</code> sinon.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche(1, [2, 3, 4])\n-1\n&gt;&gt;&gt; recherche(1, [10, 12, 1, 56])\n2\n&gt;&gt;&gt; recherche(50, [1, 50, 1])\n1\n&gt;&gt;&gt; recherche(15, [8, 9, 10, 15])\n3\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def recherche(elt, tab):\n    for i in range(len(tab)):\n        if tab[i] == elt:\n            return i        \n    return -1         \n</code></pre> <p>Exercice 18.2</p> \u00c9nonc\u00e9 \ud83d\udd12Correction \ud83d\udd13 <p>On consid\u00e8re la fonction <code>insere</code> ci-dessous qui prend en argument un entier <code>a</code> et un tableau <code>tab</code> d'entiers tri\u00e9s par ordre croissant. </p> <p>Cette fonction ins\u00e8re la valeur <code>a</code> dans le tableau et renvoie le nouveau tableau.</p> <p>Les tableaux seront repr\u00e9sent\u00e9s sous la forme de listes python.</p> <p>Sujet l\u00e9g\u00e8rement modifi\u00e9 \ud83d\udc0d Script Python<pre><code>def insere(a, tab):\n    l = list(tab) #l contient les m\u00eames \u00e9l\u00e9ments que tab\n    l.append(a)\n    i = ...\n    while a &lt; ... and i &gt;= ...:\n        l[i+1] = ...\n        l[i] = a\n        i = ...\n    return l\n</code></pre> Compl\u00e9ter la fonction <code>insere</code> ci-dessus.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; insere(3, [1, 2, 4, 5])\n[1, 2, 3, 4, 5]\n&gt;&gt;&gt; insere(10, [1, 2, 7, 12, 14, 25])\n[1, 2, 7, 10, 12, 14, 25]\n&gt;&gt;&gt; insere(1, [2, 3, 4])\n[1, 2, 3, 4]\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def insere(a, tab):\n    l = list(tab) #l contient les m\u00eames \u00e9l\u00e9ments que tab\n    l.append(a)\n    i = len(l) - 2\n    while a &lt; l[i] and i &gt;= 0:\n        l[i+1] = l[i]\n        l[i] = a\n        i = i - 1\n    return l\n</code></pre>"},{"location":"cours/Epreuve_pratique/EP.html#sujet-19","title":"Sujet 19 \u270f\ufe0f","text":"<p>Exercice 19.1</p> \u00c9nonc\u00e9 \ud83d\udd12Correction \ud83d\udd13 <p>\u00c9crire une fonction <code>recherche</code> qui prend en param\u00e8tres un tableau <code>tab</code> de nombres entiers tri\u00e9s par ordre croissant et un nombre entier <code>n</code>, et qui effectue une recherche dichotomique du nombre entier <code>n</code> dans le tableau non vide <code>tab</code>.</p> <p>Cette fonction doit renvoyer un indice correspondant au nombre cherch\u00e9 s\u2019il est dans le tableau, <code>-1</code> sinon.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche([2, 3, 4, 5, 6], 5)\n3\n&gt;&gt;&gt; recherche([2, 3, 4, 6, 7], 5)\n-1\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def recherche(tab, n):\n    ind_debut = 0\n    ind_fin = len(tab) - 1\n    while ind_debut &lt;= ind_fin:\n        ind_milieu = (ind_debut + ind_fin) // 2\n        if tab[ind_milieu] == n:\n            return ind_milieu\n        elif tab[ind_milieu] &lt; n:\n            ind_debut = ind_milieu + 1\n        else:\n            ind_fin = ind_milieu - 1\n    return -1\n</code></pre> <p>Exercice 19.2</p> \u00c9nonc\u00e9 \ud83d\udd12Correction \ud83d\udd13 <p>Le codage de C\u00e9sar transforme un message en changeant chaque lettre en la d\u00e9calant dans l\u2019alphabet.</p> <p>Par exemple, avec un d\u00e9calage de 3, le <code>A</code> se transforme en <code>D</code>, le <code>B</code> en <code>E</code>, ..., le <code>X</code> en <code>A</code>, le <code>Y</code> en <code>B</code> et le <code>Z</code> en <code>C</code>. Les autres caract\u00e8res (<code>\u00a7</code>, <code>?</code>\u2026) ne sont pas cod\u00e9s.</p> <p>La fonction <code>position_alphabet</code> ci-dessous prend en param\u00e8tre un caract\u00e8re <code>lettre</code> et renvoie la position de <code>lettre</code> dans la cha\u00eene de caract\u00e8res <code>ALPHABET</code> s\u2019il s\u2019y trouve et <code>-1</code> sinon.</p> <p>La fonction <code>cesar</code> prend en param\u00e8tre une cha\u00eene de caract\u00e8res <code>message</code> et un nombre entier <code>decalage</code> et renvoie le nouveau message cod\u00e9 avec le codage de C\u00e9sar utilisant le d\u00e9calage <code>decalage</code>. \ud83d\udc0d Script Python<pre><code>ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\ndef position_alphabet(lettre):\n    return ALPHABET.find(lettre)\n\ndef cesar(message, decalage):\n    resultat = ''\n    for ... in message:\n        if lettre in ALPHABET:\n            indice = ( ... ) % 26\n            resultat = resultat + ALPHABET[indice]\n        else:\n            resultat = ...\n    return resultat\n</code></pre> Compl\u00e9ter la fonction <code>cesar</code>.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; cesar('BONJOUR A TOUS. VIVE LA MATIERE NSI !', 4)\n'FSRNSYV E XSYW. ZMZI PE QEXMIVI RWM !'\n&gt;&gt;&gt; cesar('GTSOTZW F YTZX. ANAJ QF RFYNJWJ SXN !', -5)\n'BONJOUR A TOUS. VIVE LA MATIERE NSI !'\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\ndef position_alphabet(lettre):\n    return ALPHABET.find(lettre)\n\ndef cesar(message, decalage):\n    resultat = ''\n    for lettre in message:\n        if lettre in ALPHABET:\n            indice = (position_alphabet(lettre) + decalage) % 26\n            resultat = resultat + ALPHABET[indice]\n        else:\n            resultat = resultat + lettre\n    return resultat\n</code></pre>"},{"location":"cours/Epreuve_pratique/EP.html#sujet-20","title":"Sujet 20 \u270f\ufe0f","text":"<p>Exercice 20.1</p> \u00c9nonc\u00e9 \ud83d\udd12Correction \ud83d\udd13 <p>On a relev\u00e9 les valeurs moyennes annuelles des temp\u00e9ratures \u00e0 Paris pour la p\u00e9riode allant de 2013 \u00e0 2019. </p> <p>Les r\u00e9sultats ont \u00e9t\u00e9 r\u00e9cup\u00e9r\u00e9s sous la forme de deux listes : l\u2019une pour les temp\u00e9ratures, l\u2019autre pour les ann\u00e9es : \ud83d\udc0d Script Python<pre><code>t_moy = [14.9, 13.3, 13.1, 12.5, 13.0, 13.6, 13.7]\nannees = [2013, 2014, 2015, 2016, 2017, 2018, 2019]\n</code></pre> \u00c9crire la fonction <code>mini</code> qui prend en param\u00e8tres le tableau <code>releve</code> des relev\u00e9s et le tableau <code>date</code> des dates et qui renvoie la plus petite valeur relev\u00e9e au cours de la p\u00e9riode et l\u2019ann\u00e9e correspondante.</p> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; mini(t_moy, annees)\n(12.5, 2016)\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>t_moy = [14.9, 13.3, 13.1, 12.5, 13.0, 13.6, 13.7]\nannees = [2013, 2014, 2015, 2016, 2017, 2018, 2019]\ndef mini(releve, date):\n    temp_mini = releve[0]\n    date_mini = date[0]\n    for i in range(len(releve)):\n        if releve[i] &lt; temp_mini:\n            temp_mini = releve[i]\n            date_mini = date[i]\n    return temp_mini, date_mini\n</code></pre> <p>Exercice 20.2</p> \u00c9nonc\u00e9 \ud83d\udd12Correction \ud83d\udd13 <p>Un mot palindrome peut se lire de la m\u00eame fa\u00e7on de gauche \u00e0 droite ou de droite \u00e0 gauche : bob, radar, et non sont des mots palindromes.</p> <p>De m\u00eame certains nombres sont eux aussi des palindromes : <code>33</code>, <code>121</code>, <code>345543</code>.</p> <p>L\u2019objectif de cet exercice est d\u2019obtenir un programme Python permettant de tester si un nombre est un nombre palindrome.</p> <p>Pour remplir cette t\u00e2che, on vous demande de compl\u00e9ter le code des trois fonctions ci- dessous sachant que la fonction <code>est_nbre_palindrome</code> s\u2019appuiera sur la fonction <code>est_palindrome</code> qui elle-m\u00eame s\u2019appuiera sur la fonction <code>inverse_chaine</code>.</p> <p>La fonction <code>inverse_chaine</code> inverse l'ordre des caract\u00e8res d'une cha\u00eene de caract\u00e8res <code>chaine</code> et renvoie la cha\u00eene invers\u00e9e.</p> <p>La fonction <code>est_palindrome</code> teste si une chaine de caract\u00e8res <code>chaine</code> est un palindrome. Elle renvoie <code>True</code> si c\u2019est le cas et <code>False</code> sinon. Cette fonction s\u2019appuie sur la fonction pr\u00e9c\u00e9dente.</p> <p>La fonction <code>est_nbre_palindrome</code> teste si un nombre <code>nbre</code> est un palindrome. Elle renvoie <code>True</code> si c\u2019est le cas et <code>False</code> sinon. Cette fonction s\u2019appuie sur la fonction pr\u00e9c\u00e9dente.</p> <p>Compl\u00e9ter le code des trois fonctions ci-dessous. \ud83d\udc0d Script Python<pre><code>def inverse_chaine(chaine):\n    result = ...\n    for caractere in chaine:\n        result = ...\n    return result\n\ndef est_palindrome(chaine):\n    inverse = inverse_chaine(chaine)\n    return ...\n    \ndef est_nbre_palindrome(nbre):\n    chaine = ...\n    return est_palindrome(chaine)\n</code></pre> Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; inverse_chaine('bac')\n'cab'\n&gt;&gt;&gt; est_palindrome('NSI')\nFalse\n&gt;&gt;&gt; est_palindrome('ISN-NSI')\nTrue\n&gt;&gt;&gt; est_nbre_palindrome(214312)\nFalse\n&gt;&gt;&gt; est_nbre_palindrome(213312)\nTrue\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def inverse_chaine(chaine):\n    result = ''\n    for caractere in chaine:\n        result = caractere + result\n    return result\n\ndef est_palindrome(chaine):\n    inverse = inverse_chaine(chaine)\n    return chaine == inverse\n\ndef est_nbre_palindrome(nbre):\n    chaine = str(nbre)\n    return est_palindrome(chaine)\n</code></pre>"},{"location":"cours/Epreuve_pratique/EP.html#sujet-21","title":"Sujet 21 \u270f\ufe0f","text":"<p>Exercice 21.1</p> \u00c9nonc\u00e9 \ud83d\udd12Correction \ud83d\udd13 <p>\u00c9crire une fonction python appel\u00e9e <code>nb_repetitions</code> qui prend en param\u00e8tres un \u00e9l\u00e9ment <code>elt</code> et une liste <code>tab</code> et renvoie le nombre de fois o\u00f9 l\u2019\u00e9l\u00e9ment appara\u00eet dans la liste.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; nb_repetitions(5, [2, 5, 3, 5, 6, 9, 5])\n3\n&gt;&gt;&gt; nb_repetitions('A', [ 'B', 'A', 'B', 'A', 'R'])\n2\n&gt;&gt;&gt; nb_repetitions(12, [1, '!', 7, 21, 36, 44])\n0\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def nb_repetitions(elt, tab):\n    nb = 0\n    for element in tab:\n        if element == elt:\n            nb += 1\n    return nb\n</code></pre> <p>Exercice 21.2</p> \u00c9nonc\u00e9 \ud83d\udd12Correction \ud83d\udd13 <p>Pour rappel, la conversion d\u2019un nombre entier positif en binaire peut s\u2019effectuer \u00e0 l\u2019aide des divisions successives comme illustr\u00e9 ici : </p> <p>Voici une fonction Python bas\u00e9e sur la m\u00e9thode des divisions successives permettant de convertir un nombre entier positif en binaire : \ud83d\udc0d Script Python<pre><code>def binaire(a):\n    bin_a = str(...)\n    a = a // 2\n    while a ... :\n        bin_a = ...(a%2) + ...\n        a = ...\n    return bin_a\n</code></pre> Compl\u00e9ter la fonction <code>binaire</code>. Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; binaire(0)\n'0'\n&gt;&gt;&gt; binaire(77)\n'1001101'\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def binaire(a):\n    bin_a = str(a%2)\n    a = a // 2\n    while a != 0 :\n        bin_a = str(a % 2) + bin_a\n        a = a // 2\n    return bin_a\n</code></pre>"},{"location":"cours/Epreuve_pratique/EP.html#sujet-22","title":"Sujet 22 \u270f\ufe0f","text":"<p>Exercice 22.1</p> \u00c9nonc\u00e9 \ud83d\udd12Correction \ud83d\udd13 <p>\u00c9crire en langage Python une fonction <code>recherche</code> prenant comme param\u00e8tres une variable <code>a</code> de type num\u00e9rique (<code>float</code> ou <code>int</code>) et un tableau <code>t</code> (type <code>list</code>) et qui renvoie le nombre d'occurrences de <code>a</code> dans <code>t</code>.</p> <p>Exemples d'utilisations de la fonction recherche : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche(5, [])\n0\n&gt;&gt;&gt; recherche(5, [-2, 3, 4, 8])\n0\n&gt;&gt;&gt; recherche(5, [-2, 3, 1, 5, 3, 7, 4])\n1\n&gt;&gt;&gt; recherche(5, [-2, 5, 3, 5, 4, 5])\n3\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def recherche(a, t):\n    nb = 0\n    for element in t:\n        if element == a:\n            nb += 1\n    return nb\n</code></pre> <p>Exercice 22.2</p> \u00c9nonc\u00e9 \ud83d\udd12Correction \ud83d\udd13 <p>La fonction <code>rendu_monnaie_centimes</code> prend en param\u00e8tres deux nombres entiers positifs <code>s_due</code> et <code>s_versee</code> et elle permet de proc\u00e9der au rendu de monnaie de la diff\u00e9rence <code>s_versee \u2013 s_due</code> pour des achats effectu\u00e9s avec le syst\u00e8me de pi\u00e8ces de la zone Euro. </p> <p>On utilise pour cela un algorithme qui commence par rendre le maximum de pi\u00e8ces de plus grandes valeurs et ainsi de suite. La fonction renvoie la liste des pi\u00e8ces qui composent le rendu.</p> <p>Toutes les sommes sont exprim\u00e9es en centimes d\u2019euros. Les valeurs possibles pour les pi\u00e8ces sont donc <code>[1, 2, 5, 10, 20, 50, 100, 200]</code>.</p> <p>Ainsi, l\u2019instruction <code>rendu_monnaie_centimes(452, 500)</code> renverra <code>[20, 20, 5, 2, 1]</code>.</p> <p>En effet, la somme \u00e0 rendre est de <code>48</code> centimes soit <code>20 + 20 + 5 + 2 + 1</code>.</p> <p>Le code de la fonction est donn\u00e9 ci-dessous : \ud83d\udc0d Script Python<pre><code>def rendu_monnaie_centimes(s_due, s_versee):\n    pieces = [1, 2, 5, 10, 20, 50, 100, 200]\n    rendu = ...\n    a_rendre = ...\n    i = len(pieces) - 1\n    while a_rendre &gt; ... :\n        if pieces[i] &lt;= a_rendre :\n            rendu.append(...)\n            a_rendre = ...\n        else :\n            i = ...\n    return rendu\n</code></pre> Compl\u00e9ter ce code pour qu'il donne : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; rendu_monnaie_centimes(700, 700)\n[]\n&gt;&gt;&gt; rendu_monnaie_centimes(112, 500)\n[200, 100, 50, 20, 10, 5, 2, 1]\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def rendu_monnaie_centimes(s_due, s_versee):\n    pieces = [1, 2, 5, 10, 20, 50, 100, 200]\n    rendu = []\n    a_rendre = s_versee - s_due\n    i = len(pieces) - 1\n    while a_rendre &gt; 0 :\n        if pieces[i] &lt;= a_rendre :\n            rendu.append(pieces[i])\n            a_rendre = a_rendre - pieces[i]\n        else :\n            i = i - 1\n    return rendu\n</code></pre>"},{"location":"cours/Epreuve_pratique/EP.html#sujet-23","title":"Sujet 23 \u270f\ufe0f","text":"<p>Exercice 23.1</p> \u00c9nonc\u00e9 \ud83d\udd12Correction \ud83d\udd13 <p>L\u2019occurrence d\u2019un caract\u00e8re dans un phrase est le nombre de fois o\u00f9 ce caract\u00e8re est pr\u00e9sent.</p> <p>Exemples :  <ul> <li>l\u2019occurrence du caract\u00e8re <code>'o'</code> dans <code>'bonjour'</code> est <code>2</code> ;</li> <li>l\u2019occurrence du caract\u00e8re <code>'b'</code> dans <code>'B\u00e9b\u00e9'</code> est <code>1</code> ;</li> <li>l\u2019occurrence du caract\u00e8re <code>'B'</code> dans <code>'B\u00e9b\u00e9'</code> est <code>1</code> ;</li> <li>l\u2019occurrence du caract\u00e8re <code>' '</code> dans <code>'Hello world !'</code> est <code>2</code>.</li> </ul> <p> On cherche les occurrences des caract\u00e8res dans une phrase. On souhaite stocker ces occurrences dans un dictionnaire dont les clefs seraient les caract\u00e8res de la phrase et les valeurs l\u2019occurrence de ces caract\u00e8res.</p> <p>Par exemple, avec la phrase <code>'Hello world !'</code>, le dictionnaire est le suivant : <code>{'H': 1,'e': 1,'l': 3,'o': 2,' ': 2,'w': 1,'r': 1,'d': 1,'!': 1}</code>.</p> <p>\u00c9crire une fonction <code>occurence_lettres</code> prenant comme param\u00e8tre une variable <code>phrase</code> de type <code>str</code>. </p> <p>Cette fonction doit renvoyer un dictionnaire de type constitu\u00e9 des occurrences des caract\u00e8res pr\u00e9sents dans la phrase.</p> \ud83d\udc0d Script Python<pre><code>def occurence_lettres(phrase):\n    occ = {}\n    for caractere in phrase:\n        if caractere in occ:\n            occ[caractere] += 1\n        else:\n            occ[caractere] = 1\n    return occ\n</code></pre> <p>Exercice 23.2</p> \u00c9nonc\u00e9 \ud83d\udd12Correction \ud83d\udd13 <p>La fonction <code>fusion</code> prend deux listes <code>L1</code>, <code>L2</code> d\u2019entiers tri\u00e9es par ordre croissant et les fusionne en une liste tri\u00e9e <code>L12</code> qu\u2019elle renvoie.</p> <p>Le code Python de la fonction est : \ud83d\udc0d Script Python<pre><code>def fusion(L1, L2):\n    n1 = len(L1)\n    n2 = len(L2)\n    L12 = [0]*(n1 + n2)\n    i1 = 0\n    i2 = 0\n    i = 0\n    while i1 &lt; n1 and ... :\n        if L1[i1] &lt; L2[i2]:\n            L12[i] = ...\n            i1 = ...\n        else:\n            L12[i] = L2[i2]\n            i2 = ...\n        i += 1\n    while i1 &lt; n1:\n        L12[i] = ...\n        i1 = i1 + 1\n        i = ...\n    while i2 &lt; n2:\n        L12[i] = ...\n        i2 = i2 + 1\n        i = ...\n    return L12\n</code></pre> Compl\u00e9ter le code. Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; fusion([1, 6, 10], [0, 7, 8, 9])\n[0, 1, 6, 7, 8, 9, 10]\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def fusion(L1, L2):\n    n1 = len(L1)\n    n2 = len(L2)\n    L12 = [0]*(n1 + n2)\n    i1 = 0\n    i2 = 0\n    i = 0\n    while i1 &lt; n1 and i2 &lt; n2 :\n        if L1[i1] &lt; L2[i2]:\n            L12[i] = L1[i1]\n            i1 = i1 + 1\n        else:\n            L12[i] = L2[i2]\n            i2 = i2 + 1\n        i += 1\n    while i1 &lt; n1:\n        L12[i] = L1[i1]\n        i1 = i1 + 1\n        i = i + 1\n    while i2 &lt; n2:\n        L12[i] = L2[i2]\n        i2 = i2 + 1\n        i = i + 1\n    return L12\n</code></pre>"},{"location":"cours/Epreuve_pratique/EP.html#sujet-24","title":"Sujet 24 \u270f\ufe0f","text":"<p>L'exercice 24.1 est le m\u00eame que le 18.1...  \ud83e\udd37</p> <p>Exercice 24.1</p> \u00c9nonc\u00e9 \ud83d\udd12Correction \ud83d\udd13 <p>\u00c9crire une fonction <code>recherche</code> qui prend en param\u00e8tres <code>elt</code> un nombre entier et <code>tab</code> un tableau de nombres entiers, et qui renvoie l\u2019indice de la premi\u00e8re occurrence de <code>elt</code> dans <code>tab</code> si <code>elt</code> est dans <code>tab</code> et <code>-1</code> sinon.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche(1, [2, 3, 4])\n-1\n&gt;&gt;&gt; recherche(1, [10, 12, 1, 56])\n2\n&gt;&gt;&gt; recherche(50, [1, 50, 1])\n1\n&gt;&gt;&gt; recherche(15, [8, 9, 10, 15])\n3\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def recherche(tab, n):\n    ind_debut = 0\n    ind_fin = len(tab) - 1\n    while ind_debut &lt;= ind_fin:\n        ind_milieu = (ind_debut + ind_fin) // 2\n        if tab[ind_milieu] == n:\n            return ind_milieu\n        elif tab[ind_milieu] &lt; n:\n            ind_debut = ind_milieu + 1\n        else:\n            ind_fin = ind_milieu - 1\n    return -1\n</code></pre> <p>Exercice 24.2</p> \u00c9nonc\u00e9 \ud83d\udd12Correction \ud83d\udd13 <p>On d\u00e9finit une classe g\u00e9rant une adresse IPv4.</p> <p>On rappelle qu\u2019une adresse IPv4 est une adresse de longueur 4 octets, not\u00e9e en d\u00e9cimale \u00e0 point, en s\u00e9parant chacun des octets par un point. On consid\u00e8re un r\u00e9seau priv\u00e9 avec une plage d\u2019adresses IP de <code>192.168.0.0</code> \u00e0 <code>192.168.0.255</code>.</p> <p>On consid\u00e8re que les adresses IP saisies sont valides.</p> <p>Les adresses IP <code>192.168.0.0</code> et <code>192.168.0.255</code> sont des adresses r\u00e9serv\u00e9es.</p> <p>Le code ci-dessous impl\u00e9mente la classe <code>AdresseIP</code>. \ud83d\udc0d Script Python<pre><code>class AdresseIP:\n    \n    def __init__(self, adresse):\n        self.adresse = ...\n    \n    def liste_octet(self):\n\"\"\"renvoie une liste de nombres entiers, la liste des octets de l'adresse IP\"\"\"\n        return [int(i) for i in self.adresse.split(\".\")]\n    \n    def est_reservee(self):\n\"\"\"renvoie True si l'adresse IP est une adresse r\u00e9serv\u00e9e, False sinon\"\"\"\n        return ... or ...\n   \n    def adresse_suivante(self):\n\"\"\"renvoie un objet de AdresseIP avec l'adresse IP qui suit l\u2019adresse self si elle existe et False sinon\"\"\"\n        if ... &lt; 254:\n            octet_nouveau = ... + ...\n            return AdresseIP('192.168.0.' + ...)\n        else:\n            return False\n</code></pre> Compl\u00e9ter le code ci-dessus et instancier trois objets : <code>adresse1</code>, <code>adresse2</code>, <code>adresse3</code> avec respectivement les arguments suivants : <code>'192.168.0.1'</code>, <code>'192.168.0.2'</code>, <code>'192.168.0.0'</code>.</p> <p>V\u00e9rifier que :  \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; adresse1.est_reservee()\nFalse\n&gt;&gt;&gt; adresse3.est_reservee()\nTrue\n&gt;&gt;&gt; adresse2.adresse_suivante().adresse\n'192.168.0.3'\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>class AdresseIP:\n    \n    def __init__(self, adresse):\n        self.adresse = adresse\n    \n    def liste_octet(self):\n\"\"\"renvoie une liste de nombres entiers, la liste des octets de l'adresse IP\"\"\"\n        return [int(i) for i in self.adresse.split(\".\")]\n    \n    def est_reservee(self):\n\"\"\"renvoie True si l'adresse IP est une adresse r\u00e9serv\u00e9e, False sinon\"\"\"\n        return self.liste_octet()[3] == 0 or self.liste_octet()[3] == 255\n    \n    def adresse_suivante(self):\n\"\"\"renvoie un objet de AdresseIP avec l'adresse IP qui suit l\u2019adresse self si elle existe et False sinon\"\"\"\n        if self.liste_octet()[3] &lt; 254:\n            octet_nouveau = self.liste_octet()[3] + 1\n            return AdresseIP('192.168.0.' + str(octet_nouveau))\n        else:\n            return False\n\nadresse1 = AdresseIP('192.168.0.1')\nadresse2 = AdresseIP('192.168.0.2')\nadresse3 = AdresseIP('192.168.0.0')\n</code></pre>"},{"location":"cours/Epreuve_pratique/EP.html#sujet-25","title":"Sujet 25 \u270f\ufe0f","text":"<p>Exercice 25.1</p> \u00c9nonc\u00e9 \ud83d\udd12Correction \ud83d\udd13 <p>\u00c9crire une fonction <code>recherche</code> qui prend en param\u00e8tre un tableau de nombres entiers <code>tab</code>, et qui renvoie la liste (\u00e9ventuellement vide) des couples d'entiers cons\u00e9cutifs successifs qu'il peut y avoir dans <code>tab</code>.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche([1, 4, 3, 5])\n[]\n&gt;&gt;&gt; recherche([1, 4, 5, 3])\n[(4, 5)]\n&gt;&gt;&gt; recherche([7, 1, 2, 5, 3, 4])\n[(1, 2), (3, 4)]\n&gt;&gt;&gt; recherche([5, 1, 2, 3, 8, -5, -4, 7])\n[(1, 2), (2, 3), (-5, -4)]\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def recherche(tab):\n    solution = []\n    for i in range(len(tab)-1):\n        if tab[i] + 1 == tab[i+1]:\n            solution.append((tab[i], tab[i+1]))\n    return solution\n</code></pre> <p>Exercice 25.2</p> \u00c9nonc\u00e9 \ud83d\udd12Correction \ud83d\udd13 <p>Soit une image binaire repr\u00e9sent\u00e9e dans un tableau \u00e0 2 dimensions. Les \u00e9l\u00e9ments <code>M[i][j]</code>, appel\u00e9s pixels, sont \u00e9gaux soit \u00e0 <code>0</code> soit \u00e0 <code>1</code>.</p> <p>Une composante d\u2019une image est un sous-ensemble de l\u2019image constitu\u00e9 uniquement de <code>1</code> et de <code>0</code> qui sont c\u00f4te \u00e0 c\u00f4te, soit horizontalement soit verticalement.</p> <p>Par exemple, les composantes de  sont </p> <p>On souhaite, \u00e0 partir d\u2019un pixel \u00e9gal \u00e0 <code>1</code> dans une image <code>M</code>, donner la valeur <code>val</code> \u00e0 tous les pixels de la composante \u00e0 laquelle appartient ce pixel.</p> <p>La fonction <code>propager</code> prend pour param\u00e8tre une image <code>M</code>, deux entiers <code>i</code> et <code>j</code> et une valeur enti\u00e8re <code>val</code>. Elle met \u00e0 la valeur <code>val</code> tous les pixels de la composante du pixel <code>M[i][j]</code> s\u2019il vaut <code>1</code> et ne fait rien s\u2019il vaut <code>0</code>.</p> <p>Par exemple, <code>propager(M, 2, 1, 3)</code> donne</p> <p></p> <p>Compl\u00e9ter le code r\u00e9cursif de la fonction <code>propager</code> donn\u00e9 ci-dessous : \ud83d\udc0d Script Python<pre><code>def propager(M, i, j, val):\n    if M[i][j]== ...:\n        return None\n    \n    M[i][j] = val\n    \n    # l'\u00e9l\u00e9ment en haut fait partie de la composante\n    if ((i-1) &gt;= 0 and M[i-1][j] == ...):\n        propager(M, i-1, j, val)\n    \n    # l'\u00e9l\u00e9ment en bas fait partie de la composante\n    if ((...) &lt; len(M) and M[i+1][j] == 1):\n        propager(M, ..., j, val)\n    # l'\u00e9l\u00e9ment \u00e0 gauche fait partie de la composante\n    if ((...) &gt;= 0 and M[i][j-1] == 1):\n        propager(M, i, ..., val)\n    \n    # l'\u00e9l\u00e9ment \u00e0 droite fait partie de la composante\n    if ((...) &lt; len(M) and M[i][j+1] == 1):\n        propager(M, i, ..., val)\n</code></pre> Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; M = [[0, 0, 1, 0], [0, 1, 0, 1], [1, 1, 1, 0], [0, 1, 1, 0]]\n&gt;&gt;&gt; propager(M, 2, 1, 3)\n&gt;&gt;&gt; M\n[[0, 0, 1, 0], [0, 3, 0, 1], [3, 3, 3, 0], [0, 3, 3, 0]]\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def propager(M, i, j, val):\n    if M[i][j]== 0 :\n        return None\n    \n    M[i][j] = val\n    \n    # l'\u00e9l\u00e9ment en haut fait partie de la composante\n    if ((i-1) &gt;= 0 and M[i-1][j] == 1):\n        propager(M, i-1, j, val)\n    \n    # l'\u00e9l\u00e9ment en bas fait partie de la composante\n    if ((i+1) &lt; len(M) and M[i+1][j] == 1):\n        propager(M, i+1, j, val)\n    \n    # l'\u00e9l\u00e9ment \u00e0 gauche fait partie de la composante\n    if ((j-1) &gt;= 0 and M[i][j-1] == 1):\n        propager(M, i, j-1, val)\n    \n    # l'\u00e9l\u00e9ment \u00e0 droite fait partie de la composante\n    if ((j+1) &lt; len(M) and M[i][j+1] == 1):\n        propager(M, i, j+1, val)\n</code></pre>"},{"location":"cours/Epreuve_pratique/EP.html#sujet-26","title":"Sujet 26 \u270f\ufe0f","text":"<p>Exercice 26.1</p> \u00c9nonc\u00e9 \ud83d\udd12Correction \ud83d\udd13 <p>\u00c9crire une fonction <code>occurrence_max</code> prenant en param\u00e8tres une cha\u00eene de caract\u00e8res <code>chaine</code> et qui renvoie le caract\u00e8re le plus fr\u00e9quent de la cha\u00eene. La chaine ne contient que des lettres en minuscules sans accent.</p> <p>On pourra s\u2019aider du tableau :</p> <p><code>alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']</code></p> <p>et du tableau <code>occurrence</code> de 26 \u00e9l\u00e9ments o\u00f9 l\u2019on mettra dans <code>occurrence[i]</code> le nombre d\u2019apparitions de <code>alphabet[i]</code> dans la chaine.</p> <p>Puis on calculera l\u2019indice <code>k</code> d\u2019un maximum du tableau <code>occurrence</code> et on affichera <code>alphabet[k]</code>.</p> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; ch = 'je suis en terminale et je passe le bac et je souhaite poursuivre des etudes pour devenir expert en informatique'\n&gt;&gt;&gt; occurrence_max(ch)\n'e'\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n\ndef occurrence_max(chaine):\n    occurence = [0] *  26\n    for i in range(26):\n        compteur = 0\n        for caractere in chaine:\n            if caractere == alphabet[i]:\n                compteur += 1\n        occurence[i] = compteur\n    ind_max = 0\n    for i in range(26):\n        if occurence[i] &gt; occurence[ind_max]:\n            ind_max = i\n    return alphabet[ind_max]\n</code></pre> <p>Exercice 26.2</p> \u00c9nonc\u00e9 \ud83d\udd12Correction \ud83d\udd13 <p>On consid\u00e8re une image en 256 niveaux de gris que l\u2019on repr\u00e9sente par une grille de nombres, c\u2019est-\u00e0-dire une liste compos\u00e9e de sous-listes toutes de longueurs identiques.</p> <p>La largeur de l\u2019image est donc la longueur d\u2019une sous-liste et la hauteur de l\u2019image est le nombre de sous-listes.</p> <p>Chaque sous-liste repr\u00e9sente une ligne de l\u2019image et chaque \u00e9l\u00e9ment des sous-listes est un entier compris entre 0 et 255, repr\u00e9sentant l\u2019intensit\u00e9 lumineuse du pixel.</p> <p>Compl\u00e9ter le programme ci-dessous : \ud83d\udc0d Script Python<pre><code>def nbLig(image):\n'''renvoie le nombre de lignes de l'image'''\n    return ...\n\ndef nbCol(image):\n'''renvoie la largeur de l'image'''\n    return ...\n\ndef negatif(image):\n'''renvoie le n\u00e9gatif de l'image sous la forme d'une liste de listes'''\n    L = [[0 for k in range(nbCol(image))] for i in range(nbLig(image))] # on cr\u00e9\u00e9 une image de 0 aux m\u00eames dimensions que le param\u00e8tre image\n    for i in range(len(image)):\n        for j in range(...):\n            L[i][j] = ...\n    return L\n\ndef binaire(image, seuil):\n'''renvoie une image binaris\u00e9e de l'image sous la forme d'une liste de listes contenant des 0 si la valeur du pixel est strictement inf\u00e9rieure au seuil et 1 sinon'''\n    L = [[0 for k in range(nbCol(image))] for i in range(nbLig(image))] # on cr\u00e9e une image de 0 aux m\u00eames dimensions que le param\u00e8tre image\n    for i in range(len(image)):\n        for j in range(...):\n            if image[i][j] &lt; ... :\n                L[i][j] = ...\n            else:\n                L[i][j] = ...\n    return L    \n</code></pre> Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; img = [[20, 34, 254, 145, 6], [23, 124, 287, 225, 69], [197, 174, 207, 25, 87], [255, 0, 24, 197, 189]]\n&gt;&gt;&gt; nbLig(img)\n4\n&gt;&gt;&gt; nbCol(img)\n5\n&gt;&gt;&gt; negatif(img)\n[[235, 221, 1, 110, 249], [232, 131, -32, 30, 186], [58, 81, 48, 230, 168], [0, 255, 231, 58, 66]]\n&gt;&gt;&gt; binaire(negatif(img),120)\n[[1, 1, 0, 0, 1], [1, 1, 0, 0, 1], [0, 0, 0, 1, 1], [0, 1, 1, 0, 0]]\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def nbLig(image):\n'''renvoie le nombre de lignes de l'image'''\n    return len(image)\n\ndef nbCol(image):\n'''renvoie la largeur de l'image'''\n    return len(image[0])\n\ndef negatif(image):\n'''renvoie le n\u00e9gatif de l'image sous la forme d'une liste de listes'''\n    L = [[0 for k in range(nbCol(image))] for i in range(nbLig(image))] # on cr\u00e9\u00e9 une image de 0 aux m\u00eames dimensions que le param\u00e8tre image\n    for i in range(len(image)):\n        for j in range(nbCol(image)):\n            L[i][j] = 255-image[i][j]\n    return L\n\ndef binaire(image, seuil):\n'''renvoie une image binaris\u00e9e de l'image sous la forme d'une liste de listes contenant des 0 si la valeur du pixel est strictement inf\u00e9rieure au seuil et 1 sinon'''\n    L = [[0 for k in range(nbCol(image))] for i in range(nbLig(image))] # on cr\u00e9e une image de 0 aux m\u00eames dimensions que le param\u00e8tre image\n    for i in range(len(image)):\n        for j in range(nbCol(image)):\n            if image[i][j] &lt; seuil :\n                L[i][j] = 0\n            else:\n                L[i][j] = 1\n    return L    \n</code></pre>"},{"location":"cours/Epreuve_pratique/EP.html#sujet-27","title":"Sujet 27 \u270f\ufe0f","text":"<p>Exercice 27.1</p> \u00c9nonc\u00e9 \ud83d\udd12Correction \ud83d\udd13 <p>\u00c9crire une fonction <code>moyenne</code> prenant en param\u00e8tre une liste d\u2019entiers et qui renvoie la moyenne des valeurs de cette liste.</p> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; moyenne([10, 20, 30, 40, 60, 110])\n45.0\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def moyenne(tab):\n    somme = 0\n    for val in tab:\n        somme += val\n    return somme / len(tab)\n</code></pre> <p>Exercice 27.2</p> \u00c9nonc\u00e9 \ud83d\udd12Correction \ud83d\udd13 <p></p> <p>On travaille sur des dessins en noir et blanc obtenu \u00e0 partir de pixels noirs et blancs, La figure \u00ab c\u0153ur \u00bb ci-dessus va servir d\u2019exemple.</p> <p>On la repr\u00e9sente par une grille de nombres, c\u2019est-\u00e0-dire par une liste compos\u00e9e de sous-listes de m\u00eame longueurs.</p> <p>Chaque sous-liste repr\u00e9sentera donc une ligne du dessin.</p> <p>Dans le code ci-dessous, la fonction <code>affiche</code> permet d\u2019afficher le dessin. Les pixels noirs (<code>1</code> dans la grille) seront repr\u00e9sent\u00e9s par le caract\u00e8re <code>\"*\"</code> et les blancs (<code>0</code> dans la grille) par deux espaces.</p> <p>La fonction <code>zoomListe</code> prend en argument une liste <code>liste_depart</code> et un entier <code>k</code>. Elle renvoie une liste o\u00f9 chaque \u00e9l\u00e9ment de <code>liste_depart</code> est dupliqu\u00e9 <code>k</code> fois.</p> <p>La fonction <code>zoomDessin</code> prend en argument la grille <code>dessin</code> et renvoie une grille o\u00f9 toutes les lignes de <code>dessin</code> sont zoom\u00e9es <code>k</code> fois et r\u00e9p\u00e9t\u00e9es <code>k</code> fois.</p> <p>Soit le code ci-dessous : \ud83d\udc0d Script Python<pre><code>coeur = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \n        [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0], \n        [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0], \n        [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0], \n        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], \n        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], \n        [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], \n        [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0], \n        [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0], \n        [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], \n        [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], \n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]\n\ndef affiche(dessin):\n''' affichage d'une grille : les 1 sont repr\u00e9sent\u00e9s par des \" *\" , les 0 par deux espaces \"  \" '''\n    for ligne in dessin:\n        for col in ligne:\n            if col == 1:\n                print(\" *\", end=\"\")\n            else:\n                print(\"  \", end=\"\")\n        print()\n\ndef zoomListe(liste_depart,k):\n'''renvoie une liste contenant k fois chaque \u00e9l\u00e9ment de liste_depart'''\n    liste_zoom = ...\n    for elt in ... :\n        for i in range(k):\n            ...\n    return liste_zoom\n\ndef zoomDessin(grille,k):\n'''renvoie une grille o\u00f9 les lignes sont zoom\u00e9es k fois ET r\u00e9p\u00e9t\u00e9es k fois'''\n    grille_zoom=[]\n    for elt in grille:\n        liste_zoom = ...\n        for i in range(k):\n            ... .append(...)\n    return grille_zoom\n</code></pre> R\u00e9sultats \u00e0 obtenir : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; affiche(coeur)\n</code></pre> </p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; affiche(zoomDessin(coeur, 3))\n</code></pre> <pre><code>            * * * * * *                   * * * * * *                  \n            * * * * * *                   * * * * * *                  \n            * * * * * *                   * * * * * *                  \n      * * *             * * *       * * *             * * *            \n      * * *             * * *       * * *             * * *            \n      * * *             * * *       * * *             * * *            \n* * *                         * * *                         * * *      \n* * *                         * * *                         * * *      \n* * *                         * * *                         * * *      \n* * *                                                       * * *      \n* * *                                                       * * *      \n* * *                                                       * * *      \n* * *                                                       * * *      \n* * *                                                       * * *      \n* * *                                                       * * *      \n      * * *                                           * * *            \n      * * *                                           * * *            \n      * * *                                           * * *            \n            * * *                               * * *                  \n            * * *                               * * *                  \n            * * *                               * * *                  \n                  * * *                   * * *                        \n                  * * *                   * * *                        \n                  * * *                   * * *                        \n                        * * *       * * *                              \n                        * * *       * * *                              \n                        * * *       * * *                              \n                              * * *                                    \n                              * * *                                    \n                              * * *\n</code></pre> \ud83d\udc0d Script Python<pre><code>coeur = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \n        [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0], \n        [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0], \n        [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0], \n        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], \n        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], \n        [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], \n        [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0], \n        [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0], \n        [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], \n        [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], \n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]\n\ndef affiche(dessin):\n    for ligne in dessin:\n        for col in ligne:\n            if col == 1:\n                print(' *',end='')\n            else:\n                print('  ',end='')\n        print()\n\ndef zoomListe(liste_depart, k):\n    liste_zoom = []\n    for elt in liste_depart:\n        for i in range(k):\n            liste_zoom.append(elt)\n    return liste_zoom\n\ndef zoomDessin(grille, k):\n    grille_zoom = []\n    for elt in grille:\n        liste_zoom = zoomListe(elt, k)\n        for i in range(k):\n            grille_zoom.append(liste_zoom)\n    return grille_zoom\n</code></pre>"},{"location":"cours/Epreuve_pratique/EP.html#sujet-28","title":"Sujet 28 \u270f\ufe0f","text":"<p>Exercice 28.1</p> \u00c9nonc\u00e9 \ud83d\udd12Correction \ud83d\udd13 <p>Dans cet exercice, un arbre binaire de caract\u00e8res est stock\u00e9 sous la forme d\u2019un dictionnaire o\u00f9 les clefs sont les caract\u00e8res des n\u0153uds de l\u2019arbre et les valeurs, pour chaque clef, la liste des caract\u00e8res des fils gauche et droit du n\u0153ud.</p> <p>Par exemple, l\u2019arbre : </p> <p>est stock\u00e9 dans : \ud83d\udc0d Script Python<pre><code>a = {'F': ['B', 'G'], 'B': ['A', 'D'], 'A': ['', ''], 'D': ['C', 'E'], 'C': ['', ''], 'E': ['', ''], 'G': ['', 'I'], 'I': ['', 'H'], 'H': ['', '']}\n</code></pre> \u00c9crire une fonction r\u00e9cursive <code>taille</code> prenant en param\u00e8tres un arbre binaire <code>arbre</code> sous la forme d\u2019un dictionnaire et un caract\u00e8re <code>lettre</code> qui est la valeur du sommet de l\u2019arbre, et qui renvoie la taille de l\u2019arbre \u00e0 savoir le nombre total de n\u0153ud.</p> <p>On pourra distinguer les 4 cas o\u00f9 les deux \u00ab fils \u00bb du n\u0153ud sont <code>''</code>, le fils gauche seulement est <code>''</code>, le fils droit seulement est <code>''</code>, aucun des deux fils n\u2019est <code>''</code>.</p> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; taille(a, 'F')\n9\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>a = {'F': ['B', 'G'], 'B': ['A', 'D'], 'A': ['', ''], 'D': ['C', 'E'], 'C': ['', ''], 'E': ['', ''], 'G': ['', 'I'], 'I': ['', 'H'], 'H': ['', '']}\n\ndef taille(arbre, lettre):\n    fils_gauche = arbre[lettre][0]\n    fils_droit = arbre[lettre][1]\n    \n    if fils_gauche != '' and fils_droit != '':\n        return 1 + taille(arbre, fils_gauche) + taille(arbre, fils_droit)\n    \n    if fils_gauche != '' and fils_droit == '':\n        return 1 + taille(arbre, fils_gauche)\n    if fils_gauche == '' and fils_droit != '':\n        return 1 + taille(arbre, fils_droit)\n    else:\n        return 1\n</code></pre> <p>Exercice 28.2</p> \u00c9nonc\u00e9 \ud83d\udd12Correction \ud83d\udd13 <p>On consid\u00e8re l'algorithme de tri de tableau suivant : \u00e0 chaque \u00e9tape, on parcourt depuis le d\u00e9but du tableau tous les \u00e9l\u00e9ments non rang\u00e9s et on place en derni\u00e8re position le plus grand \u00e9l\u00e9ment.</p> <p>Exemple avec le tableau : <code>t = [41, 55, 21, 18, 12, 6, 25]</code> </p> <p>\u00c9tape 1 : on parcourt tous les \u00e9l\u00e9ments du tableau, on permute le plus grand \u00e9l\u00e9ment avec le dernier.</p> <p>Le tableau devient <code>t = [41, 25, 21, 18, 12, 6, 55]</code></p> <p>\u00c9tape 2 : on parcourt tous les \u00e9l\u00e9ments sauf le dernier, on permute le plus grand \u00e9l\u00e9ment trouv\u00e9 avec l'avant dernier.</p> <p>Le tableau devient : <code>t = [6, 25, 21, 18, 12, 41, 55]</code></p> <p>Et ainsi de suite. </p> <p>La code de la fonction <code>tri_iteratif</code> qui impl\u00e9mente cet algorithme est donn\u00e9 ci- dessous. \ud83d\udc0d Script Python<pre><code>def tri_iteratif(tab):\n    for k in range(..., 0, -1):\n        imax = ...\n        for i in range(0, ...):\n            if tab[i] &gt; ... :\n                imax = i\n        if tab[max] &gt; ... :\n            ..., tab[imax] = tab[imax], ...\n    return tab\n</code></pre> Compl\u00e9ter le code qui doit donner : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; tri_iteratif([41, 55, 21, 18, 12, 6, 25])\n[6, 12, 18, 21, 25, 41, 55]\n</code></pre> On rappelle que l'instruction <code>a, b = b, a</code> \u00e9change les contenus de <code>a</code> et <code>b</code>.</p> \ud83d\udc0d Script Python<pre><code>def tri_iteratif(tab):\n    for k in range(len(tab)-1, 0, -1):\n        imax = 0\n        for i in range(0, k):\n            if tab[i] &gt; tab[imax] :\n                imax = i\n        if tab[imax] &gt; tab[k] :\n            tab[k], tab[imax] = tab[imax], tab[k] \n    return tab\n</code></pre>"},{"location":"cours/Epreuve_pratique/EP.html#sujet-29","title":"Sujet 29 \u270f\ufe0f","text":"<p>Exercice 29.1</p> \u00c9nonc\u00e9 \ud83d\udd12Correction \ud83d\udd13 <p>Soit un nombre entier sup\u00e9rieur ou \u00e9gal \u00e0 1 :  <ul> <li>s'il est pair, on le divise par 2 ;</li> <li>s\u2019il est impair, on le multiplie par 3 et on ajoute 1.</li> </ul> <p> Puis on recommence ces \u00e9tapes avec le nombre entier obtenu, jusqu\u2019\u00e0 ce que l\u2019on obtienne la valeur 1.</p> <p>On d\u00e9finit ainsi la suite \\((U_n)\\) par :  <ul> <li>\\(U_0=k\\), o\u00f9 \\(k\\) est un entier choisi initialement;</li> <li>\\(U_{n+1} = \\dfrac{U_n}{2}\\) si \\(U_n\\) est pair;</li> <li>\\(U_{n+1} = 3 \\times U_n + 1\\) si \\(U_n\\) est impair.</li> </ul> <p> On admet que, quel que soit l'entier <code>k</code> choisi au d\u00e9part, la suite finit toujours sur la valeur 1.</p> <p>\u00c9crire une fonction <code>calcul</code> prenant en param\u00e8tres un entier <code>n</code> strictement positif et qui renvoie la liste des valeurs de la suite, en partant de <code>n</code> et jusqu'\u00e0 atteindre 1.</p> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; calcul(7)\n[7, 22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1]\n</code></pre></p> <p>Exercice 29.2</p> \u00c9nonc\u00e9 \ud83d\udd12Correction \ud83d\udd13 <p>On affecte \u00e0 chaque lettre de l'alphabet un code selon le tableau ci-dessous :</p> A B C D E F G H I J K L M N O P Q R S T U V W X Y Z 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 <p>Pour un mot donn\u00e9, on d\u00e9termine d\u2019une part son code alphab\u00e9tique concat\u00e9n\u00e9, obtenu par la juxtaposition des codes de chacun de ses caract\u00e8res, et d\u2019autre part, son code additionn\u00e9, qui est la somme des codes de chacun de ses caract\u00e8res.</p> <p>Par ailleurs, on dit que ce mot est \u00ab parfait \u00bb si le code additionn\u00e9 divise le code concat\u00e9n\u00e9.</p> <p>Exemples :  <ul> <li>Pour le mot <code>\"PAUL\"</code>, le code concat\u00e9n\u00e9 est la cha\u00eene <code>'1612112'</code>, soit l\u2019entier 1 612 112. Son code additionn\u00e9 est l\u2019entier 50 car 16 + 1 + 21 + 12 = 50. 50 ne divise pas l\u2019entier 1 612 112 et par cons\u00e9quent, le mot <code>\"PAUL\"</code> n\u2019est pas parfait.</li> <li>Pour le mot <code>\"ALAIN\"</code>, le code concat\u00e9n\u00e9 est la cha\u00eene <code>'1121914'</code>, soit l\u2019entier 1 121 914. Le code additionn\u00e9 est l\u2019entier 37 car 1 + 12 + 1 + 9 + 14 = 37. 37 divise l\u2019entier 1 121 914 et par cons\u00e9quent, le mot <code>\"ALAIN\"</code> est parfait.</li> </ul> <p> Compl\u00e9ter la fonction <code>est_parfait</code> ci-dessous qui prend comme argument une cha\u00eene de caract\u00e8res <code>mot</code> (en lettres majuscules) et qui renvoie le code alphab\u00e9tique concat\u00e9n\u00e9, le code additionn\u00e9 de <code>mot</code>, ainsi qu\u2019un bool\u00e9en qui indique si <code>mot</code> est parfait ou pas. \ud83d\udc0d Script Python<pre><code>dico = {\"A\": 1, \"B\": 2, \"C\": 3, \"D\": 4, \"E\": 5, \"F\": 6, \"G\": 7, \"H\": 8, \"I\": 9, \"J\": 10,  \"K\": 11, \"L\": 12, \"M\": 13, \"N\": 14, \"O\": 15, \"P\": 16, \"Q\": 17, \"R\": 18, \"S\": 19, \"T\": 20, \"U\": 21, \"V\": 22, \"W\": 23, \"X\": 24, \"Y\": 25, \"Z\": 26}\n\ndef est_parfait(mot) :\n    #mot est une cha\u00eene de caract\u00e8res (en lettres majuscules)\n    code_c = \"\"\n    code_a = ???\n    for c in mot :\n        code_c = code_c + ???\n        code_a = ???\n    code_c = int(code_c)\n    if ??? :\n        mot_est_parfait = True\n    else :\n        mot_est_parfait = False\n    return [code_a, code_c, mot_est_parfait]\n</code></pre> Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; est_parfait(\"PAUL\")\n[50, 1612112, False]\n&gt;&gt;&gt; est_parfait(\"ALAIN\")\n[37, 1121914, True]\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>dico = {\"A\": 1, \"B\": 2, \"C\": 3, \"D\": 4, \"E\": 5, \"F\": 6, \"G\": 7, \"H\": 8, \"I\": 9, \"J\": 10,  \"K\": 11, \"L\": 12, \"M\": 13, \"N\": 14, \"O\": 15, \"P\": 16, \"Q\": 17, \"R\": 18, \"S\": 19, \"T\": 20, \"U\": 21, \"V\": 22, \"W\": 23, \"X\": 24, \"Y\": 25, \"Z\": 26}\n\ndef est_parfait(mot) :\n    #mot est une cha\u00eene de caract\u00e8res (en lettres majuscules)\n    code_c = \"\"\n    code_a = 0\n    for c in mot :\n        code_c = code_c + str(dico[c])\n        code_a = code_a + dico[c]\n    code_c = int(code_c)\n    if code_c % code_a == 0:\n        mot_est_parfait = True\n    else :\n        mot_est_parfait = False\n    return [code_a, code_c, mot_est_parfait]\n</code></pre>"},{"location":"cours/Epreuve_pratique/EP.html#sujet-30","title":"Sujet 30 \u270f\ufe0f","text":"<p>L'exercice 30.1 est le m\u00eame que le 03.1...  \ud83e\udd37</p> <p>Exercice 30.1</p> \u00c9nonc\u00e9 \ud83d\udd12Correction \ud83d\udd13 <p>Programmer la fonction <code>multiplication</code>, prenant en param\u00e8tres deux nombres entiers <code>n1</code> et <code>n2</code>, et qui renvoie le produit de ces deux nombres.</p> <p>Les seules op\u00e9rations autoris\u00e9es sont l\u2019addition et la soustraction. </p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; multiplication(3, 5)\n15\n&gt;&gt;&gt; multiplication(-4, -8)\n32\n&gt;&gt;&gt; multiplication(-2, 6)\n-12\n&gt;&gt;&gt; multiplication(-2, 0)\n0\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def multiplication(n1, n2):\n    if n1 &lt; 0:\n        return -multiplication(-n1, n2)\n    if n2 &lt; 0:\n        return -multiplication(n1, -n2)\n    resultat = 0\n    for _ in range(n2):\n        resultat += n1\n    return resultat\n</code></pre> <p>Exercice 30.2</p> \u00c9nonc\u00e9 \ud83d\udd12Correction \ud83d\udd13 <p>Soit <code>T</code> un tableau non vide d'entiers tri\u00e9s dans l'ordre croissant et <code>n</code> un entier.</p> <p>La fonction <code>chercher</code>, donn\u00e9e ci-dessous, doit renvoyer un indice o\u00f9 la valeur <code>n</code> appara\u00eet \u00e9ventuellement dans <code>T</code>, et <code>None</code> sinon. </p> <p>Les param\u00e8tres de la fonction sont :  <ul> <li><code>T</code>, le tableau dans lequel s'effectue la recherche ;</li> <li><code>n</code>, l'entier \u00e0 chercher dans le tableau ;</li> <li><code>i</code>, l'indice de d\u00e9but de la partie du tableau o\u00f9 s'effectue la recherche ;</li> <li><code>j</code>, l'indice de fin de la partie du tableau o\u00f9 s'effectue la recherche.</li> </ul> <p> La fonction <code>chercher</code> est une fonction r\u00e9cursive bas\u00e9e sur le principe \u00ab diviser pour r\u00e9gner \u00bb.</p> <p>Le code de la fonction commence par v\u00e9rifier si <code>0 &lt;= i</code> et <code>j &lt; len(T)</code>.  </p> <p>Si cette condition n\u2019est pas v\u00e9rifi\u00e9e, elle affiche <code>\"Erreur\"</code> puis renvoie <code>None</code>.</p> <p>Recopier et compl\u00e9ter le code de la fonction <code>chercher</code> propos\u00e9e ci-dessous : \ud83d\udc0d Script Python<pre><code>def chercher(T, n, i, j):\n    if i &lt; 0 or ??? :\n        print(\"Erreur\")\n        return None\n    if i &gt; j :\n        return None\n    m = (i + j) // ???\n    if T[m] &lt; ??? :\n        return chercher(T, n, ??? , ???)\n    elif ??? :\n        return chercher(T, n, ??? , ??? )\n    else :\n        return ???\n</code></pre> L'ex\u00e9cution du code doit donner : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; chercher([1, 5, 6, 6, 9, 12], 7, 0, 10)\nErreur\n&gt;&gt;&gt; chercher([1, 5, 6, 6, 9, 12], 7, 0, 5)\n&gt;&gt;&gt; chercher([1, 5, 6, 6, 9, 12], 9, 0, 5)\n4\n&gt;&gt;&gt; chercher([1, 5, 6, 6, 9, 12], 6, 0, 5)\n2\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def chercher(T, n, i, j):\n    if i &lt; 0 or j &gt;= len(T) :\n        print('Erreur')\n        return None\n    if i &gt; j :\n        return None\n    m = (i + j) // 2\n    if T[m] &lt; n :\n        return chercher(T, n, m+1, j)\n    elif T[m] &gt; n :\n        return chercher(T, n, i, m-1)\n    else :\n        return m\n</code></pre>"},{"location":"cours/Epreuve_pratique/Modalite.html","title":"Modalit\u00e9s","text":"<p>Textes r\u00e8glementaires</p> <p>C'est ici :  \u25b6\ufe0f </p>   * Dur\u00e9e : 1 heure. * L'\u00e9preuve pratique donne lieu \u00e0 une note sur **8 points**, qui s'ajouteront aux 12 points de l'\u00e9preuve \u00e9crite.   <p>La partie pratique consiste en la r\u00e9solution de deux exercices sur ordinateur, chacun \u00e9tant not\u00e9 sur 4 points.</p> <p>Le candidat est \u00e9valu\u00e9 sur la base d\u2019un dialogue avec un professeur-examinateur. Un examinateur \u00e9value au maximum quatre \u00e9l\u00e8ves. L\u2019examinateur ne peut pas \u00e9valuer un \u00e9l\u00e8ve qu\u2019il a eu en classe durant l\u2019ann\u00e9e en cours. L\u2019\u00e9valuation de cette partie se d\u00e9roule au cours du deuxi\u00e8me trimestre pendant la p\u00e9riode de l\u2019\u00e9preuve \u00e9crite de sp\u00e9cialit\u00e9.</p> <p>Premier exercice</p> <p>Le premier exercice consiste \u00e0 programmer un algorithme figurant explicitement au programme, ne pr\u00e9sentant pas de difficult\u00e9 particuli\u00e8re, dont on fournit une sp\u00e9cification. Il s\u2019agit donc de restituer un algorithme rencontr\u00e9 et travaill\u00e9 \u00e0 plusieurs reprises en cours de formation. Le sujet peut proposer un jeu de tests avec les r\u00e9ponses attendues pour permettre au candidat de v\u00e9rifier son travail.</p> <p>Deuxi\u00e8me exercice</p> <p>Pour le second exercice, un programme est fourni au candidat. Cet exercice ne demande pas l\u2019\u00e9criture compl\u00e8te d\u2019un programme, mais permet de valider des comp\u00e9tences de programmation suivant des modalit\u00e9s vari\u00e9es : le candidat doit, par exemple, compl\u00e9ter un programme \u00ab \u00e0 trous \u00bb afin de r\u00e9pondre \u00e0 une sp\u00e9cification donn\u00e9e, ou encore compl\u00e9ter un programme pour le documenter, ou encore compl\u00e9ter un programme en ajoutant des assertions, etc.</p>"},{"location":"cours/Le_langage_SQL/Correction_de_l%27exercice_bilan.html","title":"Correction de l'exercice bilan     1. __Requ\u00eates de base__    1. La liste des continents et de leurs superficies, tri\u00e9s par superficie croissante.     SQL<pre><code>SELECT * \nFROM Continent \nORDER BY Area ASC\n</code></pre> 2. La liste des capitales mondiales, tri\u00e9es par ordre alphab\u00e9tique.     SQL<pre><code>SELECT Capital \nFROM Country \nORDER BY Capital ASC\n</code></pre> 3. Le nom, la ville et la date de fondation des quatre plus anciennes organisations mondiales.     SQL<pre><code>SELECT Name , City , Established \nFROM Organization\nWHERE Established IS NOT NULL\nORDER BY Established ASC\nLIMIT 4\n</code></pre> 4. Le nom des volcans de plus de 6 000 m\u00e8tres.     SQL<pre><code>SELECT Name, Height\nFROM Mountain \nWHERE Type = 'volcano' AND Height &gt; 6000\nORDER BY Height DESC\n</code></pre> 5. Les dix villes les plus peupl\u00e9es au monde.     SQL<pre><code>SELECT Name, Population \nFROM City\nWHERE Population IS NOT NULL\nORDER BY Population DESC\nLIMIT 10\n</code></pre>    2. __Jointures__    1. Le nom des pays membres des Nations Unies, tri\u00e9s par ordre alphab\u00e9tique.     SQL<pre><code>SELECT c.Name \nFROM (Country AS c \nINNER JOIN isMember AS i ON c.Code = i.Country)\nWHERE i.organization = 'UN'\nORDER BY c.name ASC\n</code></pre> 2. Les monarchies constitutionnelles.     SQL<pre><code>SELECT c.Name \nFROM (Country AS c \nINNER JOIN Politics AS p ON c.Code = p.Country)\nWHERE p.Government = 'constitutional monarchy'\n</code></pre> 3. Les fleuves de France (c\u2019est-\u00e0-dire les rivi\u00e8res de France qui se jettent dans la mer).     SQL<pre><code>SELECT DISTINCT r.Name\nFROM ((River AS r \nINNER JOIN Geo_River AS gr ON gr.River = r.Name)\nINNER JOIN Country AS c ON c.Code = gr.Country)\nWHERE r.Sea IS NOT NULL AND c.Name = 'France'\n</code></pre> 4. Le nom des montagnes d\u2019Alaska de plus de 5 000 m\u00e8tres.     SQL<pre><code>SELECT m.Name , m.Height\nFROM Mountain AS m \nINNER JOIN geo_Mountain AS gm ON gm.Mountain = m.Name\nWHERE m.Height &gt; 5000 AND gm.Province = 'Alaska'\n</code></pre> 5. Les trois plus hautes montagnes africaines.     SQL<pre><code>SELECT m.Name , m.Height \nFROM (((Mountain AS m\nINNER JOIN geo_Mountain AS gm ON m.Name = gm.Mountain)\nINNER JOIN Country AS c ON gm.Country = c.Code)\nINNER JOIN encompasses AS e ON c.Code = e.Country)\nWHERE e.Continent = 'Africa'\nORDER BY m.Height DESC\nLIMIT 3\n</code></pre>    3. __Fonctions d\u2019agr\u00e9gation__    1. La longueur moyenne des fleuves qui se jettent dans la Mer Noire.     SQL<pre><code>SELECT AVG(Length) \nFROM River \nWHERE Sea = 'Black Sea'\n</code></pre> 2. Le nombre de rivi\u00e8res fran\u00e7aises pr\u00e9sentes dans la base de donn\u00e9es.     SQL<pre><code>SELECT COUNT(DISTINCT gm.River) AS 'Nombre de rivi\u00e8res'\nFROM geo_River AS gm \nINNER JOIN Country AS c ON gm.Country = c.Code\nWHERE c.Name = 'France'\n</code></pre> 3. Le nombre total de pays travers\u00e9s par chacun des fleuves se jetant dans la mer M\u00e9diterran\u00e9e. SQL<pre><code>SELECT r.Name, COUNT(DISTINCT gr.Country) AS 'Nombre de pays'\nFROM River AS r \nINNER JOIN geo_River AS gr ON r.Name = gr.River\nWHERE r.Sea = 'Mediterranean Sea'\nGROUP BY r.Name\n</code></pre> 4. Les organisations regroupant plus de 100 pays, avec la population totale de ceux-ci.     SQL<pre><code>SELECT o.Name, SUM(c.Population)\nFROM ((Organization AS o  \nINNER JOIN isMember AS i ON i.Organization = o.Abbreviation)\nINNER JOIN Country AS c ON c.Code = i.Country)\nGROUP BY o.Name HAVING COUNT(o.Name) &gt; 100\n</code></pre> 5. La liste des pays des Am\u00e9riques avec leur plus haute montagne.     SQL<pre><code>SELECT c.Name AS Pays, m.Name AS Nom, MAX(m.Height) AS 'Hauteur de la plus haute montagne'\nFROM (((geo_Mountain AS gm \nINNER JOIN Mountain AS m ON gm.Mountain = m.Name)\nINNER JOIN Country AS c ON gm.Country = c.Code)\nINNER JOIN encompasses AS e ON c.Code = e.Country)\nWHERE e.Continent = 'America'\nGROUP BY c.Name\n</code></pre>","text":""},{"location":"cours/Le_langage_SQL/Correction_des_exercices.html","title":"Correction des exercices","text":""},{"location":"cours/Le_langage_SQL/Correction_des_exercices.html#correction-de-lexercice-1","title":"Correction de l'exercice 1","text":"1.   SQL<pre><code>SELECT NomStation\nFROM Stations\nWHERE Capacite &gt; 200\n</code></pre>    La requ\u00eate __SQL__ retourne le r\u00e9sultat suivant :       | NomStation    |  | :--------:    |  | Tanger        |  | La Bourboule  |  | Courchevel    |     2.   SQL<pre><code>SELECT Nom\nFROM Clients\nWHERE Nom LIKE 'J%' OR Solde &gt;= 10000\n</code></pre>    La requ\u00eate __SQL__ retourne le r\u00e9sultat suivant :       | Nom           |  | :--------:    |  | Smith         |  | Jonhson       |     3.   SQL<pre><code>SELECT NomStation\nFROM Activites\nWHERE Libelle = 'Plong\u00e9e'\n</code></pre>    La requ\u00eate __SQL__ retourne le r\u00e9sultat suivant :       | NomStation    |  | :--------:    |  | Tanger        |  | Victoria      |     !!! tip \"A noter\"     Lorsque les valeurs sont de type cha\u00eene de caract\u00e8res, on les place entre les symboles \u00ab ' \u00bb pour pouvoir effectuer les comparaisons.      4.   SQL<pre><code>SELECT Nom\nFROM Clients\nINNER JOIN Sejours ON ((Clients.Id = Sejours.IdClient) AND (Sejours.Station = 'La Bourboule'))\n</code></pre>    La requ\u00eate __SQL__ retourne le r\u00e9sultat suivant :       | Nom           |  | :--------:    |  | Jonhson       |  | Smith         |     !!! tip \"A noter\"     Il s'agit bien ici d'une jointure de 2 relations qui doit respecter 2 conditions. Pour simplifier l'\u00e9criture, on peut \u00e9galement utiliser des alias pour les noms des relations. Ce que donnerait par exemple la requ\u00eate suivante :       SQL<pre><code>SELECT Nom\nFROM Clients AS c\nINNER JOIN Sejours AS s ON ((c.Id = s.IdClient) AND (s.Station = 'La Bourboule'))\n</code></pre>   5. Intuitivement, on a envie de faire la jointure suivante :   SQL<pre><code>SELECT Station\nFROM Sejours AS s\nINNER JOIN Clients AS c ON ((c.Id = s.IdClient) AND (c.Region = 'Europe'))\n</code></pre>    Le r\u00e9sultat de cette requ\u00eate donne :     | Station       |  | :--------:    |  | Courchevel    |  | Courchevel    |  | La Bourboule  |  | Victoria      |     On s'aper\u00e7oit qu'il y a des doublons, ce qui est logique puisque Courchevel a \u00e9t\u00e9 visit\u00e9e par M.Bauer mais aussi par M. Smith.   Il nous faut donc \u00e9liminer ce doublon en utilisant le mot-cl\u00e9 __DISTINCT__, ce qui donne la requ\u00eate suivante :  SQL<pre><code>SELECT DISTINCT Station\nFROM Sejours AS s\nINNER JOIN Clients AS c ON ((c.Id = s.IdClient) AND (c.Region = 'Europe'))\n</code></pre>"},{"location":"cours/Le_langage_SQL/Correction_des_exercices.html#correction-de-lexercice-2","title":"Correction de l'exercice 2","text":"1. Cela revient \u00e0 compter toutes les lignes o\u00f9 `Station = 'Victoria'`.   SQL<pre><code>SELECT COUNT(*) AS Total\nFROM Sejours WHERE Station = 'Victoria'\n</code></pre>    Le r\u00e9sultat obtenu est :     | Total         |  | :--------:    |  | 2             |     2.   SQL<pre><code>SELECT AVG(Prix) AS 'Prix Moyen Activites Tanger'\nFROM Activites\nWHERE Activites.NomStation = 'Tanger'\n</code></pre>    Le r\u00e9sultat obtenu est :       | Prix Moyen Activites Tanger  |  | :--------:                   |  | 90                           |"},{"location":"cours/Le_langage_SQL/Correction_des_exercices.html#correction-de-lexercice-3","title":"Correction de l'exercice 3","text":"1.   SQL<pre><code>SELECT NomStation || ' (' || UPPER(Lieu) || ')' AS Stations, Tarif AS 'Tarif HT', Tarif * 1.2 AS 'Tarif TTC'\nFROM Stations\n</code></pre>   2. Les donn\u00e9es calcul\u00e9es \u00e0 partir de donn\u00e9es pr\u00e9sentes dans une requ\u00eate __SELECT__ ne sont pas stock\u00e9es dans la base de donn\u00e9es.   !!! tip \"A noter\"     Pour pouvoir stocker ces valeurs, il faudrait au pr\u00e9alable modifier la structure de la base de donn\u00e9es comme par exemple ajouter un attribut dans la relation \u00ab Stations \u00bb."},{"location":"cours/Le_langage_SQL/Correction_des_exercices.html#correction-de-lexercice-4","title":"Correction de l'exercice 4","text":"1.  La mise \u00e0 jour de la base de donn\u00e9es se d\u00e9compose en l'ajout d'une occurrence dans la relation \u00ab Clients \u00bb et d'une occurrence dans la relation \u00ab Sejours \u00bb. SQL<pre><code>INSERT INTO Clients VALUES (4, 'Karibou', 'Juliette', 'Toronto', 'Am\u00e9rique', 7213),\nINSERT INTO Sejours VALUES (4, 'La Bourboule', '10/07/2020', 3)\n</code></pre>   2. En l'\u00e9tat, il n'y a aucune relation (association) entre la relation \u00ab Sejours \u00bb et la relation \u00ab Activites \u00bb. On ne peut donc pas dire que Mme Karibou a fait de la randonn\u00e9e.   !!! tip \"A noter\"     Il faudrait au pr\u00e9alable modifier la structure de la base de donn\u00e9es comme par exemple ajouter une cl\u00e9 primaire *IdActivite* dans la relation \u00ab Activites \u00bb et la cl\u00e9 \u00e9trang\u00e8re associ\u00e9e dans la relation \u00ab Sejours \u00bb."},{"location":"cours/Le_langage_SQL/Correction_des_exercices.html#correction-de-lexercice-5","title":"Correction de l'exercice 5","text":"1.   SQL<pre><code>UPDATE Stations SET Capacite = 450, Tarif = 2300\nWHERE NomStation = 'Courchevel'\n</code></pre>   2. Avec une requ\u00eate de type __UPDATE__, on ne peut mettre \u00e0 jour que des valeurs. On se trouve ici dans la partie __LMD__ du langage __SQL__.   !!! tip \"A noter\"     Si l'on souhaite changer le nom d'un attribut, il faut modifier la structure de la base de donn\u00e9es au niveau __LDD__ du langage __SQL__ avec le mot cl\u00e9 __ALTER TABLE__ comme le montre la requ\u00eate suivante :      SQL<pre><code>ALTER TABLE Activites RENAME COLUMN Prix TO 'Prix HT'\n</code></pre>"},{"location":"cours/Le_langage_SQL/Correction_des_exercices.html#correction-de-lexercice-6","title":"Correction de l'exercice 6","text":"1.   SQL<pre><code>DELETE FROM Clients\nWHERE Id = 4\n</code></pre>   !!! tip \"A noter\"     Le crit\u00e8re du __WHERE__ est bien l'attribut *Id* car c'est lui qui est l'identifiant (cl\u00e9 primaire). En effectuant cette requ\u00eate, toutes les relations r\u00e9f\u00e9renc\u00e9es seront modifi\u00e9es.     2. S'il n'y a aucune r\u00e9f\u00e9rence \u00e0 d'autres relations, il faut en pratique supprimer toutes les occurrences concern\u00e9es dans la relation \u00ab Sejours \u00bb avec la requ\u00eate suivante : SQL<pre><code>DELETE FROM Sejours\nWHERE IdClient = 4\n</code></pre>   !!! tip \"A noter\"     Afin d'\u00e9viter le plus possible les anomalies (lignes orphelines dans une relation), il est primordial d'avoir bien r\u00e9fl\u00e9chi \u00e0 la structure de la base de donn\u00e9es.       Il est aussi imp\u00e9ratif de bien savoir le risque que l'on prend lorsqu'on supprime des donn\u00e9es. Il est souvent recommand\u00e9 de faire une sauvegarde avant toute suppression."},{"location":"cours/Le_langage_SQL/Exercice_bilan.html","title":"Exercice bilan","text":"<p>Consid\u00e9rons la base de donn\u00e9es Mondial. Il s\u2019agit d\u2019une BDR qui compile un certain nombre de donn\u00e9es g\u00e9ographiques et qui est g\u00e9r\u00e9e par l\u2019universit\u00e9 de G\u00f6ttingen. On retrouvera en annexe de ce document une description d\u2019une partie du sch\u00e9ma relationnel de cette base de donn\u00e9es disponible ici.</p>   1. __Requ\u00eates de base__ R\u00e9diger une requ\u00eate SQL pour obtenir :   1. La liste des continents et de leurs superficies, tri\u00e9s par superficie croissante. 2. La liste des capitales mondiales, tri\u00e9es par ordre alphab\u00e9tique. 3. Le nom, la ville et la date de fondation des quatre plus anciennes organisations mondiales. 4. Le nom des volcans de plus de 6 000 m\u00e8tres. 5. Les dix villes les plus peupl\u00e9es au monde.     2. __Jointures__ R\u00e9diger une requ\u00eate SQL pour obtenir :   1. Le nom des pays membres des Nations Unies, tri\u00e9s par ordre alphab\u00e9tique. 2. Les monarchies constitutionnelles. 3. Les fleuves de France (c\u2019est-\u00e0-dire les rivi\u00e8res de France qui se jettent dans la mer). 4. Le nom des montagnes d\u2019Alaska de plus de 5 000 m\u00e8tres. 5. Les trois plus hautes montagnes africaines.     3. __Fonctions d\u2019agr\u00e9gation__ R\u00e9diger une requ\u00eate SQL pour obtenir :   1. La longueur moyenne des fleuves qui se jettent dans la Mer Noire. 2. Le nombre de rivi\u00e8res fran\u00e7aises pr\u00e9sentes dans la base de donn\u00e9es. 3. Le nombre total de pays travers\u00e9s par chacun des fleuves se jetant dans la mer M\u00e9diterran\u00e9e.    !!! tip \"__Remarques__\"     Lorsqu'on souhaite appliquer une fonction d'agr\u00e9gation (une somme dans notre cas) sur plusieurs attributs (plusieurs fleuves ici) qu'on appelle alors __cl\u00e9 de groupe__, on utilise l'op\u00e9rateur __GROUP BY__ suivi de la cl\u00e9 de groupe. Cette requ\u00e8te s'\u00e9crira alors :     SQL<pre><code>SELECT ... FROM ... GROUP BY ...\n</code></pre>     On peut m\u00eame rajouter une condition suppl\u00e9mentaire sur la cl\u00e9 de groupe gr\u00e2ce \u00e0 l'op\u00e9rateur __HAVING__ (combin\u00e9 \u00e0 __GROUP BY__).       Dans notre exemple, on ne pourrait s'int\u00e9resser par exemple qu'aux fleuves d'une longueur sup\u00e9rieure \u00e0 500 km :     SQL<pre><code>SELECT ... FROM ... GROUP BY ...\nHAVING River.length &gt; 500\n</code></pre>   4. Les organisations regroupant plus de 100 pays, avec la population totale de ceux-ci. 5. La liste des pays des Am\u00e9riques avec leur plus haute montagne."},{"location":"cours/Le_langage_SQL/Exercice_bilan.html#annexe-la-base-de-donnees-mondial","title":"Annexe : la base de donn\u00e9es Mondial","text":"<p>Voici une partie du sch\u00e9ma relationnel de la base de donn\u00e9es Mondial. Sont soulign\u00e9s le ou les attributs constituant la cl\u00e9 primaire de chacune des tables.  Continent : Name, Area ; </p> __Country__ : Name, Code, Capital, Province, Area, Population ; (Province est la r\u00e9gion de la capitale) <p></p> __City__ : Name, Country, Province, Population, Longitude, Latitude ; (Country est le code du pays) <p> Encompasses : Country, Continent, Percentage ;  </p> __Borders__ : Country1, Country2, Length ; (Country1 &lt; Country2 pour l\u2019ordre lexicographique) <p> </p> __Organization__ : Abbreviation, Name, City, Country, Province, Established ; (Established est la date de fondation) <p> IsMember : Country, Organization, Type ;  Population : Country, Population_growth, infant_mortality ;  </p> __Economy__ : Country, GDP, Agriculture, Service, Industry, Inflation ; (GDP est le PIB) <p> </p> __Politics__ : Country, Independence, Dependent, Government ; (Ind\u00e9pendance est une date, Dependent l\u2019ex-pays colonisateur) <p> Language : Name, Country, Percentage ;  EthnicGroup : Name, Country, Percentage ;  Religion : Name, Country, Percentage ;  Mountain : Name, Mountains, Elevation, Type, Longitude, Latitude ;  Geo_Mountain : Mountain, Country, Province ;  Sea : Name, Depth ;  Geo_Sea : Sea, Country, Province ;  Lake : Name, Area, Depth, Elevation, Type, River, Longitude, Latitude ;  Geo_Lake : Lake, Country, Province ;  </p> __River__ : Name, River, Lake, Sea, Length ; (la rivi\u00e8re se jette dans une rivi\u00e8re, un lac ou la mer) <p> Geo_River : River, Country, Province.</p>"},{"location":"cours/Le_langage_SQL/Exercices_sur_le_langage_SQL.html","title":"Exercices","text":""},{"location":"cours/Le_langage_SQL/Exercices_sur_le_langage_SQL.html#exercice-1","title":"Exercice 1","text":"<p>Donner l'expression SQL des requ\u00eates suivantes ainsi que le r\u00e9sultat obtenu :</p>   1. Noms des stations ayant strictement plus de 200 places. 2. Noms des clients dont le nom commence par \u00ab J \u00bb ou dont le solde est sup\u00e9rieur \u00e0 10000. 3. Noms des stations qui proposent de la plong\u00e9e. 4. Noms des clients qui sont all\u00e9s \u00e0 La Bourboule. 5. Noms des stations visit\u00e9es par des europ\u00e9ens.   <p>Correction de l'exercice</p>"},{"location":"cours/Le_langage_SQL/Exercices_sur_le_langage_SQL.html#exercice-2","title":"Exercice 2","text":"<p>Donner l'expression SQL des requ\u00eates suivantes ainsi que le r\u00e9sultat obtenu :</p> <ol> <li>Combien de s\u00e9jours ont eu lieu \u00e0 Victoria ? On stockera le r\u00e9sultat dans une colonne nomm\u00e9e Total.</li> <li>Donner le prix moyen d'une activit\u00e9 \u00e0 Tanger. On stockera le r\u00e9sultat dans une colonne nomm\u00e9e Prix Moyen Activites Tanger.</li> </ol> <p>Correction de l'exercice</p>"},{"location":"cours/Le_langage_SQL/Exercices_sur_le_langage_SQL.html#exercice-3","title":"Exercice 3","text":"<ol> <li>Donner l'expression SQL de la requ\u00eate permettant d'afficher la liste des stations suivie du lieu (en majuscule) entre parenth\u00e8ses et du tarif HT et TTC comme le montre l'exemple suivant : <p> Stations Tarif HT Tarif TTC Tanger (MAROC) 1200 1440 La Bourboule (AUVERGNE) 700 840 Courchevel (ALPES) 2200 2640 Victoria (SEYCHELLES) 1500 1800 <p></p> <p>On supposera que le prix saisi dans la base est le tarif HT et que le taux de TVA est de 20 %.</p> <ol> <li>Les donn\u00e9es qui correspondent au tarif TTC des stations sont-elles stock\u00e9es dans la base de donn\u00e9es ?</li> </ol> <p>Correction de l'exercice</p>"},{"location":"cours/Le_langage_SQL/Exercices_sur_le_langage_SQL.html#exercice-4","title":"Exercice 4","text":"<ol> <li>Donner l'expression SQL des requ\u00eates permettant d'ajouter la cliente venant de Toronto (Canada) suivante : Mme Karibou Juliette avec un solde de 7213 \u20ac. Cette cliente a s\u00e9journ\u00e9 (3 places) \u00e0 La Bourboule le 10/07/2020. <ol> <li>Peut-on, dans l'\u00e9tat, ajouter \u00e0 cette base que Mme Karibou a fait de la randonn\u00e9e ? </li> </ol> <p>Correction de l'exercice</p>"},{"location":"cours/Le_langage_SQL/Exercices_sur_le_langage_SQL.html#exercice-5","title":"Exercice 5","text":"<ol> <li>Donner l'expression SQL de la requ\u00eate permettant de mettre \u00e0 jour la capacit\u00e9 de la station Courchevel \u00e0 450 places ainsi que le nouveau tarif de 2300 \u20ac. <ol> <li>Peut-on changer ici le nom de l'attribut Prix en Prix HT de la relation \u00ab Activites \u00bb par une requ\u00eate de type UPDATE ? </li> </ol> <p>Correction de l'exercice</p>"},{"location":"cours/Le_langage_SQL/Exercices_sur_le_langage_SQL.html#exercice-6","title":"Exercice 6","text":"<ol> <li>Donner l'expression SQL de la requ\u00eate permettant de supprimer tout ce qui concerne Mme Karibou (donn\u00e9es ins\u00e9r\u00e9es dans le cadre de l'exercice 4). On supposera que la structure est bien correcte, \u00e0 savoir que l'attribut IdClient de la relation \u00ab Sejours \u00bb est bien une cl\u00e9 \u00e9trang\u00e8re li\u00e9e en r\u00e9f\u00e9rence \u00e0 l'attribut Id de la relation \u00ab Clients \u00bb. <ol> <li>Que faire si la cl\u00e9 \u00e9trang\u00e8re n'a pas \u00e9t\u00e9 d\u00e9finie dans la relation \u00ab Sejours \u00bb ? </li> </ol> <p>Correction de l'exercice</p>"},{"location":"cours/Le_langage_SQL/Le_langage_SQL.html","title":"Le langage SQL","text":""},{"location":"cours/Le_langage_SQL/Le_langage_SQL.html#le-modele-physique-sgbd-relationnel","title":"Le mod\u00e8le physique : SGBD relationnel","text":""},{"location":"cours/Le_langage_SQL/Le_langage_SQL.html#presentation","title":"Pr\u00e9sentation","text":"<p>Un Syst\u00e8me de Gestion de Bases de Donn\u00e9es (SGBD) doit r\u00e9pondre aux objectifs suivants :</p> Ind\u00e9pendance physique <p>La fa\u00e7on dont les donn\u00e9es sont d\u00e9finies doit \u00eatre ind\u00e9pendante des structures de stockage utilis\u00e9es. </p> Ind\u00e9pendance logique <p>Un m\u00eame ensemble de donn\u00e9es peut \u00eatre vu diff\u00e9remment par des utilisateurs diff\u00e9rents. Toutes ces visions personnelles des donn\u00e9es doivent \u00eatre int\u00e9gr\u00e9es dans une vision logique.</p> Acc\u00e8s aux donn\u00e9es <p>L'acc\u00e8s aux donn\u00e9es se fait par l'interm\u00e9diaire d'un Langage de Manipulation de Donn\u00e9es (LMD). Il est crucial que ce langage permette d'obtenir des r\u00e9ponses aux requ\u00eates en un temps \u00ab raisonnable \u00bb. Le LMD doit donc \u00eatre optimis\u00e9 afin de minimiser l'acc\u00e8s disques et tout cela de fa\u00e7on totalement transparente pour l'utilisateur.</p> Administration centrale des donn\u00e9es (int\u00e9gration) <p>Toutes les donn\u00e9es doivent \u00eatre centralis\u00e9es dans un r\u00e9sevoir unique commun \u00e0 toutes les applications. En effet, des visions diff\u00e9rentes des donn\u00e9es (entre autres) se r\u00e9solvent plus facilement si les donn\u00e9es sont administr\u00e9es de fa\u00e7on centralis\u00e9e.</p> Non-redondance des donn\u00e9es <p>Afin d'\u00e9viter les probl\u00e8mes lors des mises \u00e0 jour, chaque donn\u00e9e ne doit \u00eatre pr\u00e9sente qu'une seule fois dans la base.</p> Coh\u00e9rence des donn\u00e9es <p>Les donn\u00e9es sont soumises \u00e0 un certain nombre de contraintes d'int\u00e9grit\u00e9 qui d\u00e9finissent un \u00e9tat coh\u00e9rent de la base. Elles doivent pouvoir \u00eatre exprim\u00e9es simplement et v\u00e9rifi\u00e9es automatiquement \u00e0 chaque insertion, modification ou suppression de donn\u00e9es. Les contraintes d'int\u00e9grit\u00e9 sont d\u00e9crites dans le Langage de Description des Donn\u00e9es (LDD).</p> Partage des donn\u00e9es <p>Il s'agit de permettre \u00e0 plusieurs utilisateurs d'acc\u00e9der aux m\u00eames donn\u00e9es au m\u00eame moment de mani\u00e8re transparente. Si ce probl\u00e8me est simple \u00e0 r\u00e9soudre quand il s'agit uniquement d'interrogations, cela ne l'est plus quand il s'agit de modifications dans un contexte multiutilisateurs, car il faut permettre \u00e0 deux utilisateurs (ou plus) de modifier la m\u00eame donn\u00e9e \u00ab en m\u00eame temps \u00bb et assurer un r\u00e9sultat d'interrogation coh\u00e9rent pour un utilisateur consultant une table pendant qu'un autre la modifie.</p> S\u00e9curit\u00e9 des donn\u00e9es <p>Les donn\u00e9es doivent pouvoir \u00eatre prot\u00e9g\u00e9es contre les acc\u00e8s non autoris\u00e9s. Pour cela, il faut pouvoir associer \u00e0 chaque utilisateur des droits d'acc\u00e8s aux donn\u00e9es.</p> R\u00e9sistance aux pannes <p>Que se passe-t-il si une panne survient au milieu d'une modification, si certains fichiers contenant les donn\u00e9es deviennent illisibles ? Il faut pouvoir r\u00e9cup\u00e9rer une base de donn\u00e9es dans un \u00e9tat \u00ab sain \u00bb. Ainsi, apr\u00e8s une panne intervenant au milieu d'une modification, deux solutions sont possibles : soit r\u00e9cup\u00e9rer les donn\u00e9es dans l'\u00e9tat dans lequel elles \u00e9taient avant la modification, soit terminer l'op\u00e9ration interrompue.</p> <p>Parmi les SGBD les plus connus, on peut citer : SQLite, MySQL, PostgreSQL, Oracle Database, Microsoft SQL Server, Microsoft Access.</p> <p>Dans la suite de ce chapitre, on se basera sur l'utilisation du SGBD SQLite (syst\u00e8me libre). Ce syst\u00e8me, tr\u00e8s r\u00e9pandu dans le monde, n'est pas un serveur mais un moteur de base de donn\u00e9es embarqu\u00e9 dans du code. On le trouve dans Thunderbird, Firefox, les gestionnaires de biblioth\u00e8ques de musiques... c'est pourquoi on retrouve certainement ce SGBD dans votre smartphone et PC. Ainsi, il y aurait mille milliards de bases de donn\u00e9es SQLite actives dans le monde !!! SQLite pr\u00e9sente aussi l\u2019avantage d\u2019\u00eatre pr\u00e9sent dans la biblioth\u00e8que standard de Python. Cela signifie que vous pouvez \u00e9crire en Python une application contenant son propre SGBD int\u00e9gr\u00e9 \u00e0 l\u2019aide du module sqlite3.  Le langage utilis\u00e9 dans ce cours est le langage SQL dans sa version SQL2. On notera qu\u2019il existe quelques diff\u00e9rences entre les dialectes SQL utilis\u00e9s par les diff\u00e9rents SGBD. Ces diff\u00e9rences seront indiqu\u00e9es le cas \u00e9ch\u00e9ant.</p>"},{"location":"cours/Le_langage_SQL/Le_langage_SQL.html#conventions-decriture","title":"Conventions d'\u00e9criture","text":"<p>On veillera \u00e0 ne jamais utiliser d'espaces ou d'accents dans les noms de bases de donn\u00e9es, de relations et d'attributs. On \u00e9vitera \u00e9galement d'utiliser des mots r\u00e9serv\u00e9s. Par \u00ab mots r\u00e9serv\u00e9s \u00bb, on entend un mot-cl\u00e9 SQL, donc un mot qui sert \u00e0 d\u00e9finir quelque chose dans le langage SQL. On pourra trouver une liste exhaustive de ces mots r\u00e9serv\u00e9s dans la documentation officielle du langage SQL.  Une convention largement r\u00e9pandue veut que les commandes et mots-cl\u00e9s SQL soient \u00e9crits compl\u00e9tement en majuscules. Nous respecterons cette convention; il est plus facile de relire une commande de 5 lignes lorsque l'on peut diff\u00e9rencier au premier coup d'oeil les commandes SQL des noms des relations et des attributs.</p>"},{"location":"cours/Le_langage_SQL/Le_langage_SQL.html#manipulation-de-donnees","title":"Manipulation de donn\u00e9es","text":""},{"location":"cours/Le_langage_SQL/Le_langage_SQL.html#generalites","title":"G\u00e9n\u00e9ralit\u00e9s","text":"<p>Dans cette partie, nous allons nous int\u00e9resser au langage SQL dans sa partie interrogation et manipulation de donn\u00e9es (insertion, mise \u00e0 jour, destruction), donc dans la partie LMD de la plupart des SGBD. Il existe bien \u00e9videmment des manipulations bien plus avanc\u00e9es qui d\u00e9passent le cadre du programme de NSI.  Pour la suite de ce chapitre, nous prendrons en exemple la petite base de donn\u00e9es suivante constitu\u00e9e de 4 relations :  NomStation Capacite Lieu Region Tarif Tanger 350 Maroc Afrique 1200 La Bourboule 250 Auvergne Europe 700 Victoria 200 Seychelles Oc\u00e9an Indien 1500 Courchevel 400 Alpes Europe 2200 <p>Relation \u00ab Stations \u00bb</p> <p> NomStation Libelle Prix La Bourboule P\u00eache 50 La Bourboule Randonn\u00e9e 0 Tanger Plong\u00e9e 120 Tanger Excursion 60 Victoria Plong\u00e9e 130 Courchevel Ski 120 <p>Relation \u00ab Activites \u00bb</p> <p> Id Nom Prenom Ville R\u00e9gion Solde 1 Bauer Elmut Berlin Europe 9825 2 Smith John Londres Europe 12436 3 Jonhson Britney New York Am\u00e9rique 6721 <p>Relation \u00ab Clients \u00bb</p> <p> IdClient Station Arrivee NbPlaces 1 Courchevel 17/02/2021 2 3 Tanger 17/11/2020 5 2 Courchevel 28/01/2020 4 3 La Bourboule 20/07/2018 3 3 Victoria 13/09/2017 6 2 La Bourboule 13/08/2021 3 3 Courchevel 27/02/2019 5 1 Victoria 05/09/2020 3 <p>Relation \u00ab Sejours \u00bb</p> <p>  On peut t\u00e9l\u00e9charger cette base de donn\u00e9es ici et l'ouvrir avec le logiciel DB Browser for SQLite (voir la pr\u00e9sentation dans le menu \u00e0 gauche). </p>"},{"location":"cours/Le_langage_SQL/Le_langage_SQL.html#requetes-dinterrogation-select","title":"Requ\u00eates d'interrogation : SELECT","text":"<p>L'utilisation la plus courante consiste \u00e0 lire des donn\u00e9es issues de la base de donn\u00e9es. Cela s'effectue gr\u00e2ce \u00e0 la commande SELECT, qui retourne des enregistrements dans un tableau de r\u00e9sultats.</p>"},{"location":"cours/Le_langage_SQL/Le_langage_SQL.html#selections-simples","title":"S\u00e9lections simples","text":"<p>Prenons l'exemple o\u00f9 l'on souhaite extraire de notre base de donn\u00e9es le nom et le lieu de toutes les stations se trouvant en Europe. La requ\u00eate s'effectue de la mani\u00e8re suivante :</p> SQL<pre><code>SELECT NomStation, Lieu\nFROM Stations\nWHERE Region = 'Europe'\n</code></pre> <p>Cette requ\u00e8te est constitu\u00e9e de 3 clauses :</p> SELECTFROMWHERE <p>On trouve ici les attributs (colonnes) que l'on souhaite extraire (afficher).</p> <p>Dans cette clause, il y a toutes les tables dans lesquelles on trouve les attributs utiles \u00e0 la requ\u00eate.</p> <p>Il s'agit ici d'indiquer les conditions que doivent satisfaire les tuples (les lignes) de la base pour faire partie du r\u00e9sultat.</p> <p>Le r\u00e9sultat obtenu est le suivant :</p> <p> NomStation Lieu La Bourboule Auvergne Courchevel Alpes <p></p> <p>Remarques</p> <ul> <li>Le r\u00e9sultat d'une requ\u00eate est une relation (table) dont les attributs sont ceux s\u00e9lectionn\u00e9s dans la clause SELECT.</li> <li>Pour s\u00e9lectionner toutes les colonnes, on utilise le caract\u00e8re \u00ab * \u00bb. Par exemple :     SQL<pre><code>SELECT * FROM Stations\n</code></pre></li> <li>Dans la clause WHERE, on sp\u00e9cifie une condition bool\u00e9enne. On utilise alors les mots cl\u00e9s standards de la logique bool\u00e9enne, c'est-\u00e0-dire AND, OR et NOT. On peut \u00e9galement utiliser les op\u00e9rateurs de comparaison \\(&lt;\\) , \\(&lt;=\\) (pour \\(\\le\\)), \\(&gt;\\) , \\(&gt;=\\) (pour \\(\\ge\\)), \\(=\\) et \\(&lt;&gt;\\) (pour \\(\\ne\\)).</li> </ul>"},{"location":"cours/Le_langage_SQL/Le_langage_SQL.html#la-recherche-floue","title":"La recherche \u00ab floue \u00bb","text":"<p>Il est parfois utile de rechercher les enregistrements dans la base de donn\u00e9es dont la valeur d'un attribut commence par telle ou telle lettre. Pour cela, on utilise l'op\u00e9rateur LIKE dans la clause WHERE. Par exemple, la requ\u00eate suivante recherchera dans la base de donn\u00e9es les clients dont le nom commence par \u00ab B \u00bb :</p> <p>SQL<pre><code>SELECT Nom\nFROM Clients\nWHERE Nom LIKE 'B%'\n</code></pre> Le r\u00e9sultat obtenu est le suivant :</p> <p> Nom Bauer <p> Les mod\u00e8les de recherche sont multiples :</p>   * `LIKE '%a'` recherche toutes les valeurs de l'attribut qui se terminent par le caract\u00e8re \u00ab a \u00bb. * `LIKE 'a%'` recherche toutes les valeurs de l'attribut qui commencent par le caract\u00e8re \u00ab a \u00bb. * `LIKE '%a%'` recherche toutes les valeurs de l'attribut qui contiennent le caract\u00e8re \u00ab a \u00bb. * `LIKE 'pa%on'` recherche toutes les valeurs de l'attribut qui commencent par la cha\u00eene \u00ab pa \u00bb et qui se termine par \u00ab on \u00bb.   <p>Remarques</p> <ul> <li>Le caract\u00e8re \u00ab % \u00bb peut \u00eatre remplac\u00e9 par un nombre incalculable de caract\u00e8res. Si on souhaite prendre en compte le nombre de caract\u00e8res dans notre recherche, on utilise le caract\u00e8re \u00ab _ \u00bb. Par exemple, <code>LIKE 'J___'</code> recherche toutes les valeurs de l'attribut qui ont quatre caract\u00e8res et qui commencent par \u00ab J \u00bb.</li> <li>Dans certaines SGBD, le caract\u00e8re \u00ab % \u00bb est remplac\u00e9 par le caract\u00e8re \u00ab * \u00bb.</li> </ul>"},{"location":"cours/Le_langage_SQL/Le_langage_SQL.html#eviter-les-doublons","title":"Eviter les doublons","text":"<p>Bien que la sp\u00e9cification des cl\u00e9s permette d'\u00e9viter les doublons dans les relations stock\u00e9es dans la base de donn\u00e9es, il peut ne pas en \u00eatre de m\u00eame pour le r\u00e9sultat de la requ\u00eate. Par exemple, la requ\u00eate suivante donnera autant de lignes dans la relation r\u00e9sultat que de lignes dans la relation \u00ab Activites \u00bb : </p> <p>SQL<pre><code>SELECT Libelle\nFROM Activites\n</code></pre> R\u00e9sultat :</p> <p> Libelle P\u00eache Randonn\u00e9e Plong\u00e9e Excursion Plong\u00e9e Ski <p> Pour \u00e9viter d'obtenir deux lignes identiques, on utilise le mot-cl\u00e9 DISTINCT.</p> <p>SQL<pre><code>SELECT DISTINCT Libelle\nFROM Activites\n</code></pre> R\u00e9sultat :</p> <p> Libelle P\u00eache Randonn\u00e9e Plong\u00e9e Excursion Ski <p></p>"},{"location":"cours/Le_langage_SQL/Le_langage_SQL.html#trier-le-resultat","title":"Trier le r\u00e9sultat","text":"<p>Il est possible de trier le r\u00e9sultat d'une requ\u00eate avec la clause ORDER BY suivie de la liste des attributs suivie des mots-cl\u00e9s ASC pour un tri par ordre ascendant ou DESC pour un tri par ordre descendant. Si ces mots-cl\u00e9s ne sont pas pr\u00e9sents, par d\u00e9faut c'est le mot-cl\u00e9 ASC qui est utilis\u00e9.</p> <p>SQL<pre><code>SELECT *\nFROM Stations\nORDER BY Region ASC, Lieu DESC\n</code></pre> Le r\u00e9sultat obtenu est le suivant :</p> <p> NomStation Capacite Lieu Region Tarif Tanger 350 Maroc Afrique 1200 La Bourboule 250 Auvergne Europe 700 Courchevel 400 Alpes Europe 2200 Victoria 200 Seychelles Oc\u00e9an Indien 1500 <p></p> <p>Remarque</p> <p>L'ordre ascendant correspond au tri par ordre alphab\u00e9tique lorsque l'attribut est de type cha\u00eene de caract\u00e8res.</p> <p>Il est possible de limiter le nombre de r\u00e9sultats d'une requ\u00eate grace \u00e0 la clause LIMIT. Ainsi, si l'on ne veut que les trois premiers r\u00e9sultats de la pr\u00e9c\u00e9dente requ\u00eate, on interroge la base de la mani\u00e8re suivante :</p> SQL<pre><code>SELECT *\nFROM Stations\nORDER BY Region ASC, Lieu DESC\nLIMIT 3\n</code></pre> <p> NomStation Capacite Lieu Region Tarif Tanger 350 Maroc Afrique 1200 La Bourboule 250 Auvergne Europe 700 Courchevel 400 Alpes Europe 2200 <p></p>"},{"location":"cours/Le_langage_SQL/Le_langage_SQL.html#usages-avances","title":"Usages avanc\u00e9s","text":"<p>Dans le langage SQL, on peut interagir de mani\u00e8re dynamique avec la base de donn\u00e9es comme par exemple :</p>   * Appliquer des fonctions aux valeurs de chaque ligne : il s'agit principalement d'op\u00e9rations math\u00e9matiques pour les attributs num\u00e9riques (+, \\*, ...) o\u00f9 de manipulations de cha\u00eenes de caract\u00e8res (concat\u00e9nation, minuscules, majuscules ...). * Renommer les attributs de la relation r\u00e9sultat : souvent on utilise cette fonctionnalit\u00e9 pour donner plus de clart\u00e9 dans la lecture du r\u00e9sultat. <p>Par exemple, la requ\u00eate suivante donnera une relation plus \u00ab lisible \u00bb :</p> <p>SQL<pre><code>SELECT CONCAT(Prenom,'',UPPER(Nom)) AS Individu, Ville\nFROM Clients\n</code></pre> Individu Ville Elmut BAUER Berlin John SMITH Londres Britney JONHSON New York <p></p> <p>Remarques</p> <ul> <li>La fonction CONCAT permet de concat\u00e9ner plusieurs attributs. Cette fonction, standardis\u00e9e dans le langage SQL n'est pas support\u00e9e par le moteur SQLite. Au lieu de cel\u00e0, il utilise l'op\u00e9rateur de concat\u00e9nation <code>||</code> pour fusionner deux cha\u00eenes de caract\u00e8res en une seule. Ce qui donne dans notre exemple :     SQL<pre><code>SELECT Prenom || ' ' || UPPER(Nom) AS Individu, Ville\nFROM Clients\n</code></pre></li> <li>La fonction UPPER, quant \u00e0 elle, permet de transformer l'attribut, initialement en minuscules, en majuscules.</li> <li>Le mot-cl\u00e9 AS permet de renommer l'attribut. On utilise un alias permettant de faciliter la lecture du r\u00e9sultat.</li> </ul>"},{"location":"cours/Le_langage_SQL/Le_langage_SQL.html#requetes-sur-plusieurs-tables-jointures","title":"Requ\u00eates sur plusieurs tables (jointures)","text":"D\u00e9finition <p>On appelle jointure l'op\u00e9ration consistant \u00e0 rapprocher selon une condition les tuples de deux relations d'une base de donn\u00e9es afin de former une troisi\u00e8me relation qui contient l'ensemble de tous les tuples obtenus en concat\u00e9nant un tuple de la premi\u00e8re relation et un tuple de la seconde v\u00e9rifiant la condition de rapprochement.</p> <p>Essayons par exemple d'interroger la base de donn\u00e9es pour donner le nom des clients avec le nom des stations o\u00f9 ils ont s\u00e9journ\u00e9. L'information concernant le nom du client est dans la relation \u00ab Clients \u00bb tandis que le lien client/s\u00e9jour se trouve dans la relation \u00ab Sejours \u00bb. On joint ainsi les lignes de nos 2 relations.</p> <p>SQL<pre><code>SELECT Nom, Station FROM Clients\nINNER JOIN Sejours ON id = idClient\n</code></pre> Nom Station Bauer Courchevel Jonhson Tanger Smith Courchevel Jonhson La Bourboule Jonhson Victoria Smith La Bourboule Jonhson Courchevel Bauer Victoria <p> Il arrive souvent qu'un m\u00eame nom d'attribut soit utilis\u00e9 dans plusieurs relations. Dans ce cas, il faut pr\u00e9fixer le nom de l'attribut par le nom de la relation. Par exemple, essayons d'effectuer une recherche des stations avec leurs lieux et r\u00e9gions ainsi que leurs activit\u00e9s et leurs tarifs :</p> <p>SQL<pre><code>SELECT Stations.NomStation, Lieu, Region, Libelle, Prix\nFROM Stations\nINNER JOIN Activites ON Stations.NomStation = Activites.NomStation\n</code></pre> NomStation Lieu Region Libelle Prix Tanger Maroc Afrique Excursion 60 Tanger Maroc Afrique Plong\u00e9e 120 La Bourboule Auvergne Europe P\u00eache 50 La Bourboule Auvergne Europe Randonn\u00e9e 0 Victoria Seychelles Oc\u00e9an Indien Plong\u00e9e 130 Courchevel Alpes Europe Ski 120 <p> Dans un souci d'all\u00e9ger l'\u00e9criture des requ\u00eates, on utilise souvent des alias raccourcis pour remplacer le nom des relations. On peut ainsi r\u00e9crire la requ\u00eate pr\u00e9c\u00e9dente en utilisant les alias :</p> SQL<pre><code>SELECT s.NomStation, Lieu, Region, Libelle, Prix\nFROM Stations AS s\nINNER JOIN Activites AS a ON s.NomStation = a.NomStation\n</code></pre> <p>Remarque</p> <p>Le mot-cl\u00e9 INNER est facultatif.</p> <p>On peut \u00e9galement faire une jointure avec plus de 2 relations. Essayons d'interroger la base de donn\u00e9es pour donner le nom des clients avec les noms des stations ainsi que les r\u00e9gions o\u00f9 ils ont s\u00e9journ\u00e9 :</p> SQL<pre><code>SELECT c.Nom, se.Station, s.Region\nFROM ((Clients AS c INNER JOIN Sejours AS se ON c.Id = se.Idclient)\nINNER JOIN Stations AS s ON se.Station = s.NomStation)\n</code></pre> <p> Nom Station Region Bauer Courchevel Europe Jonhson Tanger Afrique Smith Courchevel Europe Jonhson La Bourboule Europe Jonhson Victoria Oc\u00e9an Indien Smith La Bourboule Europe Jonhson Courchevel Europe Bauer Victoria Oc\u00e9an Indien <p> Cette jointure correspond \u00e0 l'intersection de la th\u00e9orie des ensembles.  <p> </p>"},{"location":"cours/Le_langage_SQL/Le_langage_SQL.html#les-fonctions-dagregation","title":"Les fonctions d'agr\u00e9gation","text":"<p>Les fonctions d'agr\u00e9gation dans le langage SQL permettent d'effectuer des op\u00e9rations statistiques sur une colonne (en g\u00e9n\u00e9ral de type num\u00e9rique). Les principales fonctions sont les suivantes :</p>   * `COUNT()` pour compter le nombre d'enregistrements sur une table ou une colonne distincte. * `MAX()` pour r\u00e9cup\u00e9rer la valeur maximum d'une colonne sur un ensemble de lignes. * `MIN()` pour r\u00e9cup\u00e9rer la valeur minimum de la m\u00eame mani\u00e8re que `MAX()`. * `SUM()` pour calculer la somme d'un attribut sur un ensemble d'enregistrements. * `AVG()` pour calculer la moyenne d'un attribut sur un ensemble d'enregistrements.   <p>Essayons de savoir combien il y a de stations en Europe dans la relation \u00ab Stations \u00bb :</p> <p>SQL<pre><code>SELECT COUNT(NomStation) AS Nombre\nFROM Stations WHERE Region = 'Europe'\n</code></pre> Nombre 2 <p> Essayons maintenant de savoir le tarif minimum, maximum et moyen des stations.</p> <p>SQL<pre><code>SELECT MIN(Tarif) AS Mini, MAX(Tarif) AS Maxi, AVG(Tarif) AS Moy\nFROM Stations\n</code></pre> Mini Maxi Moy 700 2200 1400 <p> Pour conna\u00eetre le nombre total de places que M. Smith a r\u00e9serv\u00e9 pour l'ensemble des s\u00e9jours, on peut ex\u00e9cuter la requ\u00eate suivante :</p> <p>SQL<pre><code>SELECT SUM(NbPlaces) AS Total\nFROM Sejours\nINNER JOIN Clients ON id = IdClient AND Nom = 'Smith'\n</code></pre> Total 7 <p></p>"},{"location":"cours/Le_langage_SQL/Le_langage_SQL.html#requetes-de-mises-a-jour","title":"Requ\u00eates de mises \u00e0 jour","text":""},{"location":"cours/Le_langage_SQL/Le_langage_SQL.html#insertion-de-donnees-insert-into","title":"Insertion de donn\u00e9es : INSERT INTO","text":"<p>L'insertion des donn\u00e9es s'effectue \u00e0 l'aide de la commande INSERT INTO. Cela permet d'ajouter une ou plusieurs lignes dans la relation voulue de notre base de donn\u00e9es. Par exemple, nous souhaitons ajouter un client dans la relation \u00ab Clients \u00bb :</p> SQL<pre><code>INSERT INTO clients VALUES (4, 'Yuan', 'Tchang', 'P\u00e9kin', 'Chine', 8256)\n</code></pre> <p>Si nous souhaitons ajouter plusieurs clients \u00e0 la fois, on s\u00e9pare les valeurs par une virgule. On peut \u00e9galement pour plus de clart\u00e9 aller \u00e0 la ligne apr\u00e8s le mot-cl\u00e9 VALUES :</p> SQL<pre><code>INSERT INTO clients VALUES (5, 'De Oliveira', 'Manuel', 'Porto', 'Europe', 7253),\n(6, 'Sako', 'Mamadou', 'Abidjan', 'Afrique', 2561)\n</code></pre> <p>Remarques</p> <p>Il faut bien faire attention lors de cette manipulation car il n'est pas possible d'ajouter des doublons de lignes notamment \u00e0 cause de la cl\u00e9 primaire de la relation qui est unique.</p>"},{"location":"cours/Le_langage_SQL/Le_langage_SQL.html#suppression-de-donnees-delete-from","title":"Suppression de donn\u00e9es : DELETE FROM","text":"<p>La commande DELETE permet de supprimer des lignes dans une relation. En utilisant cette commande associ\u00e9e \u00e0 la clause WHERE, il est possible de s\u00e9lectionner les lignes qui seront supprim\u00e9es.</p> <p>Conseils</p> <p>Avant d'essayer de supprimer des lignes, il est recommand\u00e9 d'effectuer une sauvegarde de la base de donn\u00e9es, ou tout du moins de la table concern\u00e9e par la suppression. Ainsi, s'il y a une mauvaise manipulation, il est toujours possible de restaurer les donn\u00e9es.</p> <p>Essayons de supprimer dans notre relation \u00ab Clients \u00bb les trois individus que l'on a ajout\u00e9 dans le paragraphe pr\u00e9c\u00e9dent :</p> SQL<pre><code>DELETE FROM Clients\nWHERE Id &gt;= 4\n</code></pre> <p>Remarques</p> <p>Si la clause WHERE n'est pas pr\u00e9sente, cela supprimera toutes les lignes et la relation serait alors vide !</p>"},{"location":"cours/Le_langage_SQL/Le_langage_SQL.html#modification-de-donnees-update","title":"Modification de donn\u00e9es : UPDATE","text":"<p>La commande UPDATE permet d'effectuer des modifications sur des lignes existantes. Tr\u00e8s souvent, cette commande est utilis\u00e9e avec la clause WHERE pour sp\u00e9cifier sur quelles lignes doivent porter la ou les modifications. Essayons de modifier la valeur de l'attribut Solde de l'individu pr\u00e9nomm\u00e9 John dans la relation \u00ab Clients \u00bb :</p> SQL<pre><code>UPDATE Clients SET Solde = 11728\nWHERE Prenom = 'John'\n</code></pre> <p>Nous pouvons aussi mettre \u00e0 jour plusieurs attributs et appliquer des formules dans la m\u00eame requ\u00eate. Par exemple, essayons de modifier en majuscule les libell\u00e9s et tous les prix des activit\u00e9s ayant subi une augmentation de 10 %.</p> SQL<pre><code>UPDATE Activites SET Libelle = UPPER(Libelle), Prix = Prix * 1.1\n</code></pre>"},{"location":"cours/Le_langage_SQL/Memento_SQL.html","title":"Memento SQL","text":"<p> <p> </p>"},{"location":"cours/Le_langage_SQL/Mini_projet.html","title":"Mini-projet","text":"<p>Dans cette partie sont pr\u00e9sent\u00e9s les \u00ab cahiers des charges \u00bb de mini-projets propos\u00e9s pour cr\u00e9er un Syst\u00e8me d\u2019Informations bas\u00e9 sur le mod\u00e8le relationnel.</p> <p>L\u2019objectif est de choisir un projet diff\u00e9rent par groupe de 2 ou 3 \u00e9l\u00e8ves dans la liste propos\u00e9e ci-dessous et de mod\u00e9liser, \u00e0 partir de ce cahier des charges, un Syst\u00e8me d\u2019Informations.</p> <p>Le travail demand\u00e9 consiste \u00e0 \u00e9tablir trois versions du Syst\u00e8me d\u2019Informations :</p>   1. Identification des informations et cr\u00e9ations d\u2019exemples (\u00e9l\u00e9ments) dans une seule table (ensemble). 2. Structuration de la base de donn\u00e9es en s\u2019appuyant sur la mod\u00e9lisation Entit\u00e9-Association (E/A). 3. Interrogation (requ\u00eates SQL) sur la base afin de v\u00e9rifier la coh\u00e9rence du mod\u00e8le propos\u00e9.   <p>La premi\u00e8re version permettra de relever l\u2019ensemble des informations n\u00e9cessaires et les associations entre ces informations. A partir de cette \u00e9tude, une premi\u00e8re base de donn\u00e9es sera cr\u00e9\u00e9e. Cette base sera constitu\u00e9e d'une seule table contenant toutes les informations relev\u00e9es dans le cahier des charges. On alimentera cette base avec un nombre limit\u00e9 d\u2019enregistrements (environ 20 \u00e9l\u00e9ments).</p> <p>La deuxi\u00e8me version consistera \u00e0 structurer la base en proposant un mod\u00e8le de donn\u00e9es constitu\u00e9 de plusieurs entit\u00e9s et associations. Une fois ce mod\u00e8le de donn\u00e9es \u00e9tabli, on r\u00e9partira l\u2019ensemble des informations de la premi\u00e8re version dans les tables identifi\u00e9es. Le nombre de tables sera limit\u00e9 (5 tables). On v\u00e9rifiera \u00e0 partir de ces instances de relations que la jointure sur l\u2019ensemble des tables permet de retrouver l\u2019ensemble des informations de la base de donn\u00e9es qui \u00e9taient renseign\u00e9es dans la premi\u00e8re version.</p> <p>La version finale consistera \u00e0 mettre en place des requ\u00eates SQL pour r\u00e9cup\u00e9rer les informations :</p>   1. Sur une seule table avec projections (s\u00e9lections simples) et crit\u00e8res de restriction (utilisation du `WHERE`). 2. Sur plusieurs tables par jointure et crit\u00e8res de restriction. 3. En appliquant des fonctions d\u2019agr\u00e9gats (`COUNT()`,`SUM()`,`MAX()`,`MIN()`,`AVG()`...). 4. En faisant des groupements (`GROUP BY`). 5. Puis des groupements avec crit\u00e8res de restrictions (`GROUP BY ... HAVING`).   <p>On proposera 3 requ\u00eates pour chacun de ces types de requ\u00eates.</p> Banques <p>Un organisme d\u2019agences bancaires veut mettre en place un syst\u00e8me d\u2019informations pour g\u00e9rer les agences et les comptes de leurs clients ainsi que les op\u00e9rations qu\u2019ils effectuent sur ces comptes.  Chaque agence bancaire a un nom, un num\u00e9ro d\u2019agence, le nom de la ville o\u00f9 elle se trouve, un num\u00e9ro de t\u00e9l\u00e9phone et une adresse URL. Une personne peut ouvrir un ou plusieurs comptes dans une agence bancaire. Elle doit donner son nom, son adresse, et \u00e9ventuellement son num\u00e9ro de t\u00e9l\u00e9phone.  Chaque compte a une seule date d\u2019ouverture, un num\u00e9ro d\u2019identification de compte et un type (compte de ch\u00e8ques, compte \u00e9pargne, etc.). Un compte a un seul titulaire. A l\u2019ouverture du compte le solde est nul.  Une op\u00e9ration est effectu\u00e9e par une seule personne (le titulaire du compte) et concerne au plus deux comptes : le compte \u00e9metteur et, \u00e9ventuellement, le compte recevant l\u2019op\u00e9ration. Une op\u00e9ration a un num\u00e9ro d\u2019identification, une date, une heure, un lieu, un type qui indique la nature de l\u2019op\u00e9ration : retrait par carte bancaire, versement de salaire, encaissement ou paiement de ch\u00e8que, virement de compte en compte, etc.</p> Biblioth\u00e8que <p>Un d\u00e9partement cherche \u00e0 f\u00e9d\u00e9rer les biblioth\u00e8ques municipales install\u00e9es sur son territoire. Un habitant d\u2019une commune ne peut \u00eatre inscrit que dans la biblioth\u00e8que de sa commune.  Pour emprunter des livres il doit \u00eatre \u00e0 jour de sa cotisation annuelle. Il peut emprunter directement au plus 5 livres dans sa biblioth\u00e8que et faire au plus un pr\u00eat inter-biblioth\u00e8que.  Chaque biblioth\u00e8que poss\u00e8de un ensemble de livres. Un livre est d\u00e9fini par son titre, sa cote, son (ses) auteur(s), ainsi qu\u2019un des mots-cl\u00e9s pris parmi un ensemble fix\u00e9 a priori. Parmi ces mots-cl\u00e9s on trouve les genres litt\u00e9raires (roman, essai, policier, science-fiction, vie pratique, \u2026). Un livre peut-\u00eatre en rayon, en r\u00e9serve, en entretien ou emprunt\u00e9. Dans ce dernier cas il ne peut-\u00eatre emprunt\u00e9 que par une seule personne.</p> Cin\u00e9ma <p>Une compagnie de salles de cin\u00e9mas souhaitent mettre en place un syst\u00e8me d\u2019informations sur les salles qu\u2019elle doit g\u00e9rer.  Dans cette base de donn\u00e9es pour chaque salle de cin\u00e9ma on conna\u00eet son nom, sa capacit\u00e9 et la ville o\u00f9 elle se trouve.  Pour chaque salle on doit pouvoir conna\u00eetre la date et l\u2019heure des films qui sont \u00e0 l\u2019affiche. Un film peut \u00eatre projet\u00e9 dans plusieurs salles et chaque salle peut programmer plusieurs films.  Pour chaque film on conna\u00eet le titre, un r\u00e9sum\u00e9, la date de cr\u00e9ation, la dur\u00e9e et on doit pouvoir trouver la liste des acteurs qui y ont un r\u00f4le ainsi que les informations sur le r\u00e9alisateur.  Des acteurs, on conna\u00eet leur nom, pr\u00e9nom, \u00e2ge et leur nationalit\u00e9. Des r\u00e9alisateurs, on a les m\u00eames informations et le nombre de films qu\u2019ils ont r\u00e9alis\u00e9s.</p> Colloques <p>Pour organiser un ensemble de cycle de conf\u00e9rences on souhaite disposer d\u2019un syst\u00e8me d\u2019informations.  Dans cette base de donn\u00e9es, les conf\u00e9rences se d\u00e9roulent dans des universit\u00e9s et sont constitu\u00e9es d\u2019un ensemble d\u2019expos\u00e9s. Chaque expos\u00e9 est pr\u00e9sent\u00e9 par un conf\u00e9rencier.  Une conf\u00e9rence est caract\u00e9ris\u00e9e par son nom, les dates de d\u00e9but et de fin.  Une universit\u00e9 est identifi\u00e9e par son nom, le nombre d\u2019\u00e9tudiants inscrits et la ville o\u00f9 elle se trouve.  Un expos\u00e9 est constitu\u00e9 d\u2019un titre, d\u2019un r\u00e9sum\u00e9 et sera pr\u00e9sent\u00e9 par un seul conf\u00e9rencier qui peut faire plusieurs expos\u00e9s dans diff\u00e9rentes conf\u00e9rences. Le conf\u00e9rencier est caract\u00e9ris\u00e9 par ses nom, pr\u00e9nom, \u00e2ge, son domaine de sp\u00e9cialit\u00e9, son adresse mail et l\u2019universit\u00e9 d\u2019o\u00f9 il provient.</p> Festivals <p>Une soci\u00e9t\u00e9 responsable d\u2019un certain nombre de festivals organis\u00e9s sur le territoire national souhaite mettre en place un syst\u00e8me d\u2019informations pour mieux g\u00e9rer l\u2019organisation.  Pour chaque festival on connait le nom, la ville et la p\u00e9riode (date de d\u00e9but et de fin) o\u00f9 il a lieu. On sait aussi qu\u2019il a lieu sur plusieurs journ\u00e9es.  Pour chaque journ\u00e9e, on connait la date et la liste des concerts qui auront lieu ce jour-l\u00e0.  Pour chaque concert, on connait le nom du groupe, l\u2019heure pr\u00e9vue et la dur\u00e9e du concert.  Un concert est donn\u00e9 par un groupe dont on connait le nom et le style de musique.  Tous les groupes jouent lors du festival un certain nombre d\u2019oeuvres musicales dont on connait le titre, le nom du compositeur, la date de cr\u00e9ation et la dur\u00e9e du morceau.</p> Hopital <p>On souhaite mettre en place un syst\u00e8me d\u2019informations pour g\u00e9rer les services hospitaliers sur le territoire national. Un hopital est compos\u00e9 de plusieurs services et laboratoires dans lesquels travaillent des m\u00e9decins qui consultent des patients.  On connait le nom de l\u2019hopital et la ville o\u00f9 il se trouve. On distingue chaque service et chaque laboratoire quel que soit son hopital d\u2019appartenance. Ainsi deux maternit\u00e9s, deux laboratoires de canc\u00e9rologie etc \u2026, seront bien distincts mais seront rattach\u00e9s \u00e0 un seul hopital. Pour chaque service et laboratoire, on connait leur nom.  Un m\u00e9decin ne peut exercer que dans un seul service et fait sa recherche dans un seul laboratoire. On connait le nom du m\u00e9decin, la ville o\u00f9 il exerce et sa sp\u00e9cialit\u00e9. Un service et un laboratoire sont, bien \u00e9videmment, constitu\u00e9s de plusieurs m\u00e9decins. Un patient peut consulter plusieurs m\u00e9decins d\u2019un h\u00f4pital et un m\u00e9decin peut recevoir plusieurs patients. Du patient on connait ses nom, pr\u00e9nom, date de naissance et ville o\u00f9 il habite.</p> Journalisme <p>Un organisme de presse veut cr\u00e9er une base de donn\u00e9es sur les journaux nationaux, leurs journalistes, les articles qu\u2019ils \u00e9crivent sur diff\u00e9rents sujets ainsi que les personnalit\u00e9s qu\u2019ils interviewent. Le journaliste est connu par son nom, son pr\u00e9nom, son \u00e2ge, la ville o\u00f9 il r\u00e9side et sa signature (son pseudo). Un journaliste peut travailler pour plusieurs journaux comme un journal emploie \u00e9videmment plusieurs journalistes. On doit alors pouvoir conna\u00eetre la date d\u2019entr\u00e9e du journaliste au quotidien pour lequel il r\u00e9dige des articles. On conna\u00eet le nom du quotidien et son adresse URL.  Chaque journaliste peut interviewer diff\u00e9rentes personnalit\u00e9s dont on connait le nom, pr\u00e9nom, pseudo, \u00e2ge, nationalit\u00e9 et domaine d\u2019activit\u00e9. Une personnalit\u00e9 peut bien entendu \u00eatre interview\u00e9e par plusieurs journalistes.  Les journalistes \u00e9crivent des articles dont on connait le titre et le contenu. Chaque article est relatif \u00e0 un domaine qui peut \u00eatre li\u00e9 \u00e0 une ou plusieurs personnalit\u00e9s.</p> P\u00e8re No\u00ebl <p>Le p\u00e8re Noel a d\u00e9cid\u00e9 de mettre en oeuvre un syst\u00e8me d\u2019informations permettant de faciliter la collecte des souhaits des enfants ainsi que la distribution des jouets. Pour cela il faut recencer les magasins dans les diff\u00e9rentes villes du territoire.  Les villes comme les magasins sont caract\u00e9ris\u00e9s par un nom. Les jouets peuvent \u00eatre distribu\u00e9s par plusieurs magasins.  Les jouets portent un nom (par exemple \u00ab Sherlock Holmes \u00bb), appartiennent \u00e0 une marque (\u00ab Parkeur \u00bb) et sont recommand\u00e9s pour les enfants \u00e0 partir d\u2019un certain \u00e2ge (8 ans). Un compte du nombre d\u2019articles (par exemple le nombre de boites de \u00ab Sherlock Holmes \u00bb) est repr\u00e9sent\u00e9 pour chaque magasin. D\u2019autre part chaque jouet peut \u00eatre caract\u00e9ris\u00e9 par plusieurs \u00e9tiquettes (tags). Par exemple \u00ab jeux de soci\u00e9t\u00e9 \u00bb, \u00ab jeux d\u2019adresse \u00bb, \u00ab jeux d\u2019\u00e9veil \u00bb. Les tags sont organis\u00e9s de fa\u00e7on hi\u00e9rarchique : un jeux de soci\u00e9t\u00e9 est un jouet d\u2019int\u00e9rieur, un v\u00e9lo est un jeux d\u2019ext\u00e9rieur.  L\u2019id\u00e9e est de permettre \u00e0 l\u2019utilisateur de pouvoir faire des requ\u00eates de plus en plus pr\u00e9cises (commencer par \u00ab jouet d\u2019int\u00e9rieur \u00bb puis de choisir parmi les tags correspondant \u00e0 des jouets d\u2019int\u00e9rieur). D\u2019autres hi\u00e9rarchies peuvent \u00eatre envisag\u00e9es \u2026 En particulier des hi\u00e9rarchies avec plus de niveaux. D\u2019autre part plusieurs hi\u00e9rarchies peuvent \u00eatre utilis\u00e9es.  Chaque enfant est repr\u00e9sent\u00e9 par son nom, son pr\u00e9nom ainsi que son \u00e2ge. Un enfant habite une ville et ne peut fr\u00e9quenter que les magasins de sa ville. D\u2019autre part il doit faire une liste de souhaits en fonction de ses pr\u00e9f\u00e9rences (en terme de tags) et de son \u00e2ge.</p> Restaurants <p>Une association de restaurateurs veut mettre en place un syst\u00e8me d\u2019informations pour avoir acc\u00e8s aux informations sur les restaurants de l\u2019association.  Les restaurants proposent un ensemble de menus constitu\u00e9s de diff\u00e9rents plats.  Chaque plat est connu par une recette dont on connait les ingr\u00e9dients.  Le restaurant sera d\u00e9crit par son nom, la ville o\u00f9 il se trouve, son nombre d\u2019\u00e9toiles, le nombre de tables et le nombre de couverts (nombre de personnes pouvant y manger simultan\u00e9ment) Les restaurateurs estiment que chaque plat de leur restaurant est unique et propos\u00e9 par un seul restaurant m\u00eame s\u2019il porte le m\u00eame nom, dans un autre restaurant. La redondance dans les noms de plats n\u2019est donc pas un probl\u00e8me.  Les restaurateurs se sont accord\u00e9s sur une liste de cat\u00e9gories (hors d\u2019oeuvre, entr\u00e9e, plat principal, dessert, \u2026). Pour chacun de leur plat, ils indiqueront la cat\u00e9gorie dans laquelle ils souhaitent le ranger. Chaque plat sera class\u00e9 dans une seule cat\u00e9gorie.  Un menu est constitu\u00e9 de plusieurs plats dans diff\u00e9rentes cat\u00e9gories (entr\u00e9e, plat principal, dessert \u2026). On conna\u00eet le nom et le prix de chaque menu.  Chaque plat a un nom, un prix et on peut trouver la recette qui est constitu\u00e9e d\u2019un liste d\u2019ingr\u00e9dients dont on conna\u00eet le poids dans la recette. Pour chaque ingr\u00e9dient on conna\u00eet le nom, le pays et la r\u00e9gion de production.</p> Tourisme <p>Un organisme de tourisme veut proposer \u00e0 ses clients un syst\u00e8me de r\u00e9servations de circuits touristiques constitu\u00e9 d\u2019itin\u00e9raires entre deux villes.  Les clients sont connus par leur nom, pr\u00e9nom, ville o\u00f9 ils r\u00e9sident et leur mot de passe pour acc\u00e9der aux r\u00e9servations.  Une r\u00e9servation est faite par un client et concerne un circuit. Une r\u00e9servation se fait pour un certain nombre de personnes et en deux phases (une demande et une validation).  Chaque circuit aura un nom, commencera et se terminera \u00e0 une date pr\u00e9cise pour un nombre de places limit\u00e9s. On doit connaitre le prix du circuit ainsi que le nombre de r\u00e9servations faites.  Les circuits sont constitu\u00e9s de plusieurs \u00e9tapes. Pour chaque \u00e9tape on conna\u00eet le nom des villes et les heures de d\u00e9part et d\u2019arriv\u00e9e. Une \u00e9tape se fait entre deux villes dont on conna\u00eet le nom, le pays o\u00f9 elle se trouve ainsi que le nom de l\u2019h\u00f4tel o\u00f9 seront log\u00e9s les participants.</p>"},{"location":"cours/Le_langage_SQL/Prise_en_main_DB_Browser.html","title":"Pr\u00e9sentation du logiciel DB Browser for SQLite","text":"<p>Ce logiciel gratuit et libre permet de cr\u00e9er et manipuler des bases de donn\u00e9es sans avoir besoin d\u2019un serveur (contrairement \u00e0 MySQL par exemple). Son interface est agr\u00e9able et tr\u00e8s intuitive.</p>"},{"location":"cours/Le_langage_SQL/Prise_en_main_DB_Browser.html#telechargement-et-installation","title":"T\u00e9l\u00e9chargement et installation","text":"<p>Le logiciel se trouve ici. Sur Windows, on peut choisir :</p>   * La version 64-bit qui doit \u00eatre install\u00e9e sur l\u2019ordinateur (version 32-bit pour un ordinateur ancien). * La version portable qu\u2019on peut laisser sur une cl\u00e9 USB ou sur un dossier r\u00e9seau, pour une ex\u00e9cution sans installation."},{"location":"cours/Le_langage_SQL/Prise_en_main_DB_Browser.html#utilisation","title":"Utilisation","text":"<p>Au lancement, la fen\u00eatre devrait ressembler \u00e0 cela :  <p> </p>   1. Cr\u00e9ation d\u2019une base de donn\u00e9es (onglet __Nouvelle base de donn\u00e9es__)     *  On choisit un emplacement (dossier r\u00e9seau ou cl\u00e9 USB) et un nom de fichier avec l\u2019extension \u00ab db \u00bb ou \u00ab sqlite \u00bb (par exemple *Essai.db*). *  On ajoute une table (voir point 3).   <p>ou</p>   2. Ouvrir une base de donn\u00e9es existante (onglet __Ouvrir une  base de donn\u00e9es__).      Il suffit d\u2019ouvrir le fichier pr\u00e9c\u00e9demment sauvegard\u00e9 (par exemple *Exemple_du_cours.db*). 3. Cr\u00e9ation de la structure de la base de donn\u00e9es (onglet __Structure de la base de donn\u00e9es__) :     *  Cliquer sur __Cr\u00e9er une table__.   ![Tuto](Images/DB_Browser_Original_2.png)   __(\\*)__ Types de donn\u00e9es : __INTEGER__ pour des entiers, __REAL__ pour des nombres quelconques, __TEXT__ pour du texte, etc.   __(\\*\\*)__ Cases \u00e0 cocher, suivant les cas : \u00ab *Non null* \u00bb si on ne veut pas que ce champ puisse \u00eatre vide dans un enregistrement ; \u00ab *CP* \u00bb si le champ est une cl\u00e9 primaire ; \u00ab *IA* \u00bb (incr\u00e9ment automatique) si la valeur de ce champ doit \u00eatre augment\u00e9e de 1 \u00e0 chaque nouvel enregistrement (c\u2019est souvent le cas pour un champ \u00ab __id__ \u00bb) ; \u00ab *U* \u00bb si ce champ ne peut pas comporter deux fois la m\u00eame valeur dans deux enregistrements diff\u00e9rents.  *  Recommencer pour toutes les tables n\u00e9cessaires \u00e0 la base de donn\u00e9es. *  Sauvegarder r\u00e9guli\u00e8rement\u2026     4. Ajout d\u2019enregistrements (onglet __Parcourir les donn\u00e9es__) :    <p> <p> </p> <p>(*) On remarquera que la valeur d\u2019un champ \u00ab id \u00bb est automatiquement augment\u00e9 (si la case \u00ab IA \u00bb a \u00e9t\u00e9 coch\u00e9e \u00e0 l\u2019\u00e9tape 3).  </p> <p>On peut aussi ajouter un enregistrement en SQL (voir ci-dessous) avec l\u2019instruction :</p> SQL<pre><code>INSERT INTO Activites VALUES (5, 'Do-In')\n</code></pre> <p>ou de mani\u00e8re \u00e9quivalente pour ce m\u00eame enregistrement :</p> SQL<pre><code>INSERT INTO Activites VALUES (Null, 'Do-In')\n</code></pre> <p>(\u00ab id \u00bb est automatiquement augment\u00e9 d\u2019o\u00f9 la valeur <code>Null</code>). Bien penser \u00e0 sauvegarder.</p>   5. Questionnement de la base de donn\u00e9es (onglet __Ex\u00e9cuter le SQL__) :   <p> <p> </p>"},{"location":"cours/Les_bases_de_donnees/Correction_de_l%27exercice_bilan.html","title":"Correction de l'exercice bilan       <ol> <li>On peut identifier 4 entit\u00e9s :</li> </ol>   <ul> <li>\u00ab Vendeur \u00bb et l'identifiant est \u00ab Code_ven \u00bb</li> <li>\u00ab Client \u00bb et l'identifiant est \u00ab Code_cli \u00bb </li> <li>\u00ab Facture \u00bb et l'identifiant est \u00ab Num_fact \u00bb</li> <li>\u00ab Produit \u00bb et l'identifiant est \u00ab Num_prod \u00bb</li> </ul>   <ol> <li>Pour l'association \u00ab Etablir \u00bb :</li> </ol>     <p>Pr\u00e9cisions</p>  <ul> <li>Un vendeur peut ne pas \u00eatre associ\u00e9 \u00e0 une facture ou bien il peut \u00eatre associ\u00e9 \u00e0 plusieurs factures, d'o\u00f9 la cardinalit\u00e9 cot\u00e9 \u00ab Vendeur \u00bb de \\((0,N)\\).</li> <li>Une facture ne peut \u00eatre associ\u00e9e qu'\u00e0 un seul vendeur.</li> </ul>   <p> Pour l'association \u00ab Recevoir \u00bb :  </p>  <p>Remarques</p>  <ul> <li>Un client peut ne pas \u00eatre associ\u00e9 \u00e0 une facture ou bien il peut \u00eatre associ\u00e9 \u00e0 plusieurs factures, d'o\u00f9 la cardinalit\u00e9 cot\u00e9 \u00ab Client \u00bb de \\((0,N)\\).</li> <li>Une facture ne peut \u00eatre associ\u00e9e qu'\u00e0 un seul client.</li> </ul>   <p> Et enfin, pour l'association \u00ab Ajouter \u00bb :  </p>  <p>Remarques</p>  <ul> <li>Un produit peut ne pas \u00eatre associ\u00e9 \u00e0 une facture ou bien il peut \u00eatre associ\u00e9 \u00e0 plusieurs factures, d'o\u00f9 la cardinalit\u00e9 cot\u00e9 \u00ab Produit \u00bb de \\((0,N)\\).</li> <li>Une facture peut \u00eatre associ\u00e9e au minimum \u00e0 un produit mais aussi \u00e0 plusieurs.</li> </ul>     <ol> <li> </li> <li></li> </ol>","text":""},{"location":"cours/Les_bases_de_donnees/Correction_des_exercices.html","title":"Correction des exercices","text":""},{"location":"cours/Les_bases_de_donnees/Correction_des_exercices.html#correction-de-lexercice-1","title":"Correction de l'exercice 1","text":"<ol> <li>Le nom du client n'est pas l'attribut identifiant l'entit\u00e9 \u00ab Client \u00bb.  L'identifiant est ici l'attribut \u00ab Numero \u00bb. Il peut donc y avoir des clients homonymes, ces clients auront des num\u00e9ros diff\u00e9rents.</li> <li>La cardinalit\u00e9 maximale de l'entit\u00e9 \u00ab Client \u00bb est \\(N\\) donc un client peut r\u00e9server plusieurs fois. Cependant, d'apr\u00e8s la cardinalit\u00e9 de l'entit\u00e9 \u00ab R\u00e9servation \u00bb, une chambre ne peut correspondre qu'\u00e0 une et une seule r\u00e9servation. On en conclut qu'un client peut r\u00e9server plusieurs chambres \u00e0 une date donn\u00e9e s'il effectue plusieurs r\u00e9servations.</li> <li>Oui, un client peut r\u00e9server une chambre sur plusieurs jours \u00e0 condition qu'il effectue plusieurs r\u00e9servations.</li> <li>Oui, pour savoir si une chambre est disponible \u00e0 une date donn\u00e9e, il faudra lister les r\u00e9servations et s'assurer qu'il n'y en a aucune \u00e0 la date donn\u00e9e.</li> <li>Oui dans ce sch\u00e9ma, rien ne garantit qu'une m\u00eame chambre puisse \u00eatre lou\u00e9e qu'une seule fois.</li> </ol>"},{"location":"cours/Les_bases_de_donnees/Correction_des_exercices.html#correction-de-lexercice-2","title":"Correction de l'exercice 2","text":"<p>Il faut commencer par convertir toutes les entit\u00e9s en relations et ensuite compl\u00e9ter ces relations en fonction des associations.</p> <p>Conseils</p> <ul> <li>On convertit les 4 entit\u00e9s en 4 relations en changeant les identifiants en cl\u00e9 primaires.</li> <li>Ici, nous n'avons que des associations poss\u00e9dant au moins une cardinalit\u00e9 \\((0,1)\\) ou \\((1,1)\\), il suffit donc d'ajouter les cl\u00e9s \u00e9trang\u00e8res dans les relations existantes.</li> <li>Il faut lier ces contraintes de cl\u00e9s \u00e9trang\u00e8res aux cl\u00e9s primaires dont elles sont issues. </li> </ul> Solution <p> </p>"},{"location":"cours/Les_bases_de_donnees/Correction_des_exercices.html#correction-de-lexercice-3","title":"Correction de l'exercice 3","text":"<ol> <li>Oui car la cardinalit\u00e9 maximale \\(N\\) (c\u00f4t\u00e9 entit\u00e9 \u00ab Patient \u00bb) existant sur l'association \u00ab Assister \u00bb exprime le fait qu'un patient peut participer \u00e0 plusieurs consultations.</li> <li>Non car une consultation est donn\u00e9e par un et un seul m\u00e9decin, cela est sp\u00e9cifi\u00e9 par la cardinalit\u00e9 \\((1,1)\\) c\u00f4t\u00e9 entit\u00e9 \u00ab Consultation \u00bb sur l'association \u00ab Donner \u00bb. De m\u00eame, seul un patient assiste \u00e0 une consultation. Cela est \u00e9galement sp\u00e9cifi\u00e9 par la cardinalit\u00e9 \\((1,1)\\) c\u00f4t\u00e9 \u00ab Consultation \u00bb sur l'association \u00ab Assister \u00bb.</li> <li>Oui, au minimum, aucun m\u00e9dicament n'est prescrit par le m\u00e9decin (cardinalit\u00e9 minimale \\(0\\)) et au maximum, plusieurs m\u00e9dicaments peuvent \u00eatre prescrits par le m\u00e9decin (cardinalit\u00e9 maximale \\(N\\)).</li> <li>Oui, rien n'emp\u00eache que deux m\u00e9decins prescrivent le m\u00eame m\u00e9dicament pour deux consultations diff\u00e9rentes. Ceci est bien exprim\u00e9 par la cardinalit\u00e9 \\((0,N)\\) c\u00f4t\u00e9 entit\u00e9 \u00ab M\u00e9dicament \u00bb sur l'association \u00ab Prescrire \u00bb. Cela signifie qu'un m\u00e9dicament peut participer plusieurs fois \u00e0 cette association comme il peut ne pas participer du tout (c'est le cas o\u00f9 un m\u00e9dicament n'est jamais prescrit).</li> </ol>"},{"location":"cours/Les_bases_de_donnees/Correction_des_exercices.html#correction-de-lexercice-4","title":"Correction de l'exercice 4","text":"<p>La m\u00e9thode est la m\u00eame que celle utilis\u00e9e dans l'exercice 2. La seule diff\u00e9rence est qu'il existe dans ce sch\u00e9ma une association sans cardinalit\u00e9 \\((0,1)\\) ou \\((1,1)\\), il faudra donc cr\u00e9er une relation propre \u00e0 cette association.</p> Solution <p> </p> <p>Attention</p> <p>Il faut bien veiller \u00e0 d\u00e9finir comme cl\u00e9 primaire de la relation \u00ab Prescrire \u00bb les deux cl\u00e9s \u00e9trang\u00e8res \u00ab Numero \u00bb et \u00ab Code \u00bb.</p>"},{"location":"cours/Les_bases_de_donnees/Correction_des_exercices.html#correction-de-lexercice-5","title":"Correction de l'exercice 5","text":"<p> Relation Attribut Type Unicit\u00e9 Domaine \u00e9ventuel Valeur nulle permise Cl\u00e9 Chambre Nom_hotel Texte Non Non CE Chambre Prix R\u00e9el Non R+ Oui R\u00e9servation Date_resa Date Non Oui Client Numero_cl Entier Oui Non CP <p></p> <p>Attention</p> <ul> <li>\u00ab Nom_Hotel \u00bb est une cl\u00e9 \u00e9trang\u00e8re dans la relation \u00ab Chambre \u00bb, il ne peut \u00eatre nul, par contre, il peut ne pas \u00eatre unique.</li> <li>\u00ab Prix \u00bb doit vraisemblablement \u00eatre positif.</li> <li>\u00ab Date_resa \u00bb n'est pas unique et n'est pas n\u00e9cessairement pr\u00e9sent.</li> <li>\u00ab Numero_cl \u00bb est bien la cl\u00e9 primaire de la relation \u00ab Client \u00bb, cet attribut est donc unique et non nul.</li> </ul>"},{"location":"cours/Les_bases_de_donnees/Correction_des_exercices.html#correction-de-lexercice-6","title":"Correction de l'exercice 6","text":"<p>On d\u00e9nombre 3 anomalies :</p> <ul> <li>Il ne peut pas y avoir dans les valeurs de l'attribut \u00ab Numero \u00bb des valeurs identiques puisque cet attribut est la cl\u00e9 primaire de la relation \u00ab Consultation \u00bb.</li> <li>Le \u00ab Numero_SS \u00bb ne peut \u00eatre absent dans la premi\u00e8re occurrence. En effet, il fait le lien avec le patient.</li> <li>Le \u00ab Numero_SS \u00bb doit \u00eatre de type entier, donc 'Aspirine' ne convient pas comme valeur.</li> </ul> <p>Remarques</p> <ul> <li>\u00ab Date_consult \u00bb peut \u00eatre absente, nous n'avons aucune contrainte sur cet attribut.</li> <li>Nous pouvons avoir le m\u00eame matricule sur des occurrences diff\u00e9rentes. En effet, un m\u00e9decin peut effectuer plusieurs consultations. La seule contrainte, c'est d'avoir un num\u00e9ro diff\u00e9rent.</li> </ul>"},{"location":"cours/Les_bases_de_donnees/Exercice_bilan.html","title":"Exercice bilan","text":"<p>Pendant la phase de conception, toutes les donn\u00e9es recueillies et sp\u00e9cifi\u00e9es sont inscrites dans ce que l'on appelle un dictionnaire de donn\u00e9es. On dispose du dictionnaire de donn\u00e9es suivant :  Code de la donn\u00e9e Description Type Code_ven Identifiant du vendeur Entier Nom_ven Nom du vendeur Texte Ville_ven Ville o\u00f9 travaille le vendeur Texte Code_cli Identifiant du client Entier Nom_cli Nom du client Texte Rue_cli Rue o\u00f9 habite le client Texte Cp_cli Code postal du client Entier Ville_cli Ville o\u00f9 habite le client Texte Dnaiss_cli Date de naissance du client Date Email_cli Adresse mail du client Texte Num_fact Identifiant de la facture Entier Date_fact Date de facturation Date Num_prod Identifiant du produit Entier Des_prod D\u00e9signation du produit Texte Prix_prod Prix du produit R\u00e9el Quantite Quantit\u00e9 command\u00e9e Entier <p></p> <ol> <li>A partir de l'analyse du dictionnaire de donn\u00e9es pr\u00e9c\u00e9dent : </li> </ol> <ol> <li>Identifier les diff\u00e9rentes entit\u00e9s en jeu ainsi que leurs identifiants.</li> <li>Les 3 associations mises en jeu par ces entit\u00e9s seront nomm\u00e9es \u00ab Etablir \u00bb, \u00ab Recevoir \u00bb et \u00ab Ajouter \u00bb. Pour chacune d'entre elles, sp\u00e9cifier leur cardinalit\u00e9 et \u00e9ventuellement leurs attributs.</li> </ol> <ol> <li>Compl\u00e9ter les donn\u00e9es manquantes au mod\u00e8le conceptuel Entit\u00e9s/Associations suivant :</li> </ol> Mod\u00e8le \u00e0 compl\u00e9ter : <p> </p> <ol> <li>En d\u00e9duire le mod\u00e8le relationnel.</li> </ol>"},{"location":"cours/Les_bases_de_donnees/Exercices_sur_les_bases_de_donn%C3%A9es.html","title":"Exercices","text":""},{"location":"cours/Les_bases_de_donnees/Exercices_sur_les_bases_de_donn%C3%A9es.html#exercice-1","title":"Exercice 1","text":"<p>On souhaite g\u00e9rer des r\u00e9servations dans une compagnie d'h\u00f4tels. On consid\u00e8re donc le mod\u00e8le Entit\u00e9s/Associations suivant :  </p> <p>A l'aide de ce mod\u00e8le, r\u00e9pondre aux questions suivantes :</p> <ol> <li>Peut-on avoir des clients homonymes ?</li> <li>Un client peut-il r\u00e9server plusieurs chambres \u00e0 une date donn\u00e9e ?</li> <li>Est-il possible de r\u00e9server une chambre sur plusieurs jours ?</li> <li>Peut-on savoir si une chambre est libre \u00e0 une date donn\u00e9e ?</li> <li>Peut-on r\u00e9server plusieurs fois une chambre \u00e0 une date donn\u00e9e ?</li> </ol> <p>Correction de l'exercice</p>"},{"location":"cours/Les_bases_de_donnees/Exercices_sur_les_bases_de_donn%C3%A9es.html#exercice-2","title":"Exercice 2","text":"<p>Donner le sch\u00e9ma relationnel de la base de donn\u00e9es \u00ab compagnie d'h\u00f4tels \u00bb d\u00e9crite par le mod\u00e8le Entit\u00e9s/Associations dans l'exercice pr\u00e9c\u00e9dent.</p> <p>Correction de l'exercice</p>"},{"location":"cours/Les_bases_de_donnees/Exercices_sur_les_bases_de_donn%C3%A9es.html#exercice-3","title":"Exercice 3","text":"<p>On donne ci-dessous le mod\u00e8le Entit\u00e9s/Associations repr\u00e9sentant des visites dans un centre m\u00e9dical.</p> <p> </p> <p>En utilisant ce mod\u00e8le, r\u00e9pondre aux questions suivantes :</p> <ol> <li>Un patient peut-il effectuer plusieurs visites ?</li> <li>Un m\u00e9decin peut-il recevoir plusieurs patients dans la m\u00eame consultation ?</li> <li>Peut-on prescrire plusieurs m\u00e9dicaments dans une m\u00eame consultation ?</li> <li>Deux m\u00e9decins diff\u00e9rents peuvent-ils prescrire le m\u00eame m\u00e9dicament ?</li> </ol> <p>Correction de l'exercice</p>"},{"location":"cours/Les_bases_de_donnees/Exercices_sur_les_bases_de_donn%C3%A9es.html#exercice-4","title":"Exercice 4","text":"<p>Donner le sch\u00e9ma relationnel de la base de donn\u00e9es \u00ab visites m\u00e9dicales \u00bb d\u00e9crite par le mod\u00e8le Entit\u00e9s/Associations dans l'exercice pr\u00e9c\u00e9dent.</p> <p>Correction de l'exercice</p>"},{"location":"cours/Les_bases_de_donnees/Exercices_sur_les_bases_de_donn%C3%A9es.html#exercice-5","title":"Exercice 5","text":"<p>A partir du mod\u00e8le relationnel construit dans l'exercice 2, recopier et remplir le tableau ci-dessous :  Relation Attribut Type Unicit\u00e9 Domaine \u00e9ventuel Valeur nulle permise Cl\u00e9 Chambre Nom_hotel Chambre Prix R\u00e9servation Date_resa Client Numero_cl <p> Pour la colonne \u00ab Type \u00bb, on choisira parmi : Entier, R\u00e9el, Texte et Date. Pour les colonnes \u00ab Unicit\u00e9 \u00bb et \u00ab Valeur nulle permise \u00bb, on r\u00e9pondra par Oui ou Non. Pour la colonne \u00ab Cl\u00e9 \u00bb, on mettra CP pour cl\u00e9 primaire et CE pour cl\u00e9 \u00e9trang\u00e8re ou on laissera vide. Pour la colonne \u00ab Domaine \u00e9ventuel \u00bb, on pr\u00e9cisera le domaine possible.  </p> <p>Correction de l'exercice</p>"},{"location":"cours/Les_bases_de_donnees/Exercices_sur_les_bases_de_donn%C3%A9es.html#exercice-6","title":"Exercice 6","text":"<p>On donne ci-dessous les occurrences de la relation \u00ab Consultation \u00bb issue du mod\u00e8le relationnel construit dans l'exercice 4. Citer les anomalies constat\u00e9es :  Numero Matricule Numero_SS Date_consult 1 123 21/11/2019 2 123 182086926825812 2 526 'Aspirine' 13/02/2020 <p></p> <p>Correction de l'exercice</p>"},{"location":"cours/Les_bases_de_donnees/Les_bases_de_donn%C3%A9es.html","title":"Les bases de donn\u00e9es","text":""},{"location":"cours/Les_bases_de_donnees/Les_bases_de_donn%C3%A9es.html#introduction-aux-bases-de-donnees","title":"Introduction aux bases de donn\u00e9es","text":"<p>D\u00e9finitions</p> BDD <p>Une Base De Donn\u00e9es (BDD) repr\u00e9sente un ensemble ordonn\u00e9 de donn\u00e9es dont l'organisation est r\u00e9gie par un mod\u00e8le de donn\u00e9es. </p> SGBD <p>Le Syst\u00e8me de Gestion de Bases de Donn\u00e9es (SGBD) peut \u00eatre vu comme le logiciel qui prend en charge la structuration, le stockage, la mise \u00e0 jour et la maintenance des donn\u00e9es. C'est en fait l'interface entre la base de donn\u00e9es et les multiples utilisateurs (ou leurs programmes). </p> <p>Historique</p> <p>Quasiment toutes les bases de donn\u00e9es que nous utilisons aujourd'hui sont bas\u00e9es sur les travaux d'Edgar F. Codd (1970). C'est le point essentiel dans l'histoire des bases de donn\u00e9es.  Cliquer ici pour voir cette frise chronologique </p>"},{"location":"cours/Les_bases_de_donnees/Les_bases_de_donn%C3%A9es.html#premiers-problemes-et-premieres-solutions","title":"Premiers probl\u00e8mes... et premi\u00e8res solutions","text":"<p>Organiser des donn\u00e9es, o\u00f9 est le probl\u00e8me, direz-vous ? Y a-t-il vraiment besoin de faire des \u00e9tudes pour cela ? Il suffit d'\u00eatre un peu soigneux, et il n'y a aucune raison que \u00e7a se passe mal.</p> <p>Eh bien si, en fait. Les donn\u00e9es, quand elles se pr\u00e9sentent en (tr\u00e8s) grandes quantit\u00e9s, posent des probl\u00e8mes auxquels on ne s'attend pas. C'est bien pour cela qu'on a mis au point un certain nombre de r\u00e8gles et de m\u00e9thodes qui, si elles ne peuvent dispenser personne de r\u00e9fl\u00e9chir, aident n\u00e9anmoins \u00e0 r\u00e9fl\u00e9chir en \u00e9vitant les catastrophes les plus courantes.</p> <p>Voyons les probl\u00e8mes les plus \u00e9vidents qui se posent lorsqu'on veut organiser des informations. Pour cela, imaginons que nous voulions informatiser les rayons de ma discoth\u00e8que\u2026 \u2013 enfin, disons les dix premiers CD du rayonnage, parce que sinon, \u00e7a va \u00eatre un peu longuet.</p> <p>Faisons simple pour commencer : nous ne noterons, pour chaque CD, que le titre, l'ann\u00e9e, le nom de l'artiste et le genre musical. Cela nous donne la liste suivante :</p> <ul> <li>Nursery Cryme, Genesis, 1972, rock progressif</li> <li>Foxtrot, Genesis, 1972, rock progressif</li> <li>Selling England by the Pound, Genesis, 1973, rock progressif</li> <li>Symphonie n\u00b02, Sibelius, 1985, classique</li> <li>Symphonie n\u00b07, Sibelius, 1987, classique</li> <li>Concerto pour violon, Mendelssohn, 1992, classique</li> <li>Crime passionnel, Guidoni, 1982, chanson fran\u00e7aise</li> <li>5th Gear, Brad Paisley, 2007, country</li> <li>Thick as a Brick, Jethro Tull, 1973, rock progressif</li> <li>Purpendicular, Deep Purple, 1996, rock</li> </ul> <p>Il va de soi que pour repr\u00e9senter de telles informations, une liste c'est bien, mais qu'un tableau, ce serait beaucoup mieux. Les conventions \u00e9tant en accord avec ce que nous sugg\u00e8re l'intuition, on mettra en ligne, les uns en-dessous des autres, les diff\u00e9rents disques (autrement dit, en quelque sorte, les \u00ab individus \u00bb de notre base). Et on portera en colonne les diff\u00e9rents renseignements dont on dispose pour chacun de ces individus. Naturellement, il est pr\u00e9f\u00e9rable \u2013 et, en r\u00e9alit\u00e9, obligatoire \u2013 de nommer ces colonnes : ma discoth\u00e8que prendrait ainsi la forme du tableau suivant :</p> <p> Titre Artiste Annee Genre Nursery Cryme Genesis 1972 rock progressif Foxtrot Genesis 1972 rock progresif Selling England by the Pound Genesis 1973 rock progressif Symphonie n\u00b02 Sibelius 1985 classique Symphonie n\u00b07 Sibelius 1987 classique Concerto pour violon Mendelssohn 1992 Classique Crime passionnel Guidoni 1982 chanson fran\u00e7aise 5th Gear Brad Paisley 2007 country Thick as a Brick Jethro Tull 1973 rock progressif Purpendicular Deep Purple 1996 rock <p></p> <p>Or, ce petit tableau, \u00e0 lui seul, fait appara\u00eetre au moins deux probl\u00e8mes majeurs.</p> <ul> <li>Le premier, c'est que des informations identiques s'y r\u00e9p\u00e8tent : en l'occurrence, celles concernant les artistes, et encore plus, le genre. En termes savants, on parle de redondance des informations. Imaginons que ma discoth\u00e8que comporte plusieurs centaines de CDs, il y a fort \u00e0 parier que la mention \u00ab classique \u00bb ou \u00ab rock progressif \u00bb va se retrouver r\u00e9pliqu\u00e9e des dizaines de fois. Or, tout cela, il va bien falloir le stocker quelque part sous forme de bits et d'octets, et des informations inutilement r\u00e9p\u00e9t\u00e9es, ce sont des octets inutilement occup\u00e9s\u2026 On n'en meurt pas, direz-vous. Certes, encore que.</li> <li>Le second probl\u00e8me, li\u00e9 au premier, est pour sa part r\u00e9dhibitoire. C'est que vu la mani\u00e8re dont j'ai b\u00e2ti mes informations, je ne suis pas \u00e0 l'abri d'une erreur, ou m\u00eame d'un simple manque d'homog\u00e9n\u00e9it\u00e9, dans la saisie. Par exemple, lorsque j'ai tap\u00e9 le genre du CD Foxtrot, j'ai oubli\u00e9 les deux \u00ab s \u00bb de \u00ab progressif \u00bb, ce qui est une faute de frappe assez classique. De m\u00eame, le genre \u00ab classique \u00bb est orthographi\u00e9 tant\u00f4t avec une majuscule, tant\u00f4t sans majuscule. Tout cela est fort pr\u00e9judiciable pour la suite des \u00e9v\u00e9nements. Si je fais une recherche, par exemple, sur le genre \u00ab rock progressif \u00bb ou \u00ab classique \u00bb, il manquera des CDs qui auraient d\u00fb y figurer. Cette organisation laisse donc la possibilit\u00e9 qu'existe une h\u00e9t\u00e9rog\u00e9n\u00e9it\u00e9 des donn\u00e9es, un des pires cauchemars de l'informaticien (qui pourtant n'en manque pas).</li> </ul> <p>Ces deux probl\u00e8mes poss\u00e8dent une solution commune, tr\u00e8s simple mais extr\u00eamement efficace, qui consiste \u00e0 recenser s\u00e9par\u00e9ment les CDs et les genres :</p> <p> Titre Artiste Annee Nursery Cryme Genesis 1972 Foxtrot Genesis 1972 Selling England by the Pound Genesis 1973 Symphonie n\u00b02 Sibelius 1985 Symphonie n\u00b07 Sibelius 1987 Concerto pour violon Mendelssohn 1992 Crime passionnel Guidoni 1982 5th Gear Brad Paisley 2007 Thick as a Brick Jethro Tull 1973 Purpendicular Deep Purple 1996 Genre chanson fran\u00e7aise classique country rock rock progressif <p> Il ne reste plus \u00e0 pr\u00e9sent qu'\u00e0 pr\u00e9ciser \u00e0 quel genre appartient chaque CD. Pour ce faire, on identifie chaque genre par un code unique : </p> <p> Code Genre 1 chanson fran\u00e7aise 2 classique 3 country 4 rock 5 rock progressif <p> Et on reporte ce code dans le tableau des CDs :</p> <p> Titre Artiste Annee Code Nursery Cryme Genesis 1972 5 Foxtrot Genesis 1972 5 Selling England by the Pound Genesis 1973 5 Symphonie n\u00b02 Sibelius 1985 2 Symphonie n\u00b07 Sibelius 1987 2 Concerto pour violon Mendelssohn 1992 2 Crime passionnel Guidoni 1982 1 5th Gear Brad Paisley 2007 3 Thick as a Brick Jethro Tull 1973 5 Purpendicular Deep Purple 1996 4 <p></p> <p>Ainsi, nous venons de faire d'une pierre deux coups :</p> <ul> <li>On a \u00e9conomis\u00e9 de la place en m\u00e9moire, car stocker un code mobilise beaucoup moins d'octets que stocker un intitul\u00e9.</li> <li>Surtout, on a pris une garantie contre les informations h\u00e9t\u00e9rog\u00e8nes : le code correspond toujours au m\u00eame intitul\u00e9, et on ne peut plus gu\u00e8re imaginer se retrouver avec un m\u00eame genre musical orthographi\u00e9 diff\u00e9remment.</li> </ul> <p>Ce que nous venons de faire, c'est \u2013 en tout petit \u2013 le fond de la question en mati\u00e8re de mod\u00e9lisation de l'information : nous venons de cr\u00e9er une relation entre deux tables (deux entit\u00e9s) ; voil\u00e0 pourquoi on parle de Syst\u00e8mes de Bases de Donn\u00e9es Relationnelles. Tout ce que nous allons voir ensuite, n'est pour ainsi dire que des complications et des raffinements \u00e0 partir de cette base simple.</p> <p>Cela dit, jusqu'\u00e0 maintenant, nous avons proc\u00e9d\u00e9 uniquement par intuition \u2013 or, vous vous en doutez bien, il existe un certain nombre de formes pr\u00e9-\u00e9tablies, de standards (tant de m\u00e9thode que de repr\u00e9sentation) pour venir \u00e0 bout des probl\u00e8mes les plus complexes. Ce sont ces formes et ces standards que nous allons aborder \u00e0 pr\u00e9sent.</p> Remarque capitale <p>Il suffit d'observer la situation \u00e0 laquelle nous sommes parvenus pour constater que nous n'avons parcouru que la moiti\u00e9 du chemin. Nous avons certes \u00e9limin\u00e9 une source de redondances en cr\u00e9ant la table \u00ab Genre \u00bb. Mais nous en avons laiss\u00e9 une deuxi\u00e8me : celle li\u00e9e aux artistes. Il est donc essentiel de comprendre que ce qui est pr\u00e9sent\u00e9 ici n'est que le premier pas, et que notre mod\u00e9lisation est irrecevable en l'\u00e9tat.</p>"},{"location":"cours/Les_bases_de_donnees/Les_bases_de_donn%C3%A9es.html#conception-de-bases-de-donnees-relationnelles","title":"Conception de bases de donn\u00e9es relationnelles","text":"<p>La conception des bases de donn\u00e9es est la t\u00e2che la plus ardue du processus de d\u00e9veloppement du syst\u00e8me d\u2019information. Les m\u00e9thodes de conception pr\u00e9conisent une d\u00e9marche en \u00e9tapes et font appel \u00e0 des mod\u00e8les pour repr\u00e9senter les objets qui composent les syst\u00e8mes d\u2019information, les relations existantes entre ces objets ainsi que les r\u00e8gles sous-jacentes. La mod\u00e9lisation se r\u00e9alise en trois \u00e9tapes principales qui correspondent \u00e0 trois niveaux d\u2019abstraction diff\u00e9rents :</p> Niveau conceptuelNiveau logiqueNiveau physique <p>La repr\u00e9sentation de la base de donn\u00e9es est faite ind\u00e9pendamment de toute consid\u00e9ration informatique. C'est le niveau le plus abstrait (mais qui contient d\u00e9j\u00e0 toutes les informations indispensables pour la construction de la base de donn\u00e9es). On parle de Mod\u00e8le Conceptuel de Donn\u00e9es (MCD).</p> <p>Il s'agit de l'adaptation du sch\u00e9ma conceptuel en tableaux \u00e0 deux dimensions. Ce niveau est plus proche de ce que sera la base effective qui sera r\u00e9alis\u00e9e sur machine. On parle ici de Mod\u00e8le Logique des Donn\u00e9es (MLD).</p> <p>Impl\u00e9mentation informatique sur un syst\u00e8me de gestion de bases de donn\u00e9es relationnelles (SGBD).</p> Remarque importante <p>Le point crucial \u00e0 enregistrer d\u00e8s maintenant, c'est que le MLD se d\u00e9duit strictement du MCD d'apr\u00e8s des r\u00e8gles formelles. Autrement dit, une fois le MCD r\u00e9alis\u00e9, il n'y a plus besoin de r\u00e9fl\u00e9chir une seule seconde pour produire le MLD : tout se fait par automatismes. La meilleure preuve, c'est qu'il existe des logiciels qui se proposent de r\u00e9aliser le MLD d'un clic de souris, d'apr\u00e8s le MCD. En revanche, il n'existe rien de tel pour concevoir le MCD : le seul ingr\u00e9dient qui entre dans sa composition est l'huile de neurones...</p> <p> </p>"},{"location":"cours/Les_bases_de_donnees/Les_bases_de_donn%C3%A9es.html#le-modele-entiteassociation","title":"Le mod\u00e8le Entit\u00e9\u2013Association","text":""},{"location":"cours/Les_bases_de_donnees/Les_bases_de_donn%C3%A9es.html#entites-attributs-et-identifiants","title":"Entit\u00e9s, attributs et identifiants","text":"<p>Ce mod\u00e8le permet de distinguer les entit\u00e9s qui constituent la base de donn\u00e9es et les associations entre ces entit\u00e9s.</p> <p>D\u00e9finitions</p> Entit\u00e9s D\u00e9finitionRetour \u00e0 l'exemple <p>On appelle entit\u00e9 un objet pouvant \u00eatre identifi\u00e9 distinctement.  Chaque entit\u00e9 est donc unique.  </p> <p>Pour notre discoth\u00e8que, on propose tr\u00e8s logiquement les entit\u00e9s \u00ab Disques \u00bb et \u00ab Genres \u00bb.</p> Attributs D\u00e9finitionRetour \u00e0 l'exemple <p>Chaque entit\u00e9 est d\u00e9crite par un ensemble de propri\u00e9t\u00e9s appel\u00e9es attributs.</p> <p>Pour notre discoth\u00e8que, l'entit\u00e9 \u00ab Disques \u00bb poss\u00e8de les attributs \u00ab Titre \u00bb, \u00ab Artiste \u00bb et \u00ab Ann\u00e9e \u00bb tandis que l'entit\u00e9 \u00ab Genres \u00bb poss\u00e8de l'attribut \u00ab Intitul\u00e9 \u00bb (on \u00e9vite de donner le m\u00eame nom \u00e0 une entit\u00e9 et \u00e0 un de ses attributs).</p> Identifiant <p>Un ou plusieurs attributs permettent d'identifier de mani\u00e8re unique l'entit\u00e9, on parle alors d'identifiant (ou de cl\u00e9 primaire (Primary Key en anglais)).</p> <p>On peut repr\u00e9senter une entit\u00e9 par le sch\u00e9ma suivant  :</p> <p> Nom de l'entit\u00e9 identifiant attribut 1 attribut 2 ... ... <p> Un attribut est d\u00e9sign\u00e9 par :</p> <ul> <li>Un nom</li> <li>Une valeur de type d\u00e9fini (entier, chaine de caract\u00e8res, bool\u00e9en...)</li> </ul> Remarque capitale <p>L'\u00e9tape consistant \u00e0 cr\u00e9er autant d'entit\u00e9s que n\u00e9cessaire est la premi\u00e8re de toutes, et elle est absolument fondamentale. Le crit\u00e8re est simple : aucune valeur de propri\u00e9t\u00e9 ne doit se r\u00e9p\u00e9ter (sauf peut-\u00eatre, \u00e0 titre exceptionnel) dans aucune table. Cette r\u00e8gle, intangible quand il s'agit de valeurs de type texte, peut \u00eatre assouplie lorsqu'il s'agit de valeurs num\u00e9riques (dont les dates) : il serait en effet un peu ballot d'\u00e9conomiser la r\u00e9p\u00e9tition d'un nombre... au prix de la cr\u00e9ation d'un code permettant d'acc\u00e9der \u00e0 ce nombre : ce serait payer de la main gauche ce qu'on \u00e9conomise de la main droite. Cependant, cr\u00e9er une entit\u00e9 compos\u00e9e uniquement de nombres peut se justifier, lorsqu'on veut restreindre les possibilit\u00e9s \u00e0 un certain ensemble de valeurs (par exemple, les diff\u00e9rentes motorisations disponibles pour une automobile).</p> <p>En ce qui concerne l'identifiant, il est en fait assez rare de trouver spontan\u00e9ment un ou plusieurs attributs capables de jouer ce r\u00f4le. M\u00eame les propri\u00e9t\u00e9s qui semblent faire de bonnes candidates (par exemple, une plaque d'immatriculation ou un num\u00e9ro de s\u00e9curit\u00e9 sociale) ne sont pas forc\u00e9ment aussi opportuns qu'elles en ont l'air, pour un certain nombre de raisons. Et il n'est pas rare qu'aucune des propri\u00e9t\u00e9s pr\u00e9sentes ne puisse nous pr\u00e9munir contre les doublons ; c'est le cas avec l'entit\u00e9 \u00ab Disques \u00bb de notre exemple : plusieurs Cds peuvent tr\u00e8s bien avoir le m\u00eame titre, et je ne parle pas de l'auteur ni de l'ann\u00e9e. On ne peut pas davantage exclure la possibilit\u00e9 que deux auteurs homonymes aient sorti la m\u00eame ann\u00e9e un disque portant le m\u00eame titre (ce qui nous emp\u00eache donc d'avoir confiance dans une cl\u00e9 primaire constitu\u00e9e de la combinaison des trois propri\u00e9t\u00e9s).</p> <p>Voil\u00e0 pourquoi le plus souvent, on sera amen\u00e9 \u00e0 cr\u00e9er une propri\u00e9t\u00e9 suppl\u00e9mentaire destin\u00e9e uniquement \u00e0 jouer le r\u00f4le d'identifiant / cl\u00e9 primaire. Il s'agira presque toujours d'un code, unique pour chaque occurrence de l'entit\u00e9 (et voil\u00e0 pourquoi un nombre de type \u00ab autoincr\u00e9ment \u00bb est si pratique). Ce code sera rarement visible par l'utilisateur, qui ignorera sans doute son existence : il n'en sera pas moins indispensable pour le syst\u00e8me informatique. Ainsi, les deux entit\u00e9s de notre discoth\u00e8que pourront \u00eatre repr\u00e9sent\u00e9es ainsi :  Disques Code disque titre ann\u00e9e Genres Code genre intitul\u00e9 <p></p> <p>Une entit\u00e9 peut avoir une ou plusieurs occurrences (et parfois m\u00eame aucune). Pour illustrer cela, voici un exemple de 3 occurrences de l'entit\u00e9 \u00ab Disques \u00bb :  </p> <p>Ces occurrences sont appel\u00e9es tuples ou lignes.</p> Remarque importante <p>Vous remarquerez que l'attribut \u00ab auteur \u00bb a disparu des radars... En effet, comme cet attribut poss\u00e8de des valeurs redondantes (la discoth\u00e8que contient plusieurs CDs d'un m\u00eame auteur), le crit\u00e8re de non-redondance des donn\u00e9es impose de sortir cet attribut de l'entit\u00e9 \u00ab Disques \u00bb. On aurait tr\u00e8s bien pu cr\u00e9er alors une troisi\u00e8me entit\u00e9 : l'entit\u00e9 \u00ab Auteur \u00bb par exemple mais cela n'a pas \u00e9t\u00e9 fait ici dans le seul but de faciliter la compr\u00e9hension des notions qui vont suivre.</p>"},{"location":"cours/Les_bases_de_donnees/Les_bases_de_donn%C3%A9es.html#associations","title":"Associations","text":"<p>D\u00e9finition</p> Association <p>Une association d\u00e9finit un lien s\u00e9mantique (= qui a un sens) entre des entit\u00e9s. Elle permet de traduire une partie des r\u00e8gles de gestion qui n'ont pas \u00e9t\u00e9 satisfaites par la simple d\u00e9finition des entit\u00e9s. Une association est a minima caract\u00e9ris\u00e9e par :  <ul> <li>Un nom : g\u00e9n\u00e9ralement on utilise un verbe d\u00e9finissant le lien entre les entit\u00e9s.</li> <li>Deux cardinalit\u00e9s : elles sont pr\u00e9sentes sur les 2 extr\u00e9mit\u00e9s du lien. Chaque cardinalit\u00e9 est un couple de valeurs (mini, maxi) qui traduisent 2 r\u00e8gles de gestion (une par sens).</li> </ul> <p>Remarque</p> <p>Une association peut aussi avoir des attributs.</p> <p>On peut repr\u00e9senter une association par le sch\u00e9ma suivant :  </p> <p>Dans le cas de notre discoth\u00e8que, puisque chaque CD poss\u00e8de un genre (et pas n'importe lequel), les deux entit\u00e9s se trouvent naturellement en relation l'une avec l'autre et on peut nommer \u00ab poss\u00e8de \u00bb cette association.</p>"},{"location":"cours/Les_bases_de_donnees/Les_bases_de_donn%C3%A9es.html#cardinalites","title":"Cardinalit\u00e9s","text":"<p>Il s'agit maintenant de d\u00e9terminer les cardinalit\u00e9s. Pour cela, on se pose la question suivante : \u00e0 combien d'\u00e9l\u00e9ments de l'autre entit\u00e9 chaque \u00e9l\u00e9ment peut-il \u00eatre associ\u00e9 ? Lorsqu'on b\u00e2tit une relation entre deux entit\u00e9s, on doit n\u00e9cessairement pr\u00e9ciser ce point, car de lui d\u00e9pendent de tr\u00e8s importantes cons\u00e9quences.</p> <p>Ici, il para\u00eet \u00e9vident qu'un m\u00eame genre musical peut \u00eatre repr\u00e9sent\u00e9 par plusieurs disques. En sens inverse, en revanche, on peut \u00eatre emb\u00eat\u00e9 pour d\u00e9cider \u00e0 combien de genres peut correspondre chaque disque. On peut en effet imaginer soit que chaque disque ne puisse \u00eatre rattach\u00e9 qu'\u00e0 un genre et un seul afin de faciliter le classement, soit qu'\u00e0 chaque disque on puisse attribuer plusieurs genres \u00e0 la fois, ce qui introduit davantage de complexit\u00e9, mais aussi davantage de souplesse.</p> <p>La d\u00e9cision, dans cette alternative, n'appartient pas \u00e0 l'informaticien : il s'agit d'un choix d'ordre fonctionnel, qui doit \u00eatre subordonn\u00e9 aux besoins de l'organisation pour laquelle est con\u00e7ue la base de donn\u00e9es. Il n'existe donc aucune r\u00e8gle qui permette de trancher a priori entre les deux possibilit\u00e9s... except\u00e9 que la technique doit \u00eatre au service des besoins de ceux qui s'en serviront, et non l'inverse. En revanche, ce qui nous int\u00e9resse ici, ce sont les cons\u00e9quences de ce choix sur notre base de donn\u00e9es.</p>"},{"location":"cours/Les_bases_de_donnees/Les_bases_de_donn%C3%A9es.html#cardinalites-minimum-et-maximum","title":"Cardinalit\u00e9s minimum et maximum","text":"<p>De l\u00e0, il faut distinguer le nombre minimum et le nombre maximum de ces correspondances : pour chaque \u00e9l\u00e9ment d'une entit\u00e9, on doit donc stipuler \u00e0 combien d'\u00e9l\u00e9ments de l'autre entit\u00e9 celui-ci est susceptible de correspondre, au minimum et au maximum. Ainsi, toute relation entre deux entit\u00e9s A et B impose de pr\u00e9ciser quatre nombres (quatre cardinalit\u00e9s) : cardinalit\u00e9 minimum de A vers B, maximum de A vers B, minimum de B vers A, maximum de B vers A.</p> <p>En reprenant l'exemple de la discoth\u00e8que, cela revient \u00e0 se poser les questions suivantes :</p> <ul> <li>\u00c0 combien de genres au minimum correspond chaque CD ? (autrement dit : un CD peut-il ne pas avoir de genre, ou en a-t-il forc\u00e9ment au moins un ?)</li> <li>\u00c0 combien de genres au maximum correspond chaque CD ? (autrement dit : un CD peut-il avoir plusieurs genres, ou est-il limit\u00e9 \u00e0 un seul ?)</li> <li>\u00c0 combien de CDs au minimum correspond chaque genre ? (autrement dit : ma table des genres comprend-elle uniquement des genres qui correspondent \u00e0 mes CDs, ou peut-il y avoir des genres \u00ab orphelins \u00bb ?)</li> <li>\u00c0 combien de CDs au maximum correspond chaque genre ? (autrement dit : puis-je avoir plusieurs CDs du m\u00eame genre, ou est-ce interdit ?)</li> </ul> <p>Les cardinalit\u00e9s ob\u00e9issent \u00e0 un formalisme assez \u00e9troit :</p>"},{"location":"cours/Les_bases_de_donnees/Les_bases_de_donn%C3%A9es.html#formalisme-des-cardinalites-les-differentes-valeurs","title":"Formalisme des cardinalit\u00e9s : les diff\u00e9rentes valeurs","text":"<p>La cardinalit\u00e9 minimum ne peut prendre que les valeurs 0 ou 1. Autrement dit, soit on consid\u00e8re qu'un \u00e9l\u00e9ment de la table A peut \u00eatre en relation avec un (ou plusieurs) \u00e9l\u00e9ments de la table B (mais que ce n'est pas obligatoire), soit on consid\u00e8re que tout \u00e9l\u00e9ment de la table A doit imp\u00e9rativement \u00eatre en relation avec au moins un \u00e9l\u00e9ment de la table B. Dans notre exemple, choisir 1 comme cardinalit\u00e9 minimum signifie qu'un disque doit \u00eatre class\u00e9 dans au moins un genre. Choisir 0 signifie qu'on estime que certains disques n'ont pas forc\u00e9ment de genre (le m\u00eame probl\u00e8me se pose dans l'autre sens de la relation, pour savoir s'il peut exister ou non des genres sans disques).</p> <p>La cardinalit\u00e9 maximum ne peut valoir que 1 ou N, autrement dit un ou plusieurs. C'est la discussion de tout \u00e0 l'heure \u00e0 propos des genres : autorise-t-on ou non chaque CD \u00e0 \u00eatre class\u00e9 dans plusieurs genres \u00e0 la fois ? En sens inverse, il ne fait aucun doute qu'\u00e0 chaque genre, doivent pouvoir correspondre plusieurs CD.</p> <p>Il n'existe donc que quatre cas de figure possibles pour les cardinalit\u00e9s : \\((0,1)\\), \\((0,N)\\), \\((1,1)\\) et \\((1,N)\\).</p> <p>Voil\u00e0 donc ce que cela donne pour notre exemple (sch\u00e9ma r\u00e9alis\u00e9 \u00e0 partir du site mocodo.net) :  Sch\u00e9ma conceptuel des donn\u00e9es pour la gestion d'une discoth\u00e8que </p> <p>Cette repr\u00e9sentation ne se lit pas n'importe comment. Pour \u00eatre certain de ne pas commettre de contresens, lorsqu'on traduit le sch\u00e9ma ci-dessus, il vaut mieux \u00e9viter de dire \u00ab Les disques poss\u00e8dent des genres \u00bb, ou pire encore \u00ab La table disque poss\u00e8de certains genres \u00bb. La bonne traduction, celle qui vous \u00e9vitera au maximum de commettre des erreurs, consiste \u00e0 dire que \u00ab Chaque \u00e9l\u00e9ment de la table Disques poss\u00e8de un et un seul genre \u00bb. En prenant l'affaire par l'autre bout, on peut tout aussi bien dire (m\u00eame si c'est un peu laid \u00e0 l'oreille) : \u00ab Chaque genre est poss\u00e9d\u00e9 par z\u00e9ro, un ou plusieurs disques \u00bb.</p>"},{"location":"cours/Les_bases_de_donnees/Les_bases_de_donn%C3%A9es.html#raccourcis-de-langage","title":"Raccourcis de langage","text":"<p>Pour d\u00e9crire les cardinalit\u00e9s, on va souvent user d'un raccourci de langage. Comme les cardinalit\u00e9s les plus d\u00e9cisives sur l'architecture de la base sont souvent les cardinalit\u00e9s maxima, on aura tendance \u00e0 ne parler que d'elles. Ainsi, dans le cas d'une relation o\u00f9 l'une des deux cardinalit\u00e9s maximales vaut \\(1\\) et l'autre \\(N\\), on dira volontiers qu'on a affaire \u00e0 une relation \u00ab un \u00e0 plusieurs \u00bb. Lorsque les deux cardinalit\u00e9s maximales valent \\(N\\), on parlera de relation \u00ab plusieurs \u00e0 plusieurs \u00bb.</p> Remarque <p>Une relation de type \u00ab un \u00e0 un \u00bb (o\u00f9, donc, les deux cardinalit\u00e9s maximum sont \u00e9gales \u00e0 \\(1\\)) est un cas limite. Cela signifie que nous avons cr\u00e9\u00e9 deux entit\u00e9s qui en r\u00e9alit\u00e9 n'en forment qu'une seule, puisque chaque \u00e9l\u00e9ment de l'une corespond \u00e0 un \u00e9l\u00e9ment de l'autre, et \u00e0 un seul. Ce n'est pas \u00e0 proprement parler une faute, mais face \u00e0 une telle situation, on a toujours int\u00e9r\u00eat \u00e0 se demander ce qui justifie d'avoir cr\u00e9\u00e9 deux entit\u00e9s plut\u00f4t qu'une seule.</p>"},{"location":"cours/Les_bases_de_donnees/Les_bases_de_donn%C3%A9es.html#du-mcd-au-mld-premiere-approche","title":"Du MCD au MLD : premi\u00e8re approche","text":"<p>On rappelle que par rapport au MCD, le MLD est un plan moins abstrait et plus proche de la r\u00e9alit\u00e9, c'est-\u00e0-dire de la base de donn\u00e9es telle qu'elle existera sur les machines. On rappelle aussi que toute la difficult\u00e9 de la mod\u00e9lisation r\u00e9side dans l'\u00e9laboration du MCD. Une fois que celui-ci est con\u00e7u, le MLD s'en d\u00e9duit par l'application de quelques r\u00e8gles (on pourrait dire : d'un algorithme). Donc, le passage du MCD au MLD n'est qu'une question de rigueur, et plus du tout d'intelligence ou d'imagination.</p>"},{"location":"cours/Les_bases_de_donnees/Les_bases_de_donn%C3%A9es.html#transformation-dune-entite-en-relation","title":"Transformation d'une entit\u00e9 en relation","text":"<p>Une premi\u00e8re r\u00e8gle est que toute entit\u00e9 du MCD est transform\u00e9e en un tableau \u00e0 deux dimensions appel\u00e9 relation comme le montre la figure suivante :</p> <p> </p> <p>Remarques</p> <ul> <li>L'identifiant de l'entit\u00e9 devient la cl\u00e9 primaire de la relation. Il est repr\u00e9sent\u00e9 sur la figure ci-dessus par une cl\u00e9 et la d\u00e9nomination Pk_Primary.</li> <li>L'ensemble des valeurs possibles d'un attribut d\u00e9finit un domaine.</li> </ul> <p>On trouve \u00e9galement la notation textuelle : NomRelation(identifiant, attribut1, attribut2...). On peut par exemple noter la relation \u00ab Disques \u00bb par : Disques(Code disque, titre, ann\u00e9e)</p> <p>Remarques</p> <ul> <li>Le nom de la relation est en gras.</li> <li>La cl\u00e9 primaire est soulign\u00e9e.</li> </ul>"},{"location":"cours/Les_bases_de_donnees/Les_bases_de_donn%C3%A9es.html#transformation-dune-association-en-relation","title":"Transformation d\u2019une association en relation","text":"<p>Selon les cardinalit\u00e9s maximales qui caract\u00e9risent la relation, les choses vont se passer tr\u00e8s diff\u00e9remment.</p>"},{"location":"cours/Les_bases_de_donnees/Les_bases_de_donn%C3%A9es.html#si-lune-des-deux-cardinalites-maximales-vaut-1","title":"Si l'une des deux cardinalit\u00e9s maximales vaut 1","text":"<p>Autrement dit, l'une des cardinalit\u00e9s est \\((0,1)\\) ou \\((1,1)\\), ce qui est le cas de notre exemple dont on remet ci-dessous le sch\u00e9ma :  Sch\u00e9ma du MCD lorsque l'une des deux cardinalit\u00e9s vaut \\((1,1)\\) </p> <p>Concr\u00e8tement, cela veut dire, comme dans notre exemple, que chaque CD poss\u00e8de un genre et un seul. Un CD ne peut pas ne pas avoir de genre ; il ne peut pas non plus en avoir plusieurs. Dans ce cas, dans le MLD, cette relation devient une relation directe entre les deux tables. L'identifiant de la table c\u00f4t\u00e9 \u00ab plusieurs \u00bb devient une nouvelle propri\u00e9t\u00e9 de la table du c\u00f4t\u00e9 \u00ab un \u00bb, ainsi que l'illustre cet exemple :  Sch\u00e9ma du MLD lorsque l'une des deux cardinalit\u00e9s vaut \\((1,1)\\) </p> <p>Remarques</p> <ul> <li>On a ajout\u00e9 un attribut \u00ab Code genre \u00bb dans la relation \u00ab Disques \u00bb, cet attribut correspond \u00e0 la cl\u00e9 primaire de la relation \u00ab Genres \u00bb. On dit que c\u2019est une cl\u00e9 \u00e9trang\u00e8re (Foreign Key). Dans le sch\u00e9ma ci-dessus, elle est \u00e9galement repr\u00e9sent\u00e9e par une cl\u00e9 et la d\u00e9nomination Fk_Foreign.</li> <li>On lie ces deux attributs entre eux.</li> </ul> <p>Dans l\u2019\u00e9criture textuelle, on ajoute la cl\u00e9 \u00e9trang\u00e8re avec le symbole \u00ab # \u00bb ou en soulignant l\u2019attribut concern\u00e9 par un trait en pointill\u00e9.</p> <p>Par exemple la relation \u00ab Disques \u00bb devient : Disques(Code disque, #Code genre, titre, ann\u00e9e).</p>"},{"location":"cours/Les_bases_de_donnees/Les_bases_de_donn%C3%A9es.html#si-les-deux-cardinalites-maximales-sont-n","title":"Si les deux cardinalit\u00e9s maximales sont N","text":"<p>Autrement dit, si la relation est de type \u00ab plusieurs \u00e0 plusieurs \u00bb. Voici ce que donnerait le sch\u00e9ma du MCD dans le cas de notre discoth\u00e8que :  Sch\u00e9ma du MCD lorsque les deux cardinalit\u00e9s maximales sont \\(N\\) </p> <p>Dans le MLD, la relation devient alors une nouvelle table, elle-m\u00eame en relation avec les deux tables produites par les deux entit\u00e9s. Une telle table est dite table de correspondance, ou encore table de liaison, table de jonction, table d'association, etc. Elle ne contient pas \u00e0 proprement parler de donn\u00e9es : son r\u00f4le est d'organiser les rapports entre les \u00e9l\u00e9ments des tables qui, elles, les contiennent. Une table de jonction contiendra uniquement des propri\u00e9t\u00e9s correspondant aux cl\u00e9s primaires des deux entit\u00e9s, qu'elle associera deux \u00e0 deux.</p> <p>Et voici le sch\u00e9ma du MLD :  Sch\u00e9ma du MLD lorsque les deux cardinalit\u00e9s maximales sont \\(N\\) </p> <p>Remarque</p> <p>On a donc transform\u00e9 l\u2019association en relation par l\u2019ajout de deux attributs correspondant respectivement aux cl\u00e9s primaires de chacune des entit\u00e9s. Dans ce cas, il y a donc deux cl\u00e9s \u00e9trang\u00e8res. Et ce couple de cl\u00e9s \u00e9trang\u00e8res forme la cl\u00e9 primaire de la nouvelle relation. Sur notre sch\u00e9ma, on a les 2 d\u00e9nominations associ\u00e9es (PFk_Prim_Forei).</p>"},{"location":"cours/Les_bases_de_donnees/Les_bases_de_donn%C3%A9es.html#les-contraintes-dintegrite","title":"Les contraintes d'int\u00e9grit\u00e9","text":"<p>Le mod\u00e8le relationnel impose une r\u00e8gle minimale qui est l'unicit\u00e9 des cl\u00e9s, comme nous allons le voir ci-dessous. Cependant, il existe plusieurs points pour respecter l'int\u00e9grit\u00e9 d'une base de donn\u00e9es.</p> Unicit\u00e9 de cl\u00e9 <p>Par d\u00e9finition, une relation est un ensemble de tuples. Un ensemble n'ayant pas d'\u00e9l\u00e9ment en double, il ne peut pas exister deux fois le m\u00eame tuple dans une relation. Toute relation doit donc poss\u00e9der une cl\u00e9 unique (cl\u00e9 primaire).</p> Contraintes r\u00e9f\u00e9rentielles <p>Correctement construite, une base de donn\u00e9es fait appel \u00e0 des donn\u00e9es situ\u00e9es dans diff\u00e9rentes relations. Pour que les donn\u00e9es restent utilisables et coh\u00e9rentes, il ne faut pas que l'on puisse d\u00e9truire des donn\u00e9es qui d\u00e9pendent les unes des autres. C'est le r\u00f4le de l'int\u00e9grit\u00e9 r\u00e9f\u00e9rentielle de prot\u00e9ger ces relations. Autrement dit, l'int\u00e9grit\u00e9 r\u00e9f\u00e9rentielle v\u00e9rifie qu'une valeur de cl\u00e9 \u00e9trang\u00e8re existe bien en tant que valeur de cl\u00e9 primaire dans une autre table. Dans notre exemple : des genres sont reli\u00e9s \u00e0 des disques. L'int\u00e9grit\u00e9 r\u00e9f\u00e9rentielle emp\u00eachera la suppression d'un genre si des disques y sont rattach\u00e9s dans la base de donn\u00e9es. En proc\u00e9dant ainsi, les genres seront toujours reli\u00e9s \u00e0 leurs disques et l'utilisateur ne pourra pas supprimer (involontairement) des donn\u00e9es essentielles.</p> Valeurs nulles <p>Lors de l'insertion de tuples dans une relation, il arrive fr\u00e9quemment qu'un attribut soit inconnu ou non applicable. Par exemple, l'ann\u00e9e de sortie d'un disque peut \u00eatre inconnue. On est alors amen\u00e9 \u00e0 introduire dans la relation une valeur conventionnelle appel\u00e9e valeur nulle.</p> Attention <p>Tout attribut dans une relation ne peut prendre une valeur nulle. En effet, l'existence d'une cl\u00e9 unique impose la connaissance de la cl\u00e9 afin de pouvour v\u00e9rifier que cette valeur de cl\u00e9 n'existe pas d\u00e9j\u00e0. La cl\u00e9 ne peut donc pas \u00eatre nulle ! </p> Contraintes de domaine <p>En th\u00e9orie, une relation est construite \u00e0 partir d'un ensemble de domaines. En pratique, les domaines g\u00e9r\u00e9s par les syst\u00e8mes sont souvent limit\u00e9s aux types de base (entiers, r\u00e9els, cha\u00eenes de caract\u00e8res), parfois monnaie et date. Afin de sp\u00e9cialiser un type de donn\u00e9es pour composer un domaine plus fin (par exemple, les ann\u00e9es de sortie d'un disque qui peuvent \u00eatre des entiers compris entre 1949 et 2100), cette notion de contrainte de domaine est souvent ajout\u00e9e aux r\u00e8gles d'int\u00e9grit\u00e9.</p>"},{"location":"cours/Poo/Correction_de_l_exercice.html","title":"Correction de l'exercice","text":"\ud83d\udc0d Script Python<pre><code>import random\n\nclass Domino :\n\n    def __init__(self, ptg, ptd):\n\"\"\" Constructeur \"\"\"\n        self.__coteGauche = ptg\n        self.__coteDroit = ptd\n\n    def AfficherDomino(self):\n\"\"\" Affiche les 2 faces d'un domino \"\"\"\n        affichageGauche = self.__coteGauche\n        affichageDroit = self.__coteDroit\n        if self.__coteGauche == 0:\n            affichageGauche = \" \"\n\n        if self.__coteDroit == 0:\n            affichageDroit = \" \"\n\n        if self.EstDouble():\n            print(\"\u2212\u2212\u2212\u2212\u2212\")\n            print(\"\u23a2\",affichageGauche,\"\u23a5\")\n            print(\"\u2212\u2212\u2212\u2212\u2212\")\n            print(\"\u23a2\",affichageDroit,\"\u23a5\")\n            print(\"\u2212\u2212\u2212\u2212\u2212\")\n        else :\n            print(\"\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\")\n            print(\"\u23a2\",affichageGauche,\"\u23a5\",affichageDroit,\"\u23a5\")\n            print(\"\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\")\n\n    def NbPoints(self):\n\"\"\" Retourne la somme des points pr\u00e9sents sur les deux c\u00f4t\u00e9s\"\"\"\n        return self.__coteGauche + self.__coteDroit\n\n    def EstBlanc (self):\n\"\"\" Teste si le domino poss\u00e8de un blanc \"\"\"\n        return (self.__coteGauche == 0 or self.__coteDroit == 0)\n\n    def EstDouble(self):\n\"\"\" Teste si le domino est double \"\"\"\n        return self.__coteGauche == self.__coteDroit\n\nclass JeuDeDomino :\n\n    def __CreerJeu(self):\n\"\"\" Pour cr\u00e9er un jeu de 28 pi\u00e8ces toutes diff\u00e9rentes \"\"\"\n        jeu = []\n        for i in range (7):\n            for j in range (i+1):\n                jeu.append(Domino(i,j))\n        return jeu\n\n    def __init__(self):\n\"\"\" Constructeur \"\"\"\n        self.__jeu = self.__CreerJeu()\n        self.__nbPieces = 28\n        self.__jeuJoueur = []\n\n    def Melanger(self):\n\"\"\" Melange al\u00e9atoirement le jeu de dominos \"\"\"\n        random.shuffle(self.__jeu)\n\n    def AfficherJeu(self):\n\"\"\" Affiche toutes les pi\u00e8ces du jeu ou la pioche s'il y a eu distribution \"\"\"\n        for elt in self.__jeu :\n            elt.AfficherDomino()\n\n    def AfficherJeuJoueur(self):\n\"\"\" Affiche toutes les pi\u00e8ces distribu\u00e9es au joueur en cours ainsi que ses points \"\"\"\n        nbDominosBlancs = 0\n        nbDominosDoubles = 0\n        nbPoints = 0\n        for elt in self.__jeuJoueur :\n            elt.AfficherDomino()\n            nbPoints += elt.NbPoints()\n            if elt.EstBlanc() :\n                nbDominosBlancs += 1\n            if elt.EstDouble() :\n                nbDominosDoubles += 1\n        print(nbPoints,\"points possibles dont :\",nbDominosBlancs,\" blancs et\",nbDominosDoubles,\"doubles\")\n        print(\"-----------------------------------\")\n\n    def Distribuer(self, nbJoueur):\n\"\"\" Extrait des dominos du jeu pour un joueur et retourne une liste de 6 ou 7 dominos \"\"\"\n        self.__jeuJoueur = []\n        if nbJoueur == 2 :\n            nbDomino = 7\n        else :\n            nbDomino = 6\n        for i in range (nbDomino):\n            dom = self.__jeu.pop(0)\n            self.__jeuJoueur.append(dom)\n            self.__nbPieces -=1\n        return self.__jeuJoueur\n      \nmonjeu = JeuDeDomino()\nmonjeu.Melanger()\n\nmonjeu.Distribuer(2)\nmonjeu.AfficherJeuJoueur()\n\n\nmonjeu.Distribuer(2)\nmonjeu.AfficherJeuJoueur()\n\nmonjeu.AfficherJeu()\n</code></pre>"},{"location":"cours/Poo/Exercice.html","title":"Exercice","text":"<p>Le domino est un jeu tr\u00e8s ancien constitu\u00e9 de 28 pi\u00e8ces toutes diff\u00e9rentes. Sur chacune de ces pi\u00e8ces, il y a deux c\u00f4t\u00e9s qui sont constitu\u00e9s de 0 (blanc) \u00e0 6 points noirs. Lorsque les 2 c\u00f4t\u00e9s poss\u00e8dent le m\u00eame nombre de points, on l'appelle domino double.</p> <p> </p>   1. Proposer une classe __Domino__ permettant de repr\u00e9senter une pi\u00e8ce. Les objets seront initialis\u00e9s avec les valeurs des deux c\u00f4t\u00e9s (gauche et droite).   On d\u00e9finira les m\u00e9thodes suivantes :   * `#!python AfficherDomino(self)` qui affiche les valeurs des deux faces de mani\u00e8re horizontale pour un domino classique et de mani\u00e8re verticale pour un domino double comme le montre la figure suivante :  ![Domino](Images/Affichage_dominos_2.png){width=40%}  * `#!python NbPoints(self)` qui compte le nombre de points sur un domino. * `#!python EstBlanc(self)` qui teste si le domino est blanc (c'est-\u00e0-dire si au moins un des c\u00f4t\u00e9s est blanc). * `#!python EstDouble(self)` qui teste si le domino est double.      2. Proposer une classe __JeuDeDomino__ permettant de manipuler le jeu de domino complet.   On d\u00e9finira les m\u00e9thodes suivantes :   * `#!python CreerJeu(self)` qui cr\u00e9e un jeu de 28 pi\u00e8ces toutes diff\u00e9rentes. * `#!python Melanger(self)` qui m\u00e9lange al\u00e9atoirement le jeu de dominos. * `#!python Distribuer(self, nbJoueur)` qui extrait des dominos du jeu pour un joueur et retourne une liste de 6 ou 7 dominos selon le nombre de joueurs. * `#!python AfficherJeu(self)` qui affiche toutes les pi\u00e8ces du jeu ou la pioche s'il y a eu distribution. * `#!python AfficherJeuJoueur(self)` qui affiche les dominos qui viennent d'\u00eatre distribu\u00e9s au joueur ainsi que le nombre de points dans son jeu."},{"location":"cours/Poo/Mini_projet.html","title":"Mini-projet","text":"<p>Le projet consiste \u00e0 r\u00e9aliser une application de gestion des ressources du CDI du lyc\u00e9e Carnot.  </p> <p>Cette application doit g\u00e8rer les ajouts, les suppressions, les emprunts et les retours des ressources du CDI, c\u2019est-\u00e0-dire les ouvrages et les num\u00e9ros des diverses revues auxquelles le lyc\u00e9e est abonn\u00e9.  </p> <p>L\u2019application est utilis\u00e9e seulement par les deux documentalistes qui communique avec les emprunteurs.  </p> <p>L\u2019application doit assurer les fonctions suivantes :</p>   * La gestion des ouvrages : le programme doit permettre la saisie des  informations des diff\u00e9rents ouvrages. Le programme permet \u00e9galement la modification, suppression et la recherche des ouvrages... * La gestion des abonn\u00e9s : les abonn\u00e9s du CDI peuvent \u00eatre des enseignants ou  bien des lyc\u00e9ens.   La documentaliste est charg\u00e9e \u00e9galement de toute op\u00e9ration d\u2019ajout, de suppression et de modification des informations relatives aux abonn\u00e9s, aux ouvrages et aux exemplaires... * La gestion des pr\u00eats : chaque personne ne peut emprunter plus de deux ouvrages \u00e0 la fois. La gestion des pr\u00eats implique qu'on connaisse \u00e0 tout moment la liste des livres d\u00e9tenus par un abonn\u00e9 et inversement qu'on puisse retrouver le nom des abonn\u00e9s d\u00e9tenant un livre. Le syst\u00e8me peut d\u00e9clencher une v\u00e9rification des pr\u00eats non retourn\u00e9s afin de  pouvoir relancer les emprunteurs en retard. Votre programme doit afficher une statistique des livres les plus emprunt\u00e9s. <p>Indications :</p>   1. Vous avez toute la libert\u00e9 de d\u00e9finir les attributs des diff\u00e9rentes entit\u00e9s manipul\u00e9es. 2. Vous \u00eates aussi libre de prendre des d\u00e9cisions d\u2019ordre technique, ainsi que de choisir la fa\u00e7on dont les choses vont \u00eatre organis\u00e9es. 3. La marge de libert\u00e9 offerte doit permettre une solution personnalis\u00e9e pour chaque bin\u00f4me. 4. Le copier\\coller est fortement p\u00e9nalis\u00e9.   <p>La qualit\u00e9 du programme r\u00e9alis\u00e9 sera notamment pris en compte dans l'\u00e9valuation (pr\u00e9sentation g\u00e9n\u00e9rale et structuration)</p>"},{"location":"cours/Poo/POO.html","title":"La programmation orient\u00e9e objet","text":""},{"location":"cours/Poo/POO.html#paradigme-de-programmation","title":"Paradigme de programmation","text":"<p>D'apr\u00e8s Wikip\u00e9dia :</p> <p>Un paradigme de programmation est une fa\u00e7on d'approcher la programmation informatique et de traiter les solutions aux probl\u00e8mes et leur formulation dans un langage de programmation appropri\u00e9.</p> <p>Jusqu'\u00e0 pr\u00e9sent nous avons vu un seul paradigme de programmation : la programmation proc\u00e9durale (ou imp\u00e9rative).</p>"},{"location":"cours/Poo/POO.html#programmation-procedurale","title":"Programmation proc\u00e9durale","text":"<p>La programmation proc\u00e9durale, dite aussi programmation imp\u00e9rative, est celle que vous avez utilis\u00e9e jusqu'\u00e0 maintenant, elle repose donc sur des notions qui vous sont famili\u00e8res :</p>   *  La s\u00e9quence d'instructions (les instructions d'un programme s'ex\u00e9cutent l'une apr\u00e8s l'autre). *  L'affectation (on attribue une valeur \u00e0 une variable, par exemple : `#!python a = 5`).   *  L'instruction conditionnelle (`#!python if` / `#!python else`).   *  La boucle (`#!python while` et `#!python for`).     <p>Elle consiste aussi \u00e0 diviser un programme en blocs r\u00e9utilisables appel\u00e9s fonctions.</p> <p>Vous essayez autant que possible de garder votre code en blocs modulaires, en d\u00e9cidant de mani\u00e8re logique quel bloc est appel\u00e9. Cela demande moins d\u2019efforts pour visualiser ce que votre programme fait et rend plus facile la maintenance du code puisque vous pouvez voir ce que fait une portion de code. Le fait d\u2019am\u00e9liorer une fonction (qui est r\u00e9utilis\u00e9e) peut am\u00e9liorer la performance \u00e0 plusieurs endroits dans votre programme.</p> <p>Il y a donc des variables, qui contiennent vos donn\u00e9es, et des fonctions. Vous passez vos variables \u00e0 vos fonctions \u2013 qui agissent sur elles et peut-\u00eatre les modifient. L'interaction entre les variables et les fonctions n'est pas toujours simple \u00e0 g\u00e9rer : les variables locales, globales, les effets de bords que provoquent certaines fonctions qui modifient des variables globales sont souvent source de bugs difficiles \u00e0 d\u00e9celer.</p> <p>On touche ici aux limites de la programmation proc\u00e9durale, lorsque le nombre de fonctions et de variables devient important.</p> <p>La programmation imp\u00e9rative est loin d'\u00eatre le seul paradigme de programmation (m\u00eame si c'est sans doute le plus courant). Cette ann\u00e9e nous allons \u00e9tudier deux autres paradigmes : le paradigme objet et le paradigme fonctionnel. </p>"},{"location":"cours/Poo/POO.html#les-objets-un-moyen-de-separer-la-conception-de-lutilisation","title":"Les objets : un moyen de s\u00e9parer la conception de l\u2019utilisation","text":"<p>La programmation orient\u00e9e objet repose, comme son nom l'indique, sur le concept d'objet.</p> <p>Un objet dans la vie de tous les jours, vous connaissez, mais en informatique, qu'est-ce que c'est ?  Une variable ? Une fonction ? Ni l'un ni l'autre, c'est un nouveau concept.</p> <p>Imaginez un objet (de la vie de tous les jours) tr\u00e8s complexe (par exemple un moteur de voiture) : il est \u00e9vident qu'en regardant cet objet, on est frapp\u00e9 par sa complexit\u00e9 (pour un non sp\u00e9cialiste). Imaginez que l'on enferme cet objet dans une caisse et que l'utilisateur de l'objet n'ait pas besoin d'en conna\u00eetre son principe de fonctionnement interne pour pouvoir l'utiliser. L'utilisateur a, \u00e0 sa disposition, des boutons, des manettes et des \u00e9crans de contr\u00f4le pour faire fonctionner l'objet, ce qui rend son utilisation relativement simple. La mise au point de l'objet (par des ing\u00e9nieurs) a \u00e9t\u00e9 tr\u00e8s complexe, en revanche son utilisation est relativement simple. Programmer de mani\u00e8re orient\u00e9e objet, c'est un peu reprendre cette id\u00e9e : utiliser des objets sans se soucier de leur complexit\u00e9 interne. Pour utiliser ces objets, nous n'avons pas \u00e0 notre disposition des boutons, des manettes ou encore des \u00e9crans de contr\u00f4le, mais des attributs et des m\u00e9thodes (nous aurons l'occasion de revenir longuement sur ces 2 concepts). Un des nombreux avantages de la programmation orient\u00e9e objet (POO), est qu'il existe des milliers d'objets (on parle plut\u00f4t de classes, mais l\u00e0 aussi nous reviendrons sur ce terme de classe un peu plus loin) pr\u00eats \u00e0 \u00eatre utilis\u00e9s (vous en avez d\u00e9j\u00e0 utilis\u00e9s de nombreuses fois sans le savoir). On peut r\u00e9aliser des programmes extr\u00eamement complexes uniquement en utilisant des classes pr\u00e9existantes.</p> <p>Objets et POO sont au centre de la mani\u00e8re dont Python fonctionne. Il n'est pas obligatoire d'utiliser la POO dans un programme - mais comprendre le concept est essentiel pour devenir plus qu'un d\u00e9butant. Et notamment parce que vous aurez besoin d'utiliser les classes et objets fournis par la librairie standard.</p> <p>Ainsi, en manipulant les tableaux en python, vous avez certainement remarqu\u00e9 qu'il y a deux syntaxes pour appeler des fonctions :</p> \ud83d\udc0d Script Python<pre><code>tableau = [1, 3, 5, 8]\ntaille = len(tableau)\ntableau.append(11)\n</code></pre>   * Le calcul de la longueur du tableau se fait par l'appel \u00e0 la fonction `#!python len()` avec une syntaxe identique aux fonctions que vous avez l'habitude d'\u00e9crire. * L'ajout d'un \u00e9l\u00e9ment dans le tableau est un peu diff\u00e9rent car la fonction `#!python append` semble provenir du tableau lui m\u00eame : dans ce cas, on ne parle pas de fonction mais de m\u00e9thode associ\u00e9e \u00e0 l'objet tableau.   <p>Un objet est une structure de donn\u00e9es qui int\u00e8gre des variables (que l'on nomme propri\u00e9t\u00e9s) et des fonctions (que l'on nomme m\u00e9thodes). Nous allons voir l'int\u00e9r\u00eat de cette approche, omnipr\u00e9sente dans Python, en particulier lorsqu'on d\u00e9veloppe des interfaces graphiques, mais avant quelques petits rep\u00e8res historiques et \u00e9l\u00e9ments de contexte.</p>"},{"location":"cours/Poo/POO.html#petit-historique","title":"Petit historique","text":"<p>La notion de programmation orient\u00e9e objet remonte aux ann\u00e9es 1960. Simula est consid\u00e9r\u00e9 comme le premier langage de programmation orient\u00e9 objet.</p> <p>Les ann\u00e9es 1970 voient les principes de la programmation par objet se d\u00e9velopper et prendre forme au travers notamment du langage Smalltalk.</p> <p>\u00c0 partir des ann\u00e9es 1980, commence l'effervescence des langages \u00e0 objets : Objective C (d\u00e9but des ann\u00e9es 1980, utilis\u00e9 sur les plateformes Mac et iOS), C++ (C with classes) en 1983 sont les plus c\u00e9l\u00e8bres.</p> <p>Les ann\u00e9es 1990 voient l'\u00e2ge d'or de l'extension de la programmation par objet dans les diff\u00e9rents secteurs du d\u00e9veloppement logiciel, notemment gr\u00e2ce \u00e0 l'\u00e9mergence des syst\u00e8mes d'exploitation bas\u00e9s sur une interface graphique (MacOS, Linux, Windows) qui font appel abondamment aux principes de la POO.</p>"},{"location":"cours/Poo/POO.html#les-classes","title":"Les classes","text":"<p>Dans la vie r\u00e9elle, un objet ne sort pas de nulle part. En effet, chaque objet est d\u00e9fini selon des caract\u00e9ristiques et un plan bien pr\u00e9cis. En POO, ces informations sont contenues dans ce qu'on appelle des classes.</p> <p>Prenons un exemple tr\u00e8s simple : les g\u00e2teaux et leur moule. Le moule est unique. Il peut produire une quantit\u00e9 infinie de g\u00e2teaux. Dans ce cas-l\u00e0, les g\u00e2teaux sont les objets et le moule est la classe : le moule va d\u00e9finir la forme du g\u00e2teau. La classe contient donc le plan de fabrication d'un objet et on peut s'en servir autant qu'on veut afin d'obtenir une infinit\u00e9 d'objets.</p> <p>Une classe est une entit\u00e9 regroupant des variables et des fonctions que tout objet issu de cette classe poss\u00e9dera.</p>   !!! book \"Un peu de vocabulaire autour de cette notion de classe :\"      * Le type de donn\u00e9es avec ses **caract\u00e9ristiques** et ses **actions** possibles s\u2019appelle **classe**.     * Les **caract\u00e9ristiques** (ou **variables**) de la classe s\u2019appellent les **attributs**.       * Les **actions** possibles \u00e0 effectuer avec la classe s\u2019appellent les **m\u00e9thodes**.       * La classe d\u00e9finit donc les **attributs** et les actions possibles sur ces attributs, les **m\u00e9thodes**.     * Un objet du type de la classe s\u2019appelle une **instance de la classe** et la cr\u00e9ation d\u2019un objet d\u2019une classe s\u2019appelle une **instanciation de cette classe**.     * Lorsqu\u2019on d\u00e9finit les attributs d\u2019un objet de la classe, on parle aussi d\u2019instanciation.     * On dit que les attributs et les m\u00e9thodes sont **encapsul\u00e9s** dans la classe.   <p>Python permet d\u2019utiliser la programmation proc\u00e9durale mais il permet aussi d\u2019utiliser la POO. Il est m\u00eame possible, comme nous le verrons plus loin, d\u2019utiliser les 2 mani\u00e8res de programmer dans un m\u00eame programme.</p> <p>La cr\u00e9ation d\u2019une classe en python commence toujours par le mot <code>class</code>. Ensuite toutes les instructions de la classe seront indent\u00e9es :</p> \ud83d\udc0d Script Python<pre><code>class leNomDeMaClasse :\n    # instructions de la classe\n# La d\u00e9finition de la classe est termin\u00e9e.\n</code></pre>"},{"location":"cours/Poo/POO.html#premier-programme","title":"Premier programme","text":"<p>Pour d\u00e9velopper toutes ces notions (et d\u2019autres), nous allons \u00e9crire un premier programme :</p> <p>Nous allons commencer par \u00e9crire une classe <code>personnage</code> (qui sera dans un premier temps une coquille vide) et, \u00e0 partir de cette classe cr\u00e9er 2 instances : <code>darkVador</code> et <code>lukeSkywalker</code>.</p> <p>Ensuite ils vont se combattre...</p>  Exercice 1  <p>Analysez et testez ce code :</p> \u25b6\ufe0f \u2935\ufe0f \u2934\ufe0f <p>class personnage:backslash_newline    passbackslash_newlinebackslash_newlinedarkVador = personnage()backslash_newlinelukeSkywalker = personnage()backslash_newline</p>"},{"location":"cours/Poo/POO.html#les-attributs","title":"Les attributs","text":"<p>Pour l\u2019instant, notre classe ne sert \u00e0 rien et nos instances d\u2019objet ne peuvent rien faire. Comme il n\u2019est pas possible de cr\u00e9er une classe totalement vide, nous avons utilis\u00e9 l\u2019instruction <code>pass</code> qui ne fait rien. Ensuite nous avons cr\u00e9\u00e9 2 instances de la classe <code>personnage</code> : <code>darkVador</code> et <code>lukeSkywalker</code>.</p> <p>Comme nous l'avons vu pr\u00e9c\u00e9demment, une instance de classe poss\u00e8de des attributs et des m\u00e9thodes. Commen\u00e7ons par les attributs :</p> <p>Un attribut est une variable sp\u00e9cifique \u00e0 la classe.</p> <p>Nous allons associer un attribut <code>vie</code> \u00e0 notre classe <code>personnage</code> (chaque instance aura un attribut <code>vie</code>, quand la valeur de <code>vie</code> deviendra nulle, le personnage sera mort !)</p> <p>Ces attributs s\u2019utilisent comme des variables, l\u2019attribut <code>vie</code> pour <code>lukeSkywalker</code> sera not\u00e9 :</p> \ud83d\udc0d Script Python<pre><code>lukeSkywalker.vie\n</code></pre> <p>De la m\u00eame fa\u00e7on l\u2019attribut <code>vie</code> de l\u2019instance <code>darkVador</code> sera not\u00e9 :</p> \ud83d\udc0d Script Python<pre><code>darkVador.vie\n</code></pre>  Exercice 2  <p>Analysez et testez ce code :</p> \u25b6\ufe0f \u2935\ufe0f \u2934\ufe0f <p>class personnage:backslash_newline    passbackslash_newlinebackslash_newlinedarkVador = personnage()backslash_newlinedarkVador.vie = 20backslash_newlinelukeSkywalker = personnage()backslash_newlinelukeSkywalker.vie = 20backslash_newline</p> <p>Comme pour une variable, il est possible d'utiliser la console Python pour afficher la valeur r\u00e9f\u00e9renc\u00e9e par un attribut. Il suffit de taper dans la console <code>darkVador.vie</code> ou <code>lukeSkywalker.vie</code> (sans avoir oubli\u00e9 d'ex\u00e9cuter le programme au pr\u00e9alable !).</p> <p>Mais cette fa\u00e7on de faire n'est pas tr\u00e8s \"propre\" et n'est pas une bonne pratique.</p> <p>En effet, nous ne respectons pas un principe de base de la POO : l'encapsulation.</p> <p>Il ne faut pas oublier que notre classe doit \u00eatre \"enferm\u00e9e dans une caisse\" pour que l'utilisateur puisse l'utiliser facilement sans se pr\u00e9occuper de ce qui se passe \u00e0 l'int\u00e9rieur, or, ici, ce n'est pas vraiment le cas.</p> <p>En effet, les attributs (<code>darkVador.vie</code> et <code>lukeSkywalker.vie</code>) font parties de la classe et devraient donc \u00eatre enferm\u00e9s dans la \"caisse\" !</p>"},{"location":"cours/Poo/POO.html#les-methodes","title":"Les m\u00e9thodes","text":"<p>Pour r\u00e9soudre ce probl\u00e8me, nous allons d\u00e9finir les attributs, dans la classe, \u00e0 l'aide d'une m\u00e9thode d'initialisation des attributs.</p> <p>Cette m\u00e9thode est d\u00e9finie dans le code source par la ligne : </p> \ud83d\udc0d Script Python<pre><code>def __init__ (self) :\n</code></pre> <p>La m\u00e9thode <code>__init__</code> est automatiquement ex\u00e9cut\u00e9e au moment de la cr\u00e9ation d\u2019une instance. La variable <code>self</code> est obligatoirement le premier argument d\u2019une m\u00e9thode (nous reviendrons ci-dessous sur ce mot <code>self</code>)</p> <p>Nous retrouvons ce mot <code>self</code> lors de la d\u00e9finition des attributs. La d\u00e9finition des attributs sera de la forme :</p> \ud83d\udc0d Script Python<pre><code>self.vie = 20\n</code></pre> <p>Le mot <code>self</code> repr\u00e9sente l\u2019instance. Quand vous d\u00e9finissez une instance de classe (<code>darkVador</code> ou <code>lukeSkywalker</code>) le nom de votre instance va remplacer le mot <code>self</code>.</p> <p>Dans le code source, nous allons avoir :</p> \ud83d\udc0d Script Python<pre><code>class personnage :\n    def __init__ (self) :\n        self.vie = 20\n</code></pre> <p>Ensuite lors de la cr\u00e9ation de l\u2019instance <code>darkVador</code>, python va automatiquement remplacer <code>self</code> par <code>darkVador</code> et ainsi cr\u00e9er un attribut <code>darkVador.vie</code> qui aura pour valeur de d\u00e9part la valeur donn\u00e9e \u00e0 <code>self.vie</code> dans la m\u00e9thode <code>__init__</code></p> <p>Il se passera exactement la m\u00eame chose au moment de la cr\u00e9ation de l\u2019instance <code>lukeSkywalker</code>, on aura automatiquement la cr\u00e9ation de l\u2019attribut <code>lukeSkywalker.vie</code>.</p>  Exercice 3  <p>Analysez et testez ce code :</p> \u25b6\ufe0f \u2935\ufe0f \u2934\ufe0f <p>class personnage:backslash_newlinebackslash_newline    def __init__(self):backslash_newline        self.vie = 20backslash_newlinebackslash_newlinedarkVador = personnage()backslash_newlinelukeSkywalker = personnage()backslash_newline</p> <p>Utilisez la console Python comme dans l'exercice 2.</p> <p>Le r\u00e9sultat de l'exercice 3 est identique au r\u00e9sultat de l\u2019exemple de l'exercice 2. Mais cette fois nous n\u2019avons pas d\u00e9fini l\u2019attribut <code>darkVador.vie = 20</code> ou <code>lukeSkywalker.vie = 20</code> en dehors de la classe, nous avons utilis\u00e9 une m\u00e9thode <code>__init__</code>.</p> <p>C\u2019est une meilleure pratique.</p>"},{"location":"cours/Poo/POO.html#passer-des-parametres-a-une-instance-de-classe","title":"Passer des param\u00e8tres \u00e0 une instance de classe","text":"<p>Imaginons que nos 2 personnages n\u2019aient pas au d\u00e9part les m\u00eames points de vie ! Pour l\u2019instant, impossible d\u2019introduire cette contrainte (<code>self.vie = 20</code>)</p> <p>Une m\u00e9thode, comme une fonction, peut prendre des param\u00e8tres.</p> <p>Le passage de param\u00e8tres se fait au moment de la cr\u00e9ation de l\u2019instance.</p>  Exercice 4  <p>Analysez et testez ce code :</p> \u25b6\ufe0f \u2935\ufe0f \u2934\ufe0f <p>class personnage:backslash_newlinebackslash_newline    def __init__(self, pointDeVie):backslash_newline        self.vie = pointDeViebackslash_newlinebackslash_newlinedarkVador = personnage(20)backslash_newlinelukeSkywalker = personnage(15)backslash_newline</p> <p>Utilisez la console Python pour v\u00e9rifier que <code>darkVador.vie</code> est \u00e9gal \u00e0 <code>20</code> et <code>lukeSkywalker.vie</code> est \u00e9gal \u00e0 <code>15</code>.</p> <p>Au moment de la cr\u00e9ation de l\u2019instance <code>darkVador</code>, on passe comme argument le nombre de vies (<code>darkVador = personnage(20)</code>).</p> <p>Ce nombre de vies est attribu\u00e9 au premier argument de la m\u00e9thode <code>__init__</code>, la variable <code>pointDeVie</code> (<code>pointDeVie</code> n\u2019est pas tout \u00e0 fait le premier argument de la m\u00e9thode <code>__init__</code> puisque devant il y a <code>self</code>, mais bon, <code>self</code> \u00e9tant obligatoire, nous pouvons dire que <code>pointDeVie</code> est le premier argument non obligatoire).</p> <p>N.B : <code>pointDeVie</code> est bien une variable (car ce n\u2019est pas un attribut de la classe <code>personnage</code> puisqu\u2019elle ne commence pas par <code>self</code>).</p> <p>Nous pouvons passer plusieurs arguments \u00e0 la m\u00e9thode <code>__init__</code> (comme pour n\u2019importe quelle fonction).</p> <p>Nous allons cr\u00e9er 2 nouvelles m\u00e9thodes :</p>   * Une m\u00e9thode qui enl\u00e8vera un point de vie au personnage bless\u00e9 * Une m\u00e9thode qui renverra le nombre de vies restantes   Exercice 5  <p>Analysez et testez ce code :</p> \u25b6\ufe0f \u2935\ufe0f \u2934\ufe0f <p>class personnage:backslash_newlinebackslash_newline    def __init__(self, pointDeVie):backslash_newline        self.vie = pointDeViebackslash_newlinebackslash_newline    def donneEtat(self):backslash_newline        return self.viebackslash_newlinebackslash_newline    def perdVie(self):backslash_newline        self.vie = self.vie - 1backslash_newlinebackslash_newlinedarkVador = personnage(20)backslash_newlinelukeSkywalker = personnage(15)backslash_newline</p> <p>Pour tester ce programme, dans la console, tapez successivement les instructions suivantes :</p>   * `#!python darkVador.donneEtat()` * `#!python lukeSkywalker.donneEtat()` * `#!python darkVador.perdVie()` * `#!python darkVador.donneEtat()` * `#!python lukeSkywalker.perdVie()` * `#!python lukeSkywalker.donneEtat()`  <p>Vous avez sans doute remarqu\u00e9 que lors de \"l'utilisation\" des instances <code>lukeSkywalker</code> et <code>darkVador</code>, nous avons uniquement utilis\u00e9 des m\u00e9thodes et nous n\u2019avons plus directement utilis\u00e9 des attributs (plus de <code>darkVador.vie</code>).</p>"},{"location":"cours/Poo/POO.html#encapsulation-et-interface","title":"Encapsulation et interface","text":"<p>Il est important de savoir que l\u2019utilisation des attributs en dehors de la classe est une mauvaise pratique en programmation orient\u00e9e objet : les attributs doivent rester \"\u00e0 l'int\u00e9rieur\" de la classe, l\u2019utilisateur de la classe ne doit pas les utiliser directement.</p> <p>Il peut les manipuler, mais uniquement par l\u2019interm\u00e9diaire d\u2019une m\u00e9thode (la m\u00e9thode <code>self.perdVie</code> permet de manipuler l\u2019attribut <code>self.vie</code>).</p> <p>Les m\u00e9thodes constituent \"l'interface\" de l\u2019objet.</p> <p>Pour l\u2019instant nous avons utilis\u00e9 les m\u00e9thodes uniquement en tapant des instructions dans la console, il est \u00e9videmment possible d\u2019utiliser ces m\u00e9thodes directement dans votre programme :</p>  Exercice 6  <p>Analysez et testez ce code :</p> \u25b6\ufe0f \u2935\ufe0f \u2934\ufe0f <p>class personnage:backslash_newlinebackslash_newline    def __init__(self, pointDeVie):backslash_newline        self.vie = pointDeViebackslash_newlinebackslash_newline    def donneEtat(self):backslash_newline        return self.viebackslash_newlinebackslash_newline    def perdVie(self):backslash_newline        self.vie = self.vie - 1backslash_newlinebackslash_newlinelukeSkywalker = personnage(15)backslash_newlinelukeSkywalker.perdVie()backslash_newlinepoint = lukeSkywalker.donneEtat()backslash_newline</p> <p>\u00c9valuez la variable <code>point</code> \u00e0 l\u2019aide de la console.</p>  Exercice 7  <p>Nos personnages peuvent boire une potion qui leur ajoute un point de vie. Modifiez le programme de l'exercice 5 en ajoutant une m\u00e9thode <code>boirePotion</code>. Testez ensuite cette modification \u00e0 l\u2019aide de la console.</p> \u25b6\ufe0f \u2935\ufe0f \u2934\ufe0f <p>class personnage:backslash_newlinebackslash_newline    def __init__(self, pointDeVie):backslash_newline        self.vie = pointDeViebackslash_newlinebackslash_newline    def donneEtat(self):backslash_newline        return self.viebackslash_newlinebackslash_newline    def perdVie(self):backslash_newline        self.vie = self.vie - 1backslash_newlinebackslash_newlinedarkVador = personnage(20)backslash_newlinelukeSkywalker = personnage(15)backslash_newline</p>  Exercice 8  <p>Analysez et testez ce code :</p> \u25b6\ufe0f \u2935\ufe0f \u2934\ufe0f <p>class personnage:backslash_newlinebackslash_newline    def __init__(self, pointDeVie):backslash_newline        self.vie = pointDeViebackslash_newlinebackslash_newline    def donneEtat(self):backslash_newline        return self.viebackslash_newlinebackslash_newline    def perdVie(self, nbPoint):backslash_newline        self.vie = self.vie - nbPointbackslash_newlinebackslash_newlinelukeSkywalker = personnage(15)backslash_newlinelukeSkywalker.perdVie(2)backslash_newlinepoint = lukeSkywalker.donneEtat()backslash_newline</p> <p>\u00c9valuez la variable <code>point</code> \u00e0 l\u2019aide de la console.</p>  Exercice 9  <p>Analysez et testez ce code :</p> \u25b6\ufe0f \u2935\ufe0f \u2934\ufe0f <p>import randombackslash_newlinebackslash_newlineclass personnage:backslash_newline    def __init__(self, pointDeVie):backslash_newline        self.vie = pointDeViebackslash_newlinebackslash_newline    def donneEtat(self):backslash_newline        return self.viebackslash_newlinebackslash_newline    def perdVie(self):backslash_newline        if random.random() &gt; 0.5:backslash_newline            nbPoint = 1backslash_newline        else:backslash_newline            nbPoint = 2backslash_newline        self.vie = self.vie - nbPointbackslash_newlinebackslash_newlinelukeSkywalker = personnage(15)backslash_newlinelukeSkywalker.perdVie()backslash_newlinelukeSkywalker.perdVie()backslash_newlinelukeSkywalker.perdVie()backslash_newlinepoint = lukeSkywalker.donneEtat()backslash_newline</p> <p>\u00c9valuez la variable <code>point</code> \u00e0 l\u2019aide de la console.</p> <p>N.B : <code>random.random()</code> renvoie une valeur al\u00e9atoire comprise entre <code>0</code> et <code>1</code>.</p> <p>Expliquez le fonctionnement de la m\u00e9thode <code>perdVie</code>.</p> <p>Comme vous l\u2019avez remarqu\u00e9, il est possible d\u2019utiliser une instruction conditionnelle (<code>if</code> / <code>else</code>) dans une m\u00e9thode. Il est donc possible d\u2019utiliser dans le m\u00eame programme le paradigme objet et le paradigme imp\u00e9ratif.</p> <p>Nous allons maintenant organiser un combat virtuel entre nos personnages :</p>  Exercice 10  <p>Analysez et testez ce code :</p> \u25b6\ufe0f \u2935\ufe0f \u2934\ufe0f <p>import randombackslash_newlinebackslash_newlineclass personnage:backslash_newlinebackslash_newline    def __init__(self, pointDeVie):backslash_newline        self.vie = pointDeViebackslash_newlinebackslash_newline    def donneEtat(self):backslash_newline        return self.viebackslash_newlinebackslash_newline    def perdVie(self):backslash_newline        if random.random() &gt; 0.5:backslash_newline            nbPoint = 1backslash_newline        else :backslash_newline            nbPoint = 2backslash_newline        self.vie = self.vie - nbPointbackslash_newlinebackslash_newlinedef game():backslash_newline    lukeSkywalker = personnage(20)backslash_newline    darkVador = personnage(20)backslash_newlinebackslash_newline    while lukeSkywalker.donneEtat() &gt; 0 and darkVador.donneEtat() &gt; 0:backslash_newline        lukeSkywalker.perdVie()backslash_newline        darkVador.perdVie()backslash_newlinebackslash_newline    if lukeSkywalker.donneEtat() &lt;= 0 and darkVador.donneEtat() &gt; 0:backslash_newline        msg = f'''Dark Vador est vainqueur, il lui reste encore {darkVador.donneEtat()} points de vie alors que Luke Skywalker est mort'''backslash_newlinebackslash_newline    elif darkVador.donneEtat() &lt;= 0 and lukeSkywalker.donneEtat() &gt; 0:backslash_newline        msg = f'''Luke Skywalker est vainqueur, il lui reste encore {lukeSkywalker.donneEtat()} points de vie alors que Dark Vador est mort'''backslash_newlinebackslash_newline    else:backslash_newline        msg = \"Les deux combattants sont morts en m\u00c3\u00aame temps\"backslash_newlinebackslash_newline    return msgbackslash_newline</p> <p>Pour tester le programme, ex\u00e9cutez la fonction <code>game</code> dans une console. V\u00e9rifiez que l\u2019on peut obtenir des r\u00e9sultats diff\u00e9rents en ex\u00e9cutant plusieurs fois la fonction <code>game</code>.</p> <p>Nous avons ici la d\u00e9monstration qu\u2019il est possible d\u2019utiliser le paradigme objet et le paradigme imp\u00e9ratif dans un m\u00eame programme.</p>  Exercice 11  <p>Am\u00e9liorez le programme d\u00e9velopp\u00e9 dans l'exercice 10 en modifiant les m\u00e9thodes et en impl\u00e9mentant les m\u00e9thodes suivantes :</p>   1. Dans l\u2019initialisation, on ne peut donner de nom au personnage !     1. Cr\u00e9ez un attribut `#!python nom` qu\u2019on doit donner en premier param\u00e8tre : on cr\u00e9e une instance de `#!python personnage` comme ceci :      \ud83d\udc0d Script Python<pre><code>darkVador = personnage(\"Dark Vador\", 20)\n</code></pre>  2. Cr\u00e9ez une m\u00e9thode `#!python donneNom` qui renvoie le nom du personnage.     2. Modifiez la fonction `#!python game` pour qu\u2019elle tienne compte du nom du personnage.   On doit pouvoir cr\u00e9er d\u2019autres personnages et les messages doivent tenir compte des noms de ceux-ci.      \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; lukeSkywalker = personnage(\"Luke Skywalker\", 20)\n&gt;&gt;&gt; darkMaul = personnage(\"Dark Maul\", 25)\n&gt;&gt;&gt; game(lukeSkywalker, darkMaul)\nDark Maul est vainqueur, il lui reste encore 3 points de vie alors que Luke Skywalker est mort\n</code></pre> Remarquez bien que la *signature* de la fonction `#!python game` est diff\u00e9rente !    On doit cr\u00e9er les personnages __avant__ de l\u2019appeler. Il faut changer plusieurs \u00e9l\u00e9ments.   3. Am\u00e9liorez encore la fonction `#!python game` pour qu\u2019elle affiche un journal d\u00e9taill\u00e9 du combat :       \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; hanSolo = Personnage(10)\n&gt;&gt;&gt; jabbaLeHutt = Personnage(10)\n&gt;&gt;&gt; game(hanSolo, jabbaLeHutt)\nHan Solo perd un point de vie\nJabba le Hutt perd deux points de vie\n\n...\nHan Solo perd deux points de vie\nJabba le Hutt perd deux points de vie\nHan Solo est vainqueur, il lui reste encore 2 points de vie alors que Jabba le Hutt est mort\n</code></pre>   4. Revenons \u00e0 `#!python personnage`.      On dispose maintenant des m\u00e9thodes suivantes :     \ud83d\udc0d Script Python<pre><code>class personnage:\n    |\n    |  donneEtat\n    |     --&gt; int\n    |     renvoie le nombre de pts de vie\n    |\n    |  perdVie\n    |     enleve un ou deux points de vie\n    |\n    |  donneNom\n    |     --&gt; str\n    |     renvoie le nom du personnage\n</code></pre> On veut cr\u00e9er un attribut `#!python chance` lors de l\u2019instanciation du personnage.   C\u2019est un entier entre `#!python 0` et `#!python 4`.   L\u2019effet de la chance est le suivant : dans la m\u00e9thode `#!python perdVie`, on tire toujours un nombre al\u00e9atoire entre `#!python 0` et `#!python 1`.   * Si ce nombre multipli\u00e9 par `#!python 10` d\u00e9passe la chance du personnage, il perd un point de vie. * Sinon il ne perd pas de vie et on affiche `#!python \"Han Solo a de la chance !\"`    Par exemple, Han Solo a `#!python 2` de chance.    * Dans `#!python perdVie`, on tire `#!python 0.3`,   `#!python 10 * 0.3 = 3` et `#!python 3 &gt; 2` : il perd un point de vie. * Dans `#!python perdVie`, on tire `#!python 0.12345`   `#!python 10 * 0.12345 = 1.2345` et `#!python 1.2345 &lt; 2` : il ne perd pas de vie.    Il faut aussi changer la m\u00e9thode `#!python __init__` pour pouvoir cr\u00e9er nos personnages ainsi :  \ud83d\udc0d Script Python<pre><code>hanSolo = Personnage(\"Han Solo\", 10, 2)\n</code></pre>  Impl\u00e9mentez la chance et faites quelques essais.  Attention, si vous donnez une chance trop \u00e9lev\u00e9e, le personnage ne perdra jamais de vie et la boucle de la fonction `#!python game` sera infinie !     5. Maintenant qu\u2019on peut donner un attribut `#!python chance`, il faut *prot\u00e9ger* le programme.       Une valeur de chance trop \u00e9lev\u00e9e peut conduire \u00e0 un programme qui ne termine jamais, il suffit de donner une chance de `#!python 10` pour qu\u2019un personnage soit invicible !  Nous allons cr\u00e9er une m\u00e9thode interne `#!python __limiterChance` qui emp\u00eache la chance d\u2019\u00eatre sup\u00e9rieure \u00e0 `#!python 4`.  Si le param\u00e8tre `#!python chance` est inf\u00e9rieur ou \u00e9gal \u00e0 `#!python 4`, il est inchang\u00e9, s\u2019il d\u00e9passe `#!python 4`, il est ramen\u00e9 \u00e0 `#!python 4`.  Cette m\u00e9thode interne ne sera pas appel\u00e9e par les \u00e9l\u00e9ments ext\u00e9rieurs au programme, seulement par le programme lui-m\u00eame !  On utilise cette m\u00e9thode interne dans `#!python __init__`, il faut penser \u00e0 l\u2019appeler.   Exercice 12  <p>Continuer ce jeu en mode texte avec vos propres m\u00e9thodes.</p> <p>On pourrait cr\u00e9er des m\u00e9thodes comme <code>taper</code> dans la classe <code>personnage</code>, qui d\u00e9pendrait de la <code>chance</code> et d\u2019un attribut <code>force</code> \u00e0 d\u00e9finir\u2026</p> <p><code>taper</code> pourrait renvoyer un nombre al\u00e9atoire entre 1 et <code>force</code>, par exemple. Et c\u2019est ce nombre qui d\u00e9finirait le nombre de points perdus par le personnage\u2026 Ce ne sont que des id\u00e9es, je vous laisse libre de choisir une am\u00e9lioration.</p>"}]}